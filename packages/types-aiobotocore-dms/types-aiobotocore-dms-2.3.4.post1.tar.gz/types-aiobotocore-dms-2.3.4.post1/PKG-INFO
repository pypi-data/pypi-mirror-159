Metadata-Version: 2.1
Name: types-aiobotocore-dms
Version: 2.3.4.post1
Summary: Type annotations for aiobotocore.DatabaseMigrationService 2.3.4 service generated with mypy-boto3-builder 7.8.0
Home-page: https://github.com/youtype/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_dms/
Project-URL: Source, https://github.com/youtype/mypy_boto3_builder
Project-URL: Tracker, https://github.com/youtype/mypy_boto3_builder/issues
Keywords: aiobotocore dms type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown

<a id="types-aiobotocore-dms"></a>

# types-aiobotocore-dms

[![PyPI - types-aiobotocore-dms](https://img.shields.io/pypi/v/types-aiobotocore-dms.svg?color=blue)](https://pypi.org/project/types-aiobotocore-dms)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-dms.svg?color=blue)](https://pypi.org/project/types-aiobotocore-dms)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-dms?color=blue)](https://pypistats.org/packages/types-aiobotocore-dms)

![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[aiobotocore.DatabaseMigrationService 2.3.4](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dms.html#DatabaseMigrationService)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 7.8.0](https://github.com/youtype/mypy_boto3_builder).

More information can be found on
[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in
[types-aiobotocore-dms docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_dms/).

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)

- [types-aiobotocore-dms](#types-aiobotocore-dms)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [How to uninstall](#how-to-uninstall)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Emacs](#emacs)
    - [Sublime Text](#sublime-text)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
    - [Literals](#literals)
    - [Typed dictionaries](#typed-dictionaries)
  - [How it works](#how-it-works)
  - [What's new](#what's-new)
    - [Implemented features](#implemented-features)
    - [Latest changes](#latest-changes)
  - [Versioning](#versioning)
  - [Thank you](#thank-you)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `DatabaseMigrationService`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `DatabaseMigrationService` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[dms]'


# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[dms]'


# standalone installation
python -m pip install types-aiobotocore-dms
```

<a id="how-to-uninstall"></a>

## How to uninstall

```bash
python -m pip uninstall -y types-aiobotocore-dms
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[dms]` in your environment:

```bash
python -m pip install 'types-aiobotocore[dms]'
```

Both type checking and code completion should now work. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pycharm"></a>

### PyCharm

Install `types-aiobotocore-lite[dms]` in your environment:

```bash
python -m pip install 'types-aiobotocore-lite[dms]'`
```

Both type checking and code completion should now work. Explicit type
annotations **are required**.

Use `types-aiobotocore` package instead for implicit type discovery.

<a id="emacs"></a>

### Emacs

- Install `types-aiobotocore` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[dms]'
```

- Install [use-package](https://github.com/jwiegley/use-package),
  [lsp](https://github.com/emacs-lsp/lsp-mode/),
  [company](https://github.com/company-mode/company-mode) and
  [flycheck](https://github.com/flycheck/flycheck) packages
- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package

```elisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp)))  ; or lsp-deferred
  :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3"))
  )
```

- Make sure emacs uses the environment where you have installed
  `types-aiobotocore`

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="sublime-text"></a>

### Sublime Text

- Install `types-aiobotocore[dms]` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[dms]'
```

- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) package

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[dms]` in your environment:

```bash
python -m pip install 'types-aiobotocore[dms]'`
```

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `npm i -g pyright`
- Install `types-aiobotocore[dms]` in your environment:

```bash
python -m pip install 'types-aiobotocore[dms]'
```

Optionally, you can install `types-aiobotocore` to `typings` folder.

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`DatabaseMigrationServiceClient` provides annotations for
`session.create_client("dms")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_dms import DatabaseMigrationServiceClient

session = get_session()
async with session.create_client("dms") as client:
    client: DatabaseMigrationServiceClient
    # now client usage is checked by mypy and IDE should provide code completion
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_dms.paginator` module contains type annotations for all
paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_dms import DatabaseMigrationServiceClient
from types_aiobotocore_dms.paginator import (
    DescribeCertificatesPaginator,
    DescribeConnectionsPaginator,
    DescribeEndpointTypesPaginator,
    DescribeEndpointsPaginator,
    DescribeEventSubscriptionsPaginator,
    DescribeEventsPaginator,
    DescribeOrderableReplicationInstancesPaginator,
    DescribeReplicationInstancesPaginator,
    DescribeReplicationSubnetGroupsPaginator,
    DescribeReplicationTaskAssessmentResultsPaginator,
    DescribeReplicationTasksPaginator,
    DescribeSchemasPaginator,
    DescribeTableStatisticsPaginator,
)

session = get_session()
async with session.create_client("dms") as client:
    client: DatabaseMigrationServiceClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        describe_certificates_paginator: DescribeCertificatesPaginator = client.get_paginator("describe_certificates")
        describe_connections_paginator: DescribeConnectionsPaginator = client.get_paginator("describe_connections")
        describe_endpoint_types_paginator: DescribeEndpointTypesPaginator = client.get_paginator("describe_endpoint_types")
        describe_endpoints_paginator: DescribeEndpointsPaginator = client.get_paginator("describe_endpoints")
        describe_event_subscriptions_paginator: DescribeEventSubscriptionsPaginator = client.get_paginator("describe_event_subscriptions")
        describe_events_paginator: DescribeEventsPaginator = client.get_paginator("describe_events")
        describe_orderable_replication_instances_paginator: DescribeOrderableReplicationInstancesPaginator = client.get_paginator("describe_orderable_replication_instances")
        describe_replication_instances_paginator: DescribeReplicationInstancesPaginator = client.get_paginator("describe_replication_instances")
        describe_replication_subnet_groups_paginator: DescribeReplicationSubnetGroupsPaginator = client.get_paginator("describe_replication_subnet_groups")
        describe_replication_task_assessment_results_paginator: DescribeReplicationTaskAssessmentResultsPaginator = client.get_paginator("describe_replication_task_assessment_results")
        describe_replication_tasks_paginator: DescribeReplicationTasksPaginator = client.get_paginator("describe_replication_tasks")
        describe_schemas_paginator: DescribeSchemasPaginator = client.get_paginator("describe_schemas")
        describe_table_statistics_paginator: DescribeTableStatisticsPaginator = client.get_paginator("describe_table_statistics")
    ```


### Waiters annotations

`types_aiobotocore_dms.waiter` module contains type annotations for all waiters.

```python
from aiobotocore.session import get_session

from types_aiobotocore_dms.client import DatabaseMigrationServiceClient
from types_aiobotocore_dms.waiter import (
    EndpointDeletedWaiter,
    ReplicationInstanceAvailableWaiter,
    ReplicationInstanceDeletedWaiter,
    ReplicationTaskDeletedWaiter,
    ReplicationTaskReadyWaiter,
    ReplicationTaskRunningWaiter,
    ReplicationTaskStoppedWaiter,
    TestConnectionSucceedsWaiter,
)

session = get_session()
async with session.create_client("dms") as client:
    client: DatabaseMigrationServiceClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        endpoint_deleted_waiter: EndpointDeletedWaiter = client.get_waiter("endpoint_deleted")
        replication_instance_available_waiter: ReplicationInstanceAvailableWaiter = client.get_waiter("replication_instance_available")
        replication_instance_deleted_waiter: ReplicationInstanceDeletedWaiter = client.get_waiter("replication_instance_deleted")
        replication_task_deleted_waiter: ReplicationTaskDeletedWaiter = client.get_waiter("replication_task_deleted")
        replication_task_ready_waiter: ReplicationTaskReadyWaiter = client.get_waiter("replication_task_ready")
        replication_task_running_waiter: ReplicationTaskRunningWaiter = client.get_waiter("replication_task_running")
        replication_task_stopped_waiter: ReplicationTaskStoppedWaiter = client.get_waiter("replication_task_stopped")
        test_connection_succeeds_waiter: TestConnectionSucceedsWaiter = client.get_waiter("test_connection_succeeds")
    ```





<a id="literals"></a>

### Literals

`types_aiobotocore_dms.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_dms.literals import (
    AuthMechanismValueType,
    AuthTypeValueType,
    CannedAclForObjectsValueType,
    CharLengthSemanticsType,
    CompressionTypeValueType,
    DataFormatValueType,
    DatePartitionDelimiterValueType,
    DatePartitionSequenceValueType,
    DescribeCertificatesPaginatorName,
    DescribeConnectionsPaginatorName,
    DescribeEndpointTypesPaginatorName,
    DescribeEndpointsPaginatorName,
    DescribeEventSubscriptionsPaginatorName,
    DescribeEventsPaginatorName,
    DescribeOrderableReplicationInstancesPaginatorName,
    DescribeReplicationInstancesPaginatorName,
    DescribeReplicationSubnetGroupsPaginatorName,
    DescribeReplicationTaskAssessmentResultsPaginatorName,
    DescribeReplicationTasksPaginatorName,
    DescribeSchemasPaginatorName,
    DescribeTableStatisticsPaginatorName,
    DmsSslModeValueType,
    EncodingTypeValueType,
    EncryptionModeValueType,
    EndpointDeletedWaiterName,
    EndpointSettingTypeValueType,
    KafkaSecurityProtocolType,
    MessageFormatValueType,
    MigrationTypeValueType,
    NestingLevelValueType,
    ParquetVersionValueType,
    PluginNameValueType,
    RedisAuthTypeValueType,
    RefreshSchemasStatusTypeValueType,
    ReleaseStatusValuesType,
    ReloadOptionValueType,
    ReplicationEndpointTypeValueType,
    ReplicationInstanceAvailableWaiterName,
    ReplicationInstanceDeletedWaiterName,
    ReplicationTaskDeletedWaiterName,
    ReplicationTaskReadyWaiterName,
    ReplicationTaskRunningWaiterName,
    ReplicationTaskStoppedWaiterName,
    SafeguardPolicyType,
    SourceTypeType,
    SslSecurityProtocolValueType,
    StartReplicationTaskTypeValueType,
    TargetDbTypeType,
    TestConnectionSucceedsWaiterName,
    DatabaseMigrationServiceServiceName,
    ServiceName,
    ResourceServiceName,
    PaginatorName,
    WaiterName,
    RegionName,
)

def check_value(value: AuthMechanismValueType) -> bool:
    ...
````

<a id="typed-dictionaries"></a>

### Typed dictionaries

`types_aiobotocore_dms.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_dms.type_defs import (
    AccountQuotaTypeDef,
    TagTypeDef,
    ApplyPendingMaintenanceActionMessageRequestTypeDef,
    ResponseMetadataTypeDef,
    AvailabilityZoneTypeDef,
    CancelReplicationTaskAssessmentRunMessageRequestTypeDef,
    CertificateTypeDef,
    ConnectionTypeDef,
    DmsTransferSettingsTypeDef,
    DocDbSettingsTypeDef,
    DynamoDbSettingsTypeDef,
    ElasticsearchSettingsTypeDef,
    GcpMySQLSettingsTypeDef,
    IBMDb2SettingsTypeDef,
    KafkaSettingsTypeDef,
    KinesisSettingsTypeDef,
    MicrosoftSQLServerSettingsTypeDef,
    MongoDbSettingsTypeDef,
    MySQLSettingsTypeDef,
    NeptuneSettingsTypeDef,
    OracleSettingsTypeDef,
    PostgreSQLSettingsTypeDef,
    RedisSettingsTypeDef,
    RedshiftSettingsTypeDef,
    S3SettingsTypeDef,
    SybaseSettingsTypeDef,
    EventSubscriptionTypeDef,
    DeleteCertificateMessageRequestTypeDef,
    DeleteConnectionMessageRequestTypeDef,
    DeleteEndpointMessageRequestTypeDef,
    DeleteEventSubscriptionMessageRequestTypeDef,
    DeleteReplicationInstanceMessageRequestTypeDef,
    DeleteReplicationSubnetGroupMessageRequestTypeDef,
    DeleteReplicationTaskAssessmentRunMessageRequestTypeDef,
    DeleteReplicationTaskMessageRequestTypeDef,
    DescribeApplicableIndividualAssessmentsMessageRequestTypeDef,
    FilterTypeDef,
    PaginatorConfigTypeDef,
    WaiterConfigTypeDef,
    DescribeEndpointSettingsMessageRequestTypeDef,
    EndpointSettingTypeDef,
    SupportedEndpointTypeTypeDef,
    EventCategoryGroupTypeDef,
    EventTypeDef,
    DescribeOrderableReplicationInstancesMessageRequestTypeDef,
    OrderableReplicationInstanceTypeDef,
    DescribeRefreshSchemasStatusMessageRequestTypeDef,
    RefreshSchemasStatusTypeDef,
    DescribeReplicationInstanceTaskLogsMessageRequestTypeDef,
    ReplicationInstanceTaskLogTypeDef,
    DescribeReplicationTaskAssessmentResultsMessageRequestTypeDef,
    ReplicationTaskAssessmentResultTypeDef,
    ReplicationTaskIndividualAssessmentTypeDef,
    DescribeSchemasMessageRequestTypeDef,
    TableStatisticsTypeDef,
    ListTagsForResourceMessageRequestTypeDef,
    ModifyEventSubscriptionMessageRequestTypeDef,
    ModifyReplicationInstanceMessageRequestTypeDef,
    ModifyReplicationSubnetGroupMessageRequestTypeDef,
    ModifyReplicationTaskMessageRequestTypeDef,
    MoveReplicationTaskMessageRequestTypeDef,
    PendingMaintenanceActionTypeDef,
    RebootReplicationInstanceMessageRequestTypeDef,
    RefreshSchemasMessageRequestTypeDef,
    TableToReloadTypeDef,
    RemoveTagsFromResourceMessageRequestTypeDef,
    ReplicationPendingModifiedValuesTypeDef,
    VpcSecurityGroupMembershipTypeDef,
    ReplicationTaskAssessmentRunProgressTypeDef,
    ReplicationTaskStatsTypeDef,
    StartReplicationTaskAssessmentMessageRequestTypeDef,
    StartReplicationTaskAssessmentRunMessageRequestTypeDef,
    StartReplicationTaskMessageRequestTypeDef,
    StopReplicationTaskMessageRequestTypeDef,
    TestConnectionMessageRequestTypeDef,
    AddTagsToResourceMessageRequestTypeDef,
    CreateEventSubscriptionMessageRequestTypeDef,
    CreateReplicationInstanceMessageRequestTypeDef,
    CreateReplicationSubnetGroupMessageRequestTypeDef,
    CreateReplicationTaskMessageRequestTypeDef,
    ImportCertificateMessageRequestTypeDef,
    DescribeAccountAttributesResponseTypeDef,
    DescribeApplicableIndividualAssessmentsResponseTypeDef,
    DescribeSchemasResponseTypeDef,
    ListTagsForResourceResponseTypeDef,
    ReloadTablesResponseTypeDef,
    SubnetTypeDef,
    DeleteCertificateResponseTypeDef,
    DescribeCertificatesResponseTypeDef,
    ImportCertificateResponseTypeDef,
    DeleteConnectionResponseTypeDef,
    DescribeConnectionsResponseTypeDef,
    TestConnectionResponseTypeDef,
    CreateEndpointMessageRequestTypeDef,
    EndpointTypeDef,
    ModifyEndpointMessageRequestTypeDef,
    CreateEventSubscriptionResponseTypeDef,
    DeleteEventSubscriptionResponseTypeDef,
    DescribeEventSubscriptionsResponseTypeDef,
    ModifyEventSubscriptionResponseTypeDef,
    DescribeCertificatesMessageRequestTypeDef,
    DescribeConnectionsMessageRequestTypeDef,
    DescribeEndpointTypesMessageRequestTypeDef,
    DescribeEndpointsMessageRequestTypeDef,
    DescribeEventCategoriesMessageRequestTypeDef,
    DescribeEventSubscriptionsMessageRequestTypeDef,
    DescribeEventsMessageRequestTypeDef,
    DescribePendingMaintenanceActionsMessageRequestTypeDef,
    DescribeReplicationInstancesMessageRequestTypeDef,
    DescribeReplicationSubnetGroupsMessageRequestTypeDef,
    DescribeReplicationTaskAssessmentRunsMessageRequestTypeDef,
    DescribeReplicationTaskIndividualAssessmentsMessageRequestTypeDef,
    DescribeReplicationTasksMessageRequestTypeDef,
    DescribeTableStatisticsMessageRequestTypeDef,
    DescribeCertificatesMessageDescribeCertificatesPaginateTypeDef,
    DescribeConnectionsMessageDescribeConnectionsPaginateTypeDef,
    DescribeEndpointTypesMessageDescribeEndpointTypesPaginateTypeDef,
    DescribeEndpointsMessageDescribeEndpointsPaginateTypeDef,
    DescribeEventSubscriptionsMessageDescribeEventSubscriptionsPaginateTypeDef,
    DescribeEventsMessageDescribeEventsPaginateTypeDef,
    DescribeOrderableReplicationInstancesMessageDescribeOrderableReplicationInstancesPaginateTypeDef,
    DescribeReplicationInstancesMessageDescribeReplicationInstancesPaginateTypeDef,
    DescribeReplicationSubnetGroupsMessageDescribeReplicationSubnetGroupsPaginateTypeDef,
    DescribeReplicationTaskAssessmentResultsMessageDescribeReplicationTaskAssessmentResultsPaginateTypeDef,
    DescribeReplicationTasksMessageDescribeReplicationTasksPaginateTypeDef,
    DescribeSchemasMessageDescribeSchemasPaginateTypeDef,
    DescribeTableStatisticsMessageDescribeTableStatisticsPaginateTypeDef,
    DescribeConnectionsMessageTestConnectionSucceedsWaitTypeDef,
    DescribeEndpointsMessageEndpointDeletedWaitTypeDef,
    DescribeReplicationInstancesMessageReplicationInstanceAvailableWaitTypeDef,
    DescribeReplicationInstancesMessageReplicationInstanceDeletedWaitTypeDef,
    DescribeReplicationTasksMessageReplicationTaskDeletedWaitTypeDef,
    DescribeReplicationTasksMessageReplicationTaskReadyWaitTypeDef,
    DescribeReplicationTasksMessageReplicationTaskRunningWaitTypeDef,
    DescribeReplicationTasksMessageReplicationTaskStoppedWaitTypeDef,
    DescribeEndpointSettingsResponseTypeDef,
    DescribeEndpointTypesResponseTypeDef,
    DescribeEventCategoriesResponseTypeDef,
    DescribeEventsResponseTypeDef,
    DescribeOrderableReplicationInstancesResponseTypeDef,
    DescribeRefreshSchemasStatusResponseTypeDef,
    RefreshSchemasResponseTypeDef,
    DescribeReplicationInstanceTaskLogsResponseTypeDef,
    DescribeReplicationTaskAssessmentResultsResponseTypeDef,
    DescribeReplicationTaskIndividualAssessmentsResponseTypeDef,
    DescribeTableStatisticsResponseTypeDef,
    ResourcePendingMaintenanceActionsTypeDef,
    ReloadTablesMessageRequestTypeDef,
    ReplicationTaskAssessmentRunTypeDef,
    ReplicationTaskTypeDef,
    ReplicationSubnetGroupTypeDef,
    CreateEndpointResponseTypeDef,
    DeleteEndpointResponseTypeDef,
    DescribeEndpointsResponseTypeDef,
    ModifyEndpointResponseTypeDef,
    ApplyPendingMaintenanceActionResponseTypeDef,
    DescribePendingMaintenanceActionsResponseTypeDef,
    CancelReplicationTaskAssessmentRunResponseTypeDef,
    DeleteReplicationTaskAssessmentRunResponseTypeDef,
    DescribeReplicationTaskAssessmentRunsResponseTypeDef,
    StartReplicationTaskAssessmentRunResponseTypeDef,
    CreateReplicationTaskResponseTypeDef,
    DeleteReplicationTaskResponseTypeDef,
    DescribeReplicationTasksResponseTypeDef,
    ModifyReplicationTaskResponseTypeDef,
    MoveReplicationTaskResponseTypeDef,
    StartReplicationTaskAssessmentResponseTypeDef,
    StartReplicationTaskResponseTypeDef,
    StopReplicationTaskResponseTypeDef,
    CreateReplicationSubnetGroupResponseTypeDef,
    DescribeReplicationSubnetGroupsResponseTypeDef,
    ModifyReplicationSubnetGroupResponseTypeDef,
    ReplicationInstanceTypeDef,
    CreateReplicationInstanceResponseTypeDef,
    DeleteReplicationInstanceResponseTypeDef,
    DescribeReplicationInstancesResponseTypeDef,
    ModifyReplicationInstanceResponseTypeDef,
    RebootReplicationInstanceResponseTypeDef,
)

def get_structure() -> AccountQuotaTypeDef:
    return {
      ...
    }
```

<a id="how-it-works"></a>

## How it works

Fully automated
[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefully
generates type annotations for each service, patiently waiting for
`aiobotocore` updates. It delivers a drop-in type annotations for you and makes
sure that:

- All available `aiobotocore` services are covered.
- Each public class and method of every `aiobotocore` service gets valid type
  annotations extracted from the documentation (blame `botocore` docs if types
  are incorrect).
- Type annotations include up-to-date documentation.
- Link to documentation is provided for every method.
- Code is processed by [black](https://github.com/psf/black) and
  [isort](https://github.com/PyCQA/isort) for readability.

<a id="what's-new"></a>

## What's new

<a id="implemented-features"></a>

### Implemented features

- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries
- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`
  compatibility
- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type
  annotations for each service
- Generated `TypeDefs` for each service
- Generated `Literals` for each service
- Auto discovery of types for `boto3.client` and `boto3.session` calls
- Auto discovery of types for `session.client` and `session.session` calls
- Auto discovery of types for `client.get_waiter` and `client.get_paginator`
  calls
- Auto discovery of types for `ServiceResource` and `Resource` collections
- Auto discovery of types for `aiobotocore.Session.create_client` calls

<a id="latest-changes"></a>

### Latest changes

Builder changelog can be found in
[Releases](https://github.com/youtype/mypy_boto3_builder/releases).

<a id="versioning"></a>

## Versioning

`types-aiobotocore-dms` version is the same as related `aiobotocore` version
and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

<a id="thank-you"></a>

## Thank you

- [Allie Fitter](https://github.com/alliefitter) for
  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),
  this package is based on top of his work
- [black](https://github.com/psf/black) developers for an awesome formatting
  tool
- [Timothy Edmund Crosley](https://github.com/timothycrosley) for
  [isort](https://github.com/PyCQA/isort) and how flexible it is
- [mypy](https://github.com/python/mypy) developers for doing all dirty work
  for us
- [pyright](https://github.com/microsoft/pyright) team for the new era of typed
  Python

<a id="documentation"></a>

## Documentation

All services type annotations can be found in
[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_dms/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)
repository.


