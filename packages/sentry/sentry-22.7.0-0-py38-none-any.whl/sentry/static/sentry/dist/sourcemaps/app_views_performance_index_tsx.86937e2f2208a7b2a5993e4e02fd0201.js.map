{"version":3,"file":"chunks/app_views_performance_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"knBAmBA,MAAOA,EAAqBC,EAAuBC,IACjDC,EAAAA,EAAAA,GAAoD,CAClDC,KAAM,kCAGGC,EAAcH,EAAmBI,SAMvC,IAAKC,EASAC,G,SATAD,GAAAA,EAAAA,MAAAA,QAAAA,EAAAA,QAAAA,UAAAA,EAAAA,aAAAA,e,CAAAA,IAAAA,EAAAA,K,SASAC,GAAAA,EAAAA,KAAAA,OAAAA,EAAAA,YAAAA,cAAAA,EAAAA,iBAAAA,mB,CAAAA,IAAAA,EAAAA,KAyBL,MAAMC,EAAqB,IAM5B,IAN6B,SACjCC,EADiC,aAEjCC,GAII,EACJ,MACMC,GADeC,EAAAA,EAAAA,KACUC,SAASC,SAAS,2BAE3CC,OAA0C,IAAjBL,GAExBM,EAAqBC,IAAyBC,EAAAA,EAAAA,aACnD,CAACC,EAAaC,IAAmBA,GACjCb,EAASc,OAEJC,EAAiBC,IAAsBL,EAAAA,EAAAA,aAC5C,CAACC,EAAoBC,IAA0BA,GAC/Cd,EAAgBkB,OAGZC,EAAqBV,EAAkBL,EAAeM,EAEtDU,EACJf,IACCc,IAAuBlB,EAASoB,aAAeF,IAAuBlB,EAASc,MAC5EO,EAA8BjB,GAAac,IAAuBlB,EAASc,KAC3EQ,EACJlB,GAAac,IAAuBlB,EAASoB,YACzCG,EACJnB,GAAac,IAAuBlB,EAASwB,iBAEzCC,EAAkB,GAAEP,IAE1B,OACE,QAAC1B,EAAD,CACEkC,MAAO,CACLX,gBAAAA,EACAG,mBAAAA,EACAC,qBAAAA,EACAE,4BAAAA,EACAC,kCAAAA,EACAC,uCAAAA,EACAE,eAAAA,EACAf,sBAAAA,EACAM,mBAAAA,GAVJ,SAaGd,KAhDMD,EAAAA,YAAAA,qBAqDN,MAAM0B,EAAuBlC,G,yKC5G7B,SAASE,EAAkCiC,GAKhD,MAAM,OACJC,GAAS,EADL,aAEJC,EAAgB,mBAAkBF,EAAQhC,+CAFtC,KAGJA,GACEgC,EAEEG,GAAUC,EAAAA,EAAAA,oBAAuCC,GAYvD,OAVAF,EAAQG,YAActC,EAUf,CACLmC,EAAQI,SATV,WACE,MAAMC,GAAUC,EAAAA,EAAAA,YAAWN,GAC3B,IAAKK,GAAWP,EACd,MAAM,IAAIS,MAAMR,GAElB,OAAOM,GAMPL,K,kaCtBJ,SAASQ,EAAT,GAA+D,IAAjC,aAACC,EAAD,SAAetC,GAAkB,EAS7D,OACE,QAAC,IAAD,CACEuC,SAAS,oCACTnC,SAAU,CAAC,oBACXkC,aAAcA,EACdE,eAbJ,WACE,OACE,QAAC,KAAD,WACE,QAAC,IAAD,CAAOC,KAAK,UAAZ,UAAuBC,EAAAA,EAAAA,GAAE,8CAM7B,UAME,QAAC,KAAD,UAAqB1C,MAhBlBqC,EAAAA,YAAAA,uBAqBT,SAAeM,EAAAA,EAAAA,GAAiBN","sources":["webpack:///./app/utils/performance/contexts/metricsEnhancedSetting.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/views/performance/index.tsx"],"sourcesContent":["import {Dispatch, ReactNode, useReducer} from 'react';\n\nimport localStorage from 'sentry/utils/localStorage';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport {createDefinedContext} from './utils';\n\nexport interface MetricsEnhancedSettingContext {\n  autoSampleState: AutoSampleState;\n  hideSinceMetricsOnly: boolean;\n  memoizationKey: string;\n  metricSettingState: MEPState | null;\n  setAutoSampleState: Dispatch<AutoSampleState>;\n  setMetricSettingState: Dispatch<MEPState>;\n  shouldQueryProvideMEPMetricParams: boolean;\n  shouldQueryProvideMEPParams: boolean;\n  shouldQueryProvideMEPTransactionParams: boolean;\n}\n\nconst [_MEPSettingProvider, _useMEPSettingContext, _MEPSettingContext] =\n  createDefinedContext<MetricsEnhancedSettingContext>({\n    name: 'MetricsEnhancedSettingContext',\n  });\n\nexport const MEPConsumer = _MEPSettingContext.Consumer;\n\n/**\n * These will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n * \"Unset\" should be the initial state before any queries return for the first time.\n */\nexport enum AutoSampleState {\n  unset = 'unset',\n  metrics = 'metrics',\n  transactions = 'transactions',\n}\n\n/**\n * Metrics/transactions will be called something else in the copy, but functionally the data is coming from metrics / transactions.\n */\nexport enum MEPState {\n  auto = 'auto',\n  metricsOnly = 'metricsOnly',\n  transactionsOnly = 'transactionsOnly',\n}\n\nconst storageKey = 'performance.metrics-enhanced-setting';\nexport class MEPSetting {\n  static get(): MEPState | null {\n    const value = localStorage.getItem(storageKey);\n    if (value) {\n      if (!(value in MEPState)) {\n        localStorage.removeItem(storageKey);\n        return null;\n      }\n      return MEPState[value];\n    }\n    return null;\n  }\n\n  static set(value: MEPState) {\n    localStorage.setItem(storageKey, value);\n  }\n}\n\nexport const MEPSettingProvider = ({\n  children,\n  _hasMEPState,\n}: {\n  children: ReactNode;\n  _hasMEPState?: MEPState;\n}) => {\n  const organization = useOrganization();\n  const canUseMEP = organization.features.includes('performance-use-metrics');\n\n  const isControlledMEP = typeof _hasMEPState !== 'undefined';\n\n  const [_metricSettingState, setMetricSettingState] = useReducer(\n    (_: MEPState, next: MEPState) => next,\n    MEPState.auto\n  );\n  const [autoSampleState, setAutoSampleState] = useReducer(\n    (_: AutoSampleState, next: AutoSampleState) => next,\n    AutoSampleState.unset\n  );\n\n  const metricSettingState = isControlledMEP ? _hasMEPState : _metricSettingState;\n\n  const hideSinceMetricsOnly =\n    canUseMEP &&\n    (metricSettingState === MEPState.metricsOnly || metricSettingState === MEPState.auto); // TODO(k-fish): Change this so auto includes data state.\n  const shouldQueryProvideMEPParams = canUseMEP && metricSettingState === MEPState.auto;\n  const shouldQueryProvideMEPMetricParams =\n    canUseMEP && metricSettingState === MEPState.metricsOnly;\n  const shouldQueryProvideMEPTransactionParams =\n    canUseMEP && metricSettingState === MEPState.transactionsOnly;\n\n  const memoizationKey = `${metricSettingState}`;\n\n  return (\n    <_MEPSettingProvider\n      value={{\n        autoSampleState,\n        metricSettingState,\n        hideSinceMetricsOnly,\n        shouldQueryProvideMEPParams,\n        shouldQueryProvideMEPMetricParams,\n        shouldQueryProvideMEPTransactionParams,\n        memoizationKey,\n        setMetricSettingState,\n        setAutoSampleState,\n      }}\n    >\n      {children}\n    </_MEPSettingProvider>\n  );\n};\n\nexport const useMEPSettingContext = _useMEPSettingContext;\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n","import Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization} from 'sentry/types';\nimport {MEPSettingProvider} from 'sentry/utils/performance/contexts/metricsEnhancedSetting';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype Props = {\n  children: React.ReactChildren;\n  organization: Organization;\n};\n\nfunction PerformanceContainer({organization, children}: Props) {\n  function renderNoAccess() {\n    return (\n      <PageContent>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </PageContent>\n    );\n  }\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:performance-page\"\n      features={['performance-view']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <MEPSettingProvider>{children}</MEPSettingProvider>\n    </Feature>\n  );\n}\n\nexport default withOrganization(PerformanceContainer);\n"],"names":["_MEPSettingProvider","_useMEPSettingContext","_MEPSettingContext","createDefinedContext","name","MEPConsumer","Consumer","AutoSampleState","MEPState","MEPSettingProvider","children","_hasMEPState","canUseMEP","useOrganization","features","includes","isControlledMEP","_metricSettingState","setMetricSettingState","useReducer","_","next","auto","autoSampleState","setAutoSampleState","unset","metricSettingState","hideSinceMetricsOnly","metricsOnly","shouldQueryProvideMEPParams","shouldQueryProvideMEPMetricParams","shouldQueryProvideMEPTransactionParams","transactionsOnly","memoizationKey","value","useMEPSettingContext","options","strict","errorMessage","Context","createContext","undefined","displayName","Provider","context","useContext","Error","PerformanceContainer","organization","hookName","renderDisabled","type","t","withOrganization"],"sourceRoot":""}