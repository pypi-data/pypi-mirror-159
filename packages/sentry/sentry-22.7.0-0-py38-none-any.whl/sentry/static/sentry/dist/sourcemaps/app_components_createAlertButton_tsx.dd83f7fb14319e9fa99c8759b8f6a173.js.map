{"version":3,"file":"chunks/app_components_createAlertButton_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/createAlertButton.tsx"],"sourcesContent":["import {Fragment} from 'react';\n// eslint-disable-next-line no-restricted-imports\nimport {withRouter, WithRouterProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport {navigateTo} from 'sentry/actionCreators/navigation';\nimport Access from 'sentry/components/acl/access';\nimport Alert from 'sentry/components/alert';\nimport GuideAnchor from 'sentry/components/assistant/guideAnchor';\nimport Button, {ButtonProps} from 'sentry/components/button';\nimport Link from 'sentry/components/links/link';\nimport {IconClose, IconSiren} from 'sentry/icons';\nimport {SVGIconProps} from 'sentry/icons/svgIcon';\nimport {t, tct} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  Aggregation,\n  AGGREGATIONS,\n  explodeFieldString,\n} from 'sentry/utils/discover/fields';\nimport useApi from 'sentry/utils/useApi';\nimport {\n  errorFieldConfig,\n  transactionFieldConfig,\n} from 'sentry/views/alerts/rules/metric/constants';\nimport {getQueryDatasource} from 'sentry/views/alerts/utils';\nimport {\n  AlertType,\n  AlertWizardAlertNames,\n  AlertWizardRuleTemplates,\n  DEFAULT_WIZARD_TEMPLATE,\n} from 'sentry/views/alerts/wizard/options';\n\n/**\n * Discover query supports more features than alert rules\n * To create an alert rule from a discover query, some parameters need to be adjusted\n */\ntype IncompatibleQueryProperties = {\n  /**\n   * Must have zero or one environments\n   */\n  hasEnvironmentError: boolean;\n  /**\n   * event.type must be error or transaction\n   */\n  hasEventTypeError: boolean;\n  /**\n   * Must have exactly one project selected and not -1 (all projects)\n   */\n  hasProjectError: boolean;\n  hasYAxisError: boolean;\n};\n\ntype AlertProps = {\n  eventView: EventView;\n  incompatibleQuery: IncompatibleQueryProperties;\n  /**\n   * Dismiss alert\n   */\n  onClose: () => void;\n  orgId: string;\n};\n\n/**\n * Displays messages to the user on what needs to change in their query\n */\nfunction IncompatibleQueryAlert({\n  incompatibleQuery,\n  eventView,\n  orgId,\n  onClose,\n}: AlertProps) {\n  const {hasProjectError, hasEnvironmentError, hasEventTypeError, hasYAxisError} =\n    incompatibleQuery;\n\n  const totalErrors = Object.values(incompatibleQuery).filter(val => val).length;\n\n  const eventTypeError = eventView.clone();\n  eventTypeError.query += ' event.type:error';\n  const eventTypeTransaction = eventView.clone();\n  eventTypeTransaction.query += ' event.type:transaction';\n  const eventTypeDefault = eventView.clone();\n  eventTypeDefault.query += ' event.type:default';\n  const eventTypeErrorDefault = eventView.clone();\n  eventTypeErrorDefault.query += ' event.type:error or event.type:default';\n  const pathname = `/organizations/${orgId}/discover/results/`;\n\n  const eventTypeLinks = {\n    error: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeError.generateQueryStringObject(),\n        }}\n      />\n    ),\n    default: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeDefault.generateQueryStringObject(),\n        }}\n      />\n    ),\n    transaction: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeTransaction.generateQueryStringObject(),\n        }}\n      />\n    ),\n    errorDefault: (\n      <Link\n        to={{\n          pathname,\n          query: eventTypeErrorDefault.generateQueryStringObject(),\n        }}\n      />\n    ),\n  };\n\n  return (\n    <StyledAlert\n      type=\"warning\"\n      showIcon\n      trailingItems={\n        <Button\n          icon={<IconClose size=\"sm\" />}\n          aria-label={t('Close')}\n          size=\"zero\"\n          onClick={onClose}\n          borderless\n        />\n      }\n    >\n      {totalErrors === 1 && (\n        <Fragment>\n          {hasProjectError &&\n            t('An alert can use data from only one Project. Select one and try again.')}\n          {hasEnvironmentError &&\n            t(\n              'An alert supports data from a single Environment or All Environments. Pick one try again.'\n            )}\n          {hasEventTypeError &&\n            tct(\n              'An alert needs a filter of [error:event.type:error], [default:event.type:default], [transaction:event.type:transaction], [errorDefault:(event.type:error OR event.type:default)]. Use one of these and try again.',\n              eventTypeLinks\n            )}\n          {hasYAxisError &&\n            tct(\n              'An alert can’t use the metric [yAxis] just yet. Select another metric and try again.',\n              {\n                yAxis: <StyledCode>{eventView.getYAxis()}</StyledCode>,\n              }\n            )}\n        </Fragment>\n      )}\n      {totalErrors > 1 && (\n        <Fragment>\n          {t('Yikes! That button didn’t work. Please fix the following problems:')}\n          <StyledUnorderedList>\n            {hasProjectError && <li>{t('Select one Project.')}</li>}\n            {hasEnvironmentError && (\n              <li>{t('Select a single Environment or All Environments.')}</li>\n            )}\n            {hasEventTypeError && (\n              <li>\n                {tct(\n                  'Use the filter [error:event.type:error], [default:event.type:default], [transaction:event.type:transaction], [errorDefault:(event.type:error OR event.type:default)].',\n                  eventTypeLinks\n                )}\n              </li>\n            )}\n            {hasYAxisError && (\n              <li>\n                {tct(\n                  'An alert can’t use the metric [yAxis] just yet. Select another metric and try again.',\n                  {\n                    yAxis: <StyledCode>{eventView.getYAxis()}</StyledCode>,\n                  }\n                )}\n              </li>\n            )}\n          </StyledUnorderedList>\n        </Fragment>\n      )}\n    </StyledAlert>\n  );\n}\n\ntype CreateAlertFromViewButtonProps = ButtonProps & {\n  /**\n   * Discover query used to create the alert\n   */\n  eventView: EventView;\n  /**\n   * Called when the current eventView does not meet the requirements of alert rules\n   * @returns a function that takes an alert close function argument\n   */\n  onIncompatibleQuery: (\n    incompatibleAlertNoticeFn: (onAlertClose: () => void) => React.ReactNode,\n    errors: IncompatibleQueryProperties\n  ) => void;\n  /**\n   * Called when the user is redirected to the alert builder\n   */\n  onSuccess: () => void;\n  organization: Organization;\n  projects: Project[];\n  alertType?: AlertType;\n  className?: string;\n  referrer?: string;\n  useAlertWizardV3?: boolean;\n};\n\nfunction incompatibleYAxis(eventView: EventView): boolean {\n  const column = explodeFieldString(eventView.getYAxis());\n  if (\n    column.kind === 'field' ||\n    column.kind === 'equation' ||\n    column.kind === 'calculatedField'\n  ) {\n    return true;\n  }\n\n  const eventTypeMatch = eventView.query.match(/event\\.type:(transaction|error)/);\n  if (!eventTypeMatch) {\n    return false;\n  }\n\n  const dataset = eventTypeMatch[1];\n  const yAxisConfig = dataset === 'error' ? errorFieldConfig : transactionFieldConfig;\n\n  const invalidFunction = !yAxisConfig.aggregations.includes(column.function[0]);\n  // Allow empty parameters, allow all numeric parameters - eg. apdex(300)\n  const aggregation: Aggregation | undefined = AGGREGATIONS[column.function[0]];\n  if (!aggregation) {\n    return false;\n  }\n\n  const isNumericParameter = aggregation.parameters.some(\n    param => param.kind === 'value' && param.dataType === 'number'\n  );\n  // There are other measurements possible, but for the time being, only allow alerting\n  // on the predefined set of measurements for alerts.\n  const allowedParameters = [\n    '',\n    ...yAxisConfig.fields,\n    ...(yAxisConfig.measurementKeys ?? []),\n  ];\n  const invalidParameter =\n    !isNumericParameter && !allowedParameters.includes(column.function[1]);\n\n  return invalidFunction || invalidParameter;\n}\n\n/**\n * Provide a button that can create an alert from an event view.\n * Emits incompatible query issues on click\n */\nfunction CreateAlertFromViewButton({\n  projects,\n  eventView,\n  organization,\n  referrer,\n  onIncompatibleQuery,\n  onSuccess,\n  useAlertWizardV3,\n  alertType,\n  ...buttonProps\n}: CreateAlertFromViewButtonProps) {\n  // Must have exactly one project selected and not -1 (all projects)\n  const hasProjectError = eventView.project.length !== 1 || eventView.project[0] === -1;\n  // Must have one or zero environments\n  const hasEnvironmentError = eventView.environment.length > 1;\n  // Must have event.type of error or transaction\n  const hasEventTypeError = getQueryDatasource(eventView.query) === null;\n  // yAxis must be a function and enabled on alerts\n  const hasYAxisError = incompatibleYAxis(eventView);\n  const errors: IncompatibleQueryProperties = {\n    hasProjectError,\n    hasEnvironmentError,\n    hasEventTypeError,\n    hasYAxisError,\n  };\n  const project = projects.find(p => p.id === `${eventView.project[0]}`);\n  const queryParams = eventView.generateQueryStringObject();\n  if (queryParams.query?.includes(`project:${project?.slug}`)) {\n    queryParams.query = (queryParams.query as string).replace(\n      `project:${project?.slug}`,\n      ''\n    );\n  }\n  const hasErrors = Object.values(errors).some(x => x);\n\n  const alertTemplate = alertType\n    ? AlertWizardRuleTemplates[alertType]\n    : DEFAULT_WIZARD_TEMPLATE;\n\n  const to = hasErrors\n    ? undefined\n    : {\n        pathname: useAlertWizardV3\n          ? `/organizations/${organization.slug}/alerts/new/metric/`\n          : `/organizations/${organization.slug}/alerts/${project?.slug}/new/`,\n        query: {\n          ...queryParams,\n          createFromDiscover: true,\n          referrer,\n          ...(useAlertWizardV3\n            ? {\n                ...alertTemplate,\n                project: project?.slug,\n                aggregate: queryParams.yAxis ?? alertTemplate.aggregate,\n              }\n            : {}),\n        },\n      };\n\n  const handleClick = (event: React.MouseEvent) => {\n    if (hasErrors) {\n      event.preventDefault();\n      onIncompatibleQuery(\n        (onAlertClose: () => void) => (\n          <IncompatibleQueryAlert\n            incompatibleQuery={errors}\n            eventView={eventView}\n            orgId={organization.slug}\n            onClose={onAlertClose}\n          />\n        ),\n        errors\n      );\n      return;\n    }\n\n    onSuccess();\n  };\n\n  return (\n    <CreateAlertButton\n      organization={organization}\n      onClick={handleClick}\n      to={to}\n      aria-label={t('Create Alert')}\n      {...buttonProps}\n    />\n  );\n}\n\ntype Props = {\n  organization: Organization;\n  alertOption?: keyof typeof AlertWizardAlertNames;\n  hideIcon?: boolean;\n  iconProps?: SVGIconProps;\n  /**\n   * Callback when the button is clicked.\n   * This is different from `onClick` which always overrides the default\n   * behavior when the button was clicked.\n   */\n  onEnter?: () => void;\n  projectSlug?: string;\n  referrer?: string;\n  showPermissionGuide?: boolean;\n} & WithRouterProps &\n  ButtonProps;\n\nconst CreateAlertButton = withRouter(\n  ({\n    organization,\n    projectSlug,\n    iconProps,\n    referrer,\n    router,\n    hideIcon,\n    showPermissionGuide,\n    alertOption,\n    onEnter,\n    ...buttonProps\n  }: Props) => {\n    const api = useApi();\n    const createAlertUrl = (providedProj: string) => {\n      const hasAlertWizardV3 = organization.features.includes('alert-wizard-v3');\n      const alertsBaseUrl = hasAlertWizardV3\n        ? `/organizations/${organization.slug}/alerts`\n        : `/organizations/${organization.slug}/alerts/${providedProj}`;\n      const alertsArgs = [\n        `${referrer ? `referrer=${referrer}` : ''}`,\n        `${\n          hasAlertWizardV3 && providedProj && providedProj !== ':projectId'\n            ? `project=${providedProj}`\n            : ''\n        }`,\n        alertOption ? `alert_option=${alertOption}` : '',\n      ].filter(item => item !== '');\n\n      return `${alertsBaseUrl}/wizard/${alertsArgs.length ? '?' : ''}${alertsArgs.join(\n        '&'\n      )}`;\n    };\n\n    function handleClickWithoutProject(event: React.MouseEvent) {\n      event.preventDefault();\n      onEnter?.();\n\n      navigateTo(createAlertUrl(':projectId'), router);\n    }\n\n    async function enableAlertsMemberWrite() {\n      const settingsEndpoint = `/organizations/${organization.slug}/`;\n      addLoadingMessage();\n      try {\n        await api.requestPromise(settingsEndpoint, {\n          method: 'PUT',\n          data: {\n            alertsMemberWrite: true,\n          },\n        });\n        addSuccessMessage(t('Successfully updated organization settings'));\n      } catch (err) {\n        addErrorMessage(t('Unable to update organization settings'));\n      }\n    }\n\n    const permissionTooltipText = tct(\n      'Ask your organization owner or manager to [settingsLink:enable alerts access] for you.',\n      {settingsLink: <Link to={`/settings/${organization.slug}`} />}\n    );\n\n    const renderButton = (hasAccess: boolean) => (\n      <Button\n        disabled={!hasAccess}\n        title={!hasAccess ? permissionTooltipText : undefined}\n        icon={!hideIcon && <IconSiren {...iconProps} />}\n        to={projectSlug ? createAlertUrl(projectSlug) : undefined}\n        tooltipProps={{\n          isHoverable: true,\n          position: 'top',\n          overlayStyle: {\n            maxWidth: '270px',\n          },\n        }}\n        onClick={projectSlug ? onEnter : handleClickWithoutProject}\n        {...buttonProps}\n      >\n        {buttonProps.children ?? t('Create Alert')}\n      </Button>\n    );\n\n    const showGuide = !organization.alertsMemberWrite && !!showPermissionGuide;\n\n    return (\n      <Access organization={organization} access={['alerts:write']}>\n        {({hasAccess}) =>\n          showGuide ? (\n            <Access organization={organization} access={['org:write']}>\n              {({hasAccess: isOrgAdmin}) => (\n                <GuideAnchor\n                  target={isOrgAdmin ? 'alerts_write_owner' : 'alerts_write_member'}\n                  onFinish={isOrgAdmin ? enableAlertsMemberWrite : undefined}\n                >\n                  {renderButton(hasAccess)}\n                </GuideAnchor>\n              )}\n            </Access>\n          ) : (\n            renderButton(hasAccess)\n          )\n        }\n      </Access>\n    );\n  }\n);\n\nexport {CreateAlertFromViewButton};\nexport default CreateAlertButton;\n\nconst StyledAlert = styled(Alert)`\n  color: ${p => p.theme.textColor};\n  margin-bottom: 0;\n`;\n\nconst StyledUnorderedList = styled('ul')`\n  margin-bottom: 0;\n`;\n\nconst StyledCode = styled('code')`\n  background-color: transparent;\n  padding: 0;\n`;\n"],"names":["IncompatibleQueryAlert","incompatibleQuery","eventView","orgId","onClose","hasProjectError","hasEnvironmentError","hasEventTypeError","hasYAxisError","totalErrors","Object","values","filter","val","length","eventTypeError","clone","query","eventTypeTransaction","eventTypeDefault","eventTypeErrorDefault","pathname","eventTypeLinks","error","to","generateQueryStringObject","default","transaction","errorDefault","StyledAlert","type","showIcon","trailingItems","icon","size","t","onClick","borderless","Fragment","tct","yAxis","StyledCode","getYAxis","StyledUnorderedList","CreateAlertFromViewButton","projects","organization","referrer","onIncompatibleQuery","onSuccess","useAlertWizardV3","alertType","buttonProps","project","environment","getQueryDatasource","column","explodeFieldString","kind","eventTypeMatch","match","yAxisConfig","errorFieldConfig","transactionFieldConfig","invalidFunction","aggregations","includes","function","aggregation","AGGREGATIONS","isNumericParameter","parameters","some","param","dataType","allowedParameters","fields","measurementKeys","invalidParameter","incompatibleYAxis","errors","find","p","id","queryParams","slug","replace","hasErrors","x","alertTemplate","AlertWizardRuleTemplates","DEFAULT_WIZARD_TEMPLATE","undefined","createFromDiscover","aggregate","CreateAlertButton","event","preventDefault","onAlertClose","withRouter","projectSlug","iconProps","router","hideIcon","showPermissionGuide","alertOption","onEnter","api","useApi","createAlertUrl","providedProj","hasAlertWizardV3","features","alertsBaseUrl","alertsArgs","item","join","handleClickWithoutProject","navigateTo","async","enableAlertsMemberWrite","settingsEndpoint","addLoadingMessage","requestPromise","method","data","alertsMemberWrite","addSuccessMessage","err","addErrorMessage","permissionTooltipText","settingsLink","renderButton","hasAccess","disabled","title","tooltipProps","isHoverable","position","overlayStyle","maxWidth","children","showGuide","access","isOrgAdmin","target","onFinish","Alert","theme","textColor"],"sourceRoot":""}