{"version":3,"file":"chunks/app_views_settings_organizationAuditLog_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/activity/item/avatar.tsx","webpack:///./app/views/settings/organizationAuditLog/auditLogList.tsx","webpack:///./app/views/settings/organizationAuditLog/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport Placeholder from 'sentry/components/placeholder';\nimport {IconSentry} from 'sentry/icons';\nimport {AvatarUser} from 'sentry/types';\n\ntype Props = {\n  type: 'system' | 'user';\n  className?: string;\n  size?: number;\n  user?: AvatarUser;\n};\n\nfunction ActivityAvatar({className, type, user, size = 38}: Props) {\n  if (user) {\n    return <UserAvatar user={user} size={size} className={className} />;\n  }\n\n  if (type === 'system') {\n    // Return Sentry avatar\n    return (\n      <SystemAvatar className={className} size={size}>\n        <StyledIconSentry size=\"md\" />\n      </SystemAvatar>\n    );\n  }\n\n  return (\n    <Placeholder\n      className={className}\n      width={`${size}px`}\n      height={`${size}px`}\n      shape=\"circle\"\n    />\n  );\n}\n\nexport default ActivityAvatar;\n\ntype SystemAvatarProps = {\n  size: number;\n};\n\nconst SystemAvatar = styled('span')<SystemAvatarProps>`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: ${p => p.size}px;\n  height: ${p => p.size}px;\n  background-color: ${p => p.theme.textColor};\n  color: ${p => p.theme.background};\n  border-radius: 50%;\n`;\n\nconst StyledIconSentry = styled(IconSentry)`\n  padding-bottom: 3px;\n`;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport ActivityAvatar from 'sentry/components/activity/item/avatar';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport DateTime from 'sentry/components/dateTime';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport Pagination, {CursorHandler} from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport Tag from 'sentry/components/tag';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {AuditLog, User} from 'sentry/types';\nimport {shouldUse24Hours} from 'sentry/utils/dates';\nimport SettingsPageHeader from 'sentry/views/settings/components/settingsPageHeader';\n\nconst avatarStyle = {\n  width: 36,\n  height: 36,\n  marginRight: 8,\n};\n\nconst getAvatarDisplay = (logEntryUser: User | undefined) => {\n  // Display Sentry's avatar for system or superuser-initiated events\n  if (\n    logEntryUser?.isSuperuser ||\n    (logEntryUser?.name === 'Sentry' && logEntryUser?.email === undefined)\n  ) {\n    return <SentryAvatar type=\"system\" size={36} />;\n  }\n  // Display user's avatar for non-superusers-initiated events\n  if (logEntryUser !== undefined) {\n    return <UserAvatar style={avatarStyle} user={logEntryUser} />;\n  }\n  return null;\n};\n\nconst addUsernameDisplay = (logEntryUser: User | undefined) => {\n  if (logEntryUser?.isSuperuser) {\n    return (\n      <Name data-test-id=\"actor-name\">\n        {logEntryUser.name}\n        <StaffTag>{t('Sentry Staff')}</StaffTag>\n      </Name>\n    );\n  }\n  if (logEntryUser !== undefined) {\n    return <Name data-test-id=\"actor-name\">{logEntryUser.name}</Name>;\n  }\n  return null;\n};\n\ntype Props = {\n  entries: AuditLog[] | null;\n  eventType: string | undefined;\n  eventTypes: string[] | null;\n  isLoading: boolean;\n  onCursor: CursorHandler | undefined;\n  onEventSelect: (value: string) => void;\n  pageLinks: string | null;\n};\n\nconst AuditLogList = ({\n  isLoading,\n  pageLinks,\n  entries,\n  eventTypes,\n  onCursor,\n  onEventSelect,\n}: Props) => {\n  const is24Hours = shouldUse24Hours();\n  const hasEntries = entries && entries.length > 0;\n  const ipv4Length = 15;\n\n  const eventOptions = eventTypes?.map(type => ({\n    label: type,\n    value: type,\n  }));\n\n  const action = (\n    <EventSelector\n      clearable\n      isDisabled={isLoading}\n      name=\"eventFilter\"\n      placeholder={t('Select Action: ')}\n      options={eventOptions}\n      onChange={options => {\n        onEventSelect(options?.value);\n      }}\n    />\n  );\n\n  return (\n    <div>\n      <SettingsPageHeader title={t('Audit Log')} action={action} />\n      <PanelTable\n        headers={[t('Member'), t('Action'), t('IP'), t('Time')]}\n        isEmpty={!hasEntries && entries?.length === 0}\n        emptyMessage={t('No audit entries available')}\n        isLoading={isLoading}\n      >\n        {entries?.map(entry => (\n          <Fragment key={entry.id}>\n            <UserInfo>\n              <div>{getAvatarDisplay(entry.actor)}</div>\n              <NameContainer>\n                {addUsernameDisplay(entry.actor)}\n                <Note>{entry.note}</Note>\n              </NameContainer>\n            </UserInfo>\n            <FlexCenter>\n              <MonoDetail>{entry.event}</MonoDetail>\n            </FlexCenter>\n            <FlexCenter>\n              {entry.ipAddress && (\n                <IpAddressOverflow>\n                  <Tooltip\n                    title={entry.ipAddress}\n                    disabled={entry.ipAddress.length <= ipv4Length}\n                  >\n                    <MonoDetail>{entry.ipAddress}</MonoDetail>\n                  </Tooltip>\n                </IpAddressOverflow>\n              )}\n            </FlexCenter>\n            <TimestampInfo>\n              <DateTime dateOnly date={entry.dateCreated} />\n              <DateTime\n                timeOnly\n                format={is24Hours ? 'HH:mm zz' : 'LT zz'}\n                date={entry.dateCreated}\n              />\n            </TimestampInfo>\n          </Fragment>\n        ))}\n      </PanelTable>\n      {pageLinks && <Pagination pageLinks={pageLinks} onCursor={onCursor} />}\n    </div>\n  );\n};\n\nconst SentryAvatar = styled(ActivityAvatar)`\n  margin-right: ${space(1)};\n`;\n\nconst Name = styled('strong')`\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nconst StaffTag = styled(Tag)`\n  padding: ${space(1)};\n`;\n\nconst EventSelector = styled(SelectControl)`\n  width: 250px;\n`;\n\nconst UserInfo = styled('div')`\n  display: flex;\n  align-items: center;\n  line-height: 1.2;\n  font-size: ${p => p.theme.fontSizeSmall};\n  min-width: 250px;\n`;\n\nconst NameContainer = styled('div')`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\n\nconst Note = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  word-break: break-word;\n`;\n\nconst FlexCenter = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst IpAddressOverflow = styled('div')`\n  ${p => p.theme.overflowEllipsis};\n  min-width: 90px;\n`;\n\nconst MonoDetail = styled('code')`\n  font-size: ${p => p.theme.fontSizeMedium};\n  white-space: no-wrap;\n`;\n\nconst TimestampInfo = styled('div')`\n  display: grid;\n  grid-template-rows: auto auto;\n  gap: ${space(1)};\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n\nexport default AuditLogList;\n","import {Fragment, useCallback, useEffect, useState} from 'react';\nimport * as Sentry from '@sentry/react';\n\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {CursorHandler} from 'sentry/components/pagination';\nimport {AuditLog, Organization} from 'sentry/types';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport AuditLogList from './auditLogList';\n\ntype Props = {\n  organization: Organization;\n};\n\ntype State = {\n  entryList: AuditLog[] | null;\n  entryListPageLinks: string | null;\n  eventTypes: string[] | null;\n  isLoading: boolean;\n  currentCursor?: string;\n  eventType?: string;\n};\n\nfunction OrganizationAuditLog({organization}: Props) {\n  const [state, setState] = useState<State>({\n    entryList: [],\n    entryListPageLinks: null,\n    eventTypes: [],\n    isLoading: true,\n  });\n\n  const api = useApi();\n\n  const handleCursor: CursorHandler = resultsCursor => {\n    setState(prevState => ({\n      ...prevState,\n      currentCursor: resultsCursor,\n    }));\n  };\n\n  const fetchAuditLogData = useCallback(async () => {\n    try {\n      const payload = {cursor: state.currentCursor, event: state.eventType, version: '2'};\n      if (!payload.cursor) {\n        delete payload.cursor;\n      }\n      if (!payload.event) {\n        delete payload.event;\n      }\n      const [data, _, response] = await api.requestPromise(\n        `/organizations/${organization.slug}/audit-logs/`,\n        {\n          method: 'GET',\n          includeAllArgs: true,\n          query: payload,\n        }\n      );\n      setState(prevState => ({\n        ...prevState,\n        entryList: data.rows,\n        eventTypes: data.options.sort(),\n        isLoading: false,\n        entryListPageLinks: response?.getResponseHeader('Link') ?? null,\n      }));\n    } catch (err) {\n      if (err.status !== 401 && err.status !== 403) {\n        Sentry.captureException(err);\n      }\n      setState(prevState => ({\n        ...prevState,\n        isLoading: false,\n      }));\n      addErrorMessage('Unable to load audit logs.');\n    }\n  }, [api, organization.slug, state.currentCursor, state.eventType]);\n\n  useEffect(() => {\n    fetchAuditLogData();\n  }, [fetchAuditLogData]);\n\n  const handleEventSelect = (value: string | undefined) => {\n    setState(prevState => ({\n      ...prevState,\n      eventType: value,\n    }));\n  };\n\n  return (\n    <Fragment>\n      <AuditLogList\n        entries={state.entryList}\n        pageLinks={state.entryListPageLinks}\n        eventType={state.eventType}\n        eventTypes={state.eventTypes}\n        onEventSelect={handleEventSelect}\n        isLoading={state.isLoading}\n        onCursor={handleCursor}\n      />\n    </Fragment>\n  );\n}\n\nexport default withOrganization(OrganizationAuditLog);\n"],"names":["ActivityAvatar","className","type","user","size","SystemAvatar","StyledIconSentry","width","height","shape","p","theme","textColor","background","IconSentry","avatarStyle","marginRight","addUsernameDisplay","logEntryUser","isSuperuser","Name","name","StaffTag","t","undefined","AuditLogList","isLoading","pageLinks","entries","eventTypes","onCursor","onEventSelect","is24Hours","shouldUse24Hours","hasEntries","length","eventOptions","map","label","value","action","EventSelector","clearable","isDisabled","placeholder","options","onChange","title","headers","isEmpty","emptyMessage","entry","Fragment","UserInfo","actor","email","SentryAvatar","style","NameContainer","Note","note","FlexCenter","MonoDetail","event","ipAddress","IpAddressOverflow","disabled","TimestampInfo","dateOnly","date","dateCreated","timeOnly","format","id","space","fontSizeMedium","Tag","SelectControl","fontSizeSmall","overflowEllipsis","OrganizationAuditLog","organization","state","setState","useState","entryList","entryListPageLinks","api","useApi","fetchAuditLogData","useCallback","async","payload","cursor","currentCursor","eventType","version","data","_","response","requestPromise","slug","method","includeAllArgs","query","prevState","rows","sort","getResponseHeader","err","status","Sentry","addErrorMessage","useEffect","resultsCursor","withOrganization"],"sourceRoot":""}