{"version":3,"file":"chunks/app_components_banner_tsx-app_components_charts_eventsGeoRequest_tsx-app_components_charts_ev-0db56c.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/banner.tsx","webpack:///./app/components/charts/eventsGeoRequest.tsx","webpack:///./app/components/charts/eventsRequest.tsx"],"sourcesContent":["import {useState} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport Button from 'sentry/components/button';\nimport ButtonBar from 'sentry/components/buttonBar';\nimport {IconClose} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\nconst makeKey = (prefix: string) => `${prefix}-banner-dismissed`;\n\nfunction dismissBanner(bannerKey: string) {\n  localStorage.setItem(makeKey(bannerKey), 'true');\n}\n\nfunction useDismissable(bannerKey: string) {\n  const key = makeKey(bannerKey);\n  const [value, setValue] = useState(localStorage.getItem(key));\n\n  const dismiss = () => {\n    setValue('true');\n    dismissBanner(bannerKey);\n  };\n\n  return [value === 'true', dismiss] as const;\n}\n\ntype BannerWrapperProps = {\n  backgroundComponent?: React.ReactNode;\n  backgroundImg?: string;\n};\n\ntype Props = BannerWrapperProps & {\n  className?: string;\n  dismissKey?: string;\n  isDismissable?: boolean;\n  subtitle?: string;\n  title?: string;\n};\n\ntype BannerType = React.FC<Props> & {\n  /**\n   * Helper function to hide banners outside of their usage\n   */\n  dismiss: typeof dismissBanner;\n};\n\nconst Banner: BannerType = ({\n  title,\n  subtitle,\n  isDismissable = true,\n  dismissKey = 'generic-banner',\n  className,\n  backgroundImg,\n  backgroundComponent,\n  children,\n}) => {\n  const [dismissed, dismiss] = useDismissable(dismissKey);\n\n  if (dismissed) {\n    return null;\n  }\n\n  return (\n    <BannerWrapper backgroundImg={backgroundImg} className={className}>\n      {backgroundComponent}\n      {isDismissable ? <CloseButton onClick={dismiss} aria-label={t('Close')} /> : null}\n      <BannerContent>\n        <BannerTitle>{title}</BannerTitle>\n        <BannerSubtitle>{subtitle}</BannerSubtitle>\n        <StyledButtonBar gap={1}>{children}</StyledButtonBar>\n      </BannerContent>\n    </BannerWrapper>\n  );\n};\n\nBanner.dismiss = dismissBanner;\n\nconst BannerWrapper = styled('div')<BannerWrapperProps>`\n  ${p =>\n    p.backgroundImg\n      ? css`\n          background: url(${p.backgroundImg});\n          background-repeat: no-repeat;\n          background-size: cover;\n          background-position: center center;\n        `\n      : css`\n          background-color: ${p.theme.gray500};\n        `}\n  display: flex;\n  overflow: hidden;\n  align-items: center;\n  justify-content: center;\n  position: relative;\n  margin-bottom: ${space(2)};\n  box-shadow: ${p => p.theme.dropShadowLight};\n  border-radius: ${p => p.theme.borderRadius};\n  height: 180px;\n  color: ${p => p.theme.white};\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    height: 220px;\n  }\n`;\n\nconst BannerContent = styled('div')`\n  position: absolute;\n  display: grid;\n  justify-items: center;\n  grid-template-rows: repeat(3, max-content);\n  text-align: center;\n  padding: ${space(4)};\n`;\n\nconst BannerTitle = styled('h1')`\n  margin: 0;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    font-size: 40px;\n  }\n`;\n\nconst BannerSubtitle = styled('div')`\n  margin: 0;\n\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    font-size: ${p => p.theme.fontSizeExtraLarge};\n  }\n`;\n\nconst StyledButtonBar = styled(ButtonBar)`\n  margin-top: ${space(2)};\n  width: fit-content;\n`;\n\nconst CloseButton = styled(Button)`\n  position: absolute;\n  display: block;\n  top: ${space(2)};\n  right: ${space(2)};\n  color: ${p => p.theme.white};\n  cursor: pointer;\n  z-index: 1;\n`;\n\nCloseButton.defaultProps = {\n  icon: <IconClose />,\n  ['aria-label']: t('Close'),\n  priority: 'link',\n  borderless: true,\n  size: 'xs',\n};\n\nexport default Banner;\n","import {useEffect, useState} from 'react';\n\nimport {Client} from 'sentry/api';\nimport {DateString, OrganizationSummary} from 'sentry/types';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {TableData, TableDataWithTitle} from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {doDiscoverQuery} from 'sentry/utils/discover/genericDiscoverQuery';\n\ninterface ChildrenRenderProps {\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  tableData?: TableDataWithTitle[];\n}\n\nexport interface EventsGeoRequestProps {\n  api: Client;\n  children: (props: ChildrenRenderProps) => React.ReactElement;\n  end: DateString;\n  environments: string[];\n  organization: OrganizationSummary;\n  projects: number[];\n  query: string;\n  start: DateString;\n  yAxis: string | string[];\n  orderby?: string;\n  period?: string | null;\n  referrer?: string;\n}\n\nconst EventsGeoRequest = ({\n  api,\n  organization,\n  yAxis,\n  query,\n  orderby,\n  projects,\n  period,\n  start,\n  end,\n  environments,\n  referrer,\n  children,\n}: EventsGeoRequestProps) => {\n  const eventView = EventView.fromSavedQuery({\n    id: undefined,\n    name: '',\n    version: 2,\n    fields: Array.isArray(yAxis) ? yAxis : [yAxis],\n    query,\n    orderby: orderby ?? '',\n    projects,\n    range: period ?? '',\n    start: start ? getUtcDateString(start) : undefined,\n    end: end ? getUtcDateString(end) : undefined,\n    environment: environments,\n  });\n  const [results, setResults] = useState(undefined as ChildrenRenderProps['tableData']);\n  const [reloading, setReloading] = useState(false);\n  const [errored, setErrored] = useState(false);\n\n  useEffect(() => {\n    let mounted = true;\n    setErrored(false);\n\n    if (results) {\n      setReloading(true);\n    }\n\n    doDiscoverQuery<TableData>(api, `/organizations/${organization.slug}/events-geo/`, {\n      ...eventView.generateQueryStringObject(),\n      referrer,\n    })\n      .then(discoverQueryResults => {\n        if (mounted) {\n          setResults([discoverQueryResults[0]] as TableDataWithTitle[]);\n          setReloading(false);\n        }\n      })\n      .catch(() => {\n        if (mounted) {\n          setErrored(true);\n          setReloading(false);\n        }\n      });\n\n    return () => {\n      // Prevent setState leaking on unmounted component\n      mounted = false;\n    };\n  }, [query, yAxis, start, end, period, environments, projects]);\n\n  return children({\n    errored,\n    loading: !results && !errored,\n    reloading,\n    tableData: results,\n  });\n};\n\nexport default EventsGeoRequest;\n","import {PureComponent} from 'react';\nimport isEqual from 'lodash/isEqual';\nimport omitBy from 'lodash/omitBy';\n\nimport {doEventsRequest} from 'sentry/actionCreators/events';\nimport {addErrorMessage} from 'sentry/actionCreators/indicator';\nimport {Client} from 'sentry/api';\nimport LoadingPanel from 'sentry/components/charts/loadingPanel';\nimport {\n  canIncludePreviousPeriod,\n  getPreviousSeriesName,\n  isMultiSeriesStats,\n} from 'sentry/components/charts/utils';\nimport {t} from 'sentry/locale';\nimport {\n  DateString,\n  EventsStats,\n  EventsStatsData,\n  MultiSeriesEventsStats,\n  OrganizationSummary,\n} from 'sentry/types';\nimport {Series, SeriesDataUnit} from 'sentry/types/echarts';\nimport {defined} from 'sentry/utils';\nimport {stripEquationPrefix} from 'sentry/utils/discover/fields';\nimport {QueryBatching} from 'sentry/utils/performance/contexts/genericQueryBatcher';\n\nexport type TimeSeriesData = {\n  allTimeseriesData?: EventsStatsData;\n  comparisonTimeseriesData?: Series[];\n  originalPreviousTimeseriesData?: EventsStatsData | null;\n  originalTimeseriesData?: EventsStatsData;\n  previousTimeseriesData?: Series[] | null;\n  timeAggregatedData?: Series | {};\n  timeframe?: {end: number; start: number};\n  // timeseries data\n  timeseriesData?: Series[];\n  timeseriesTotals?: {count: number};\n};\n\ntype LoadingStatus = {\n  /**\n   * Whether there was an error retrieving data\n   */\n  errored: boolean;\n  loading: boolean;\n  reloading: boolean;\n  errorMessage?: string;\n};\n\n// Can hold additional data from the root an events stat object (eg. start, end, order, isMetricsData).\ninterface AdditionalSeriesInfo {\n  isMetricsData?: boolean;\n}\n\nexport type RenderProps = LoadingStatus &\n  TimeSeriesData & {\n    results?: Series[]; // Chart with multiple series.\n    seriesAdditionalInfo?: Record<string, AdditionalSeriesInfo>;\n  };\n\ntype DefaultProps = {\n  /**\n   * Include data for previous period\n   */\n  includePrevious: boolean;\n  /**\n   * Transform the response data to be something ingestible by charts\n   */\n  includeTransformedData: boolean;\n  /**\n   * Interval to group results in\n   *\n   * e.g. 1d, 1h, 1m, 1s\n   */\n  interval: string;\n  /**\n   * number of rows to return\n   */\n  limit: number;\n  /**\n   * The query string to search events by\n   */\n  query: string;\n  /**\n   * Time delta for comparing intervals of alert metrics, in seconds\n   */\n  comparisonDelta?: number;\n  /**\n   * Absolute end date for query\n   */\n  end?: DateString;\n  /**\n   * Relative time period for query.\n   *\n   * Use `start` and `end` for absolute dates.\n   *\n   * e.g. 24h, 7d, 30d\n   */\n  period?: string | null;\n  /**\n   * Absolute start date for query\n   */\n  start?: DateString;\n};\n\ntype EventsRequestPartialProps = {\n  /**\n   * API client instance\n   */\n  api: Client;\n  children: (renderProps: RenderProps) => React.ReactNode;\n  organization: OrganizationSummary;\n  /**\n   * Whether or not to include the last partial bucket. This happens for example when the\n   * current time is 11:26 and the last bucket ranges from 11:25-11:30. This means that\n   * the last bucket contains 1 minute worth of data while the rest contains 5 minutes.\n   *\n   * This flag indicates whether or not this last bucket should be included in the result.\n   */\n  partial: boolean;\n  /**\n   * Discover needs confirmation to run >30 day >10 project queries,\n   * optional and when not passed confirmation is not required.\n   */\n  confirmedQuery?: boolean;\n  /**\n   * Name used for display current series dataset tooltip\n   */\n  currentSeriesNames?: string[];\n  /**\n   * List of environments to query\n   */\n  environment?: Readonly<string[]>;\n  /**\n   * Is query out of retention\n   */\n  expired?: boolean;\n  /**\n   * List of fields to group with when doing a topEvents request.\n   */\n  field?: string[];\n  /**\n   * Allows overriding the pathname.\n   */\n  generatePathname?: (org: OrganizationSummary) => string;\n  /**\n   * Hide error toast (used for pages which also query eventsV2). Stops error appearing as a toast.\n   */\n  hideError?: boolean;\n  /**\n   * Initial loading state\n   */\n  loading?: boolean;\n  /**\n   * Query name used for displaying error toast if it is out of retention\n   */\n  name?: string;\n  /**\n   * A way to control error if error handling is not owned by the toast.\n   */\n  onError?: (error: string) => void;\n  /**\n   * How to order results when getting top events.\n   */\n  orderby?: string;\n  previousSeriesNames?: string[];\n  /**\n   * List of project ids to query\n   */\n  project?: Readonly<number[]>;\n  /**\n   * A container for query batching data and functions.\n   */\n  queryBatching?: QueryBatching;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * A unique name for what's triggering this request, see organization_events_stats for an allowlist\n   */\n  referrer?: string;\n  /**\n   * Should loading be shown.\n   */\n  showLoading?: boolean;\n  /**\n   * List of team ids to query\n   */\n  team?: Readonly<string | string[]>;\n  /**\n   * The number of top results to get. When set a multi-series result will be returned\n   * in the `results` child render function.\n   */\n  topEvents?: number;\n  /**\n   * Whether or not to zerofill results\n   */\n  withoutZerofill?: boolean;\n  /**\n   * The yAxis being plotted. If multiple yAxis are requested,\n   * the child render function will be called with `results`\n   */\n  yAxis?: string | string[];\n};\n\ntype TimeAggregationProps =\n  | {includeTimeAggregation: true; timeAggregationSeriesName: string}\n  | {includeTimeAggregation?: false; timeAggregationSeriesName?: undefined};\n\nexport type EventsRequestProps = DefaultProps &\n  TimeAggregationProps &\n  EventsRequestPartialProps;\n\ntype EventsRequestState = {\n  errored: boolean;\n  fetchedWithPrevious: boolean;\n  reloading: boolean;\n  timeseriesData: null | EventsStats | MultiSeriesEventsStats;\n  errorMessage?: string;\n};\n\nconst propNamesToIgnore = [\n  'api',\n  'children',\n  'organization',\n  'loading',\n  'queryBatching',\n  'generatePathname',\n];\nconst omitIgnoredProps = (props: EventsRequestProps) =>\n  omitBy(props, (_value, key) => propNamesToIgnore.includes(key));\n\nclass EventsRequest extends PureComponent<EventsRequestProps, EventsRequestState> {\n  static defaultProps: DefaultProps = {\n    period: undefined,\n    start: null,\n    end: null,\n    interval: '1d',\n    comparisonDelta: undefined,\n    limit: 15,\n    query: '',\n    includePrevious: true,\n    includeTransformedData: true,\n  };\n\n  state: EventsRequestState = {\n    reloading: !!this.props.loading,\n    errored: false,\n    timeseriesData: null,\n    fetchedWithPrevious: false,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: EventsRequestProps) {\n    if (isEqual(omitIgnoredProps(prevProps), omitIgnoredProps(this.props))) {\n      return;\n    }\n    this.fetchData();\n  }\n\n  componentWillUnmount() {\n    this.unmounting = true;\n  }\n\n  private unmounting: boolean = false;\n\n  fetchData = async () => {\n    const {api, confirmedQuery, onError, expired, name, hideError, ...props} = this.props;\n    let timeseriesData: EventsStats | MultiSeriesEventsStats | null = null;\n\n    if (confirmedQuery === false) {\n      return;\n    }\n\n    this.setState(state => ({\n      reloading: state.timeseriesData !== null,\n      errored: false,\n      errorMessage: undefined,\n    }));\n\n    let errorMessage;\n    if (expired) {\n      errorMessage = t(\n        '%s has an invalid date range. Please try a more recent date range.',\n        name\n      );\n      addErrorMessage(errorMessage, {append: true});\n\n      this.setState({\n        errored: true,\n        errorMessage,\n      });\n    } else {\n      try {\n        api.clear();\n        timeseriesData = await doEventsRequest(api, props);\n      } catch (resp) {\n        if (resp && resp.responseJSON && resp.responseJSON.detail) {\n          errorMessage = resp.responseJSON.detail;\n        } else {\n          errorMessage = t('Error loading chart data');\n        }\n        if (!hideError) {\n          addErrorMessage(errorMessage);\n        }\n        if (onError) {\n          onError(errorMessage);\n        }\n        this.setState({\n          errored: true,\n          errorMessage,\n        });\n      }\n    }\n\n    if (this.unmounting) {\n      return;\n    }\n\n    this.setState({\n      reloading: false,\n      timeseriesData,\n      fetchedWithPrevious: props.includePrevious,\n    });\n  };\n\n  /**\n   * Retrieves dataset for the current period (since data can potentially\n   * contain previous period's data), as well as the previous period if\n   * possible.\n   *\n   * Returns `null` if data does not exist\n   */\n  getData = (\n    data: EventsStatsData\n  ): {current: EventsStatsData; previous: EventsStatsData | null} => {\n    const {fetchedWithPrevious} = this.state;\n    const {period, includePrevious} = this.props;\n\n    const hasPreviousPeriod =\n      fetchedWithPrevious || canIncludePreviousPeriod(includePrevious, period);\n    // Take the floor just in case, but data should always be divisible by 2\n    const dataMiddleIndex = Math.floor(data.length / 2);\n    return {\n      current: hasPreviousPeriod ? data.slice(dataMiddleIndex) : data,\n      previous: hasPreviousPeriod ? data.slice(0, dataMiddleIndex) : null,\n    };\n  };\n\n  // This aggregates all values per `timestamp`\n  calculateTotalsPerTimestamp(\n    data: EventsStatsData,\n    getName: (\n      timestamp: number,\n      countArray: {count: number}[],\n      i: number\n    ) => number = timestamp => timestamp * 1000\n  ): SeriesDataUnit[] {\n    return data.map(([timestamp, countArray], i) => ({\n      name: getName(timestamp, countArray, i),\n      value: countArray.reduce((acc, {count}) => acc + count, 0),\n    }));\n  }\n\n  /**\n   * Get previous period data, but transform timestamps so that data fits unto\n   * the current period's data axis\n   */\n  transformPreviousPeriodData(\n    current: EventsStatsData,\n    previous: EventsStatsData | null,\n    seriesName?: string\n  ): Series | null {\n    // Need the current period data array so we can take the timestamp\n    // so we can be sure the data lines up\n    if (!previous) {\n      return null;\n    }\n\n    return {\n      seriesName: seriesName ?? 'Previous',\n      data: this.calculateTotalsPerTimestamp(\n        previous,\n        (_timestamp, _countArray, i) => current[i][0] * 1000\n      ),\n      stack: 'previous',\n    };\n  }\n\n  /**\n   * Aggregate all counts for each time stamp\n   */\n  transformAggregatedTimeseries(data: EventsStatsData, seriesName: string = ''): Series {\n    return {\n      seriesName,\n      data: this.calculateTotalsPerTimestamp(data),\n    };\n  }\n\n  /**\n   * Transforms query response into timeseries data to be used in a chart\n   */\n  transformTimeseriesData(data: EventsStatsData, seriesName?: string): Series[] {\n    return [\n      {\n        seriesName: seriesName || 'Current',\n        data: data.map(([timestamp, countsForTimestamp]) => ({\n          name: timestamp * 1000,\n          value: countsForTimestamp.reduce((acc, {count}) => acc + count, 0),\n        })),\n      },\n    ];\n  }\n\n  /**\n   * Transforms comparisonCount in query response into timeseries data to be used in a comparison chart for change alerts\n   */\n  transformComparisonTimeseriesData(data: EventsStatsData): Series[] {\n    return [\n      {\n        seriesName: 'comparisonCount()',\n        data: data.map(([timestamp, countsForTimestamp]) => ({\n          name: timestamp * 1000,\n          value: countsForTimestamp.reduce(\n            (acc, {comparisonCount}) => acc + (comparisonCount ?? 0),\n            0\n          ),\n        })),\n      },\n    ];\n  }\n\n  processData(response: EventsStats, seriesIndex: number = 0, seriesName?: string) {\n    const {data, isMetricsData, totals} = response;\n    const {\n      includeTransformedData,\n      includeTimeAggregation,\n      timeAggregationSeriesName,\n      currentSeriesNames,\n      previousSeriesNames,\n      comparisonDelta,\n    } = this.props;\n    const {current, previous} = this.getData(data);\n    const transformedData = includeTransformedData\n      ? this.transformTimeseriesData(\n          current,\n          seriesName ?? currentSeriesNames?.[seriesIndex]\n        )\n      : [];\n    const transformedComparisonData =\n      includeTransformedData && comparisonDelta\n        ? this.transformComparisonTimeseriesData(current)\n        : [];\n    const previousData = includeTransformedData\n      ? this.transformPreviousPeriodData(\n          current,\n          previous,\n          (seriesName ? getPreviousSeriesName(seriesName) : undefined) ??\n            previousSeriesNames?.[seriesIndex]\n        )\n      : null;\n    const timeAggregatedData = includeTimeAggregation\n      ? this.transformAggregatedTimeseries(current, timeAggregationSeriesName || '')\n      : {};\n    const timeframe =\n      response.start && response.end\n        ? !previous\n          ? {\n              start: response.start * 1000,\n              end: response.end * 1000,\n            }\n          : {\n              // Find the midpoint of start & end since previous includes 2x data\n              start: (response.start + response.end) * 500,\n              end: response.end * 1000,\n            }\n        : undefined;\n    return {\n      data: transformedData,\n      comparisonData: transformedComparisonData,\n      allData: data,\n      originalData: current,\n      totals,\n      isMetricsData,\n      originalPreviousData: previous,\n      previousData,\n      timeAggregatedData,\n      timeframe,\n    };\n  }\n\n  render() {\n    const {children, showLoading, ...props} = this.props;\n    const {topEvents} = this.props;\n    const {timeseriesData, reloading, errored, errorMessage} = this.state;\n    // Is \"loading\" if data is null\n    const loading = this.props.loading || timeseriesData === null;\n\n    if (showLoading && loading) {\n      return <LoadingPanel data-test-id=\"events-request-loading\" />;\n    }\n    if (isMultiSeriesStats(timeseriesData, defined(topEvents))) {\n      // Convert multi-series results into chartable series. Multi series results\n      // are created when multiple yAxis are used or a topEvents request is made.\n      // Convert the timeseries data into a multi-series result set.\n      // As the server will have replied with a map like:\n      // {[titleString: string]: EventsStats}\n      let timeframe: {end: number; start: number} | undefined = undefined;\n      const seriesAdditionalInfo: Record<string, AdditionalSeriesInfo> = {};\n      const sortedTimeseriesData = Object.keys(timeseriesData)\n        .map(\n          (\n            seriesName: string,\n            index: number\n          ): [number, Series, Series | null, AdditionalSeriesInfo] => {\n            const seriesData: EventsStats = timeseriesData[seriesName];\n            const processedData = this.processData(\n              seriesData,\n              index,\n              stripEquationPrefix(seriesName)\n            );\n            if (!timeframe) {\n              timeframe = processedData.timeframe;\n            }\n            if (processedData.isMetricsData) {\n              seriesAdditionalInfo[seriesName] = {\n                isMetricsData: processedData.isMetricsData,\n              };\n            }\n            return [\n              seriesData.order || 0,\n              processedData.data[0],\n              processedData.previousData,\n              {isMetricsData: processedData.isMetricsData},\n            ];\n          }\n        )\n        .sort((a, b) => a[0] - b[0]);\n      const results: Series[] = sortedTimeseriesData.map(item => {\n        return item[1];\n      });\n      const previousTimeseriesData: Series[] | undefined = sortedTimeseriesData.some(\n        item => item[2] === null\n      )\n        ? undefined\n        : sortedTimeseriesData.map(item => {\n            return item[2] as Series;\n          });\n\n      return children({\n        loading,\n        reloading,\n        errored,\n        errorMessage,\n        results,\n        timeframe,\n        previousTimeseriesData,\n        seriesAdditionalInfo,\n        // sometimes we want to reference props that were given to EventsRequest\n        ...props,\n      });\n    }\n    if (timeseriesData) {\n      const {\n        data: transformedTimeseriesData,\n        comparisonData: transformedComparisonTimeseriesData,\n        allData: allTimeseriesData,\n        originalData: originalTimeseriesData,\n        totals: timeseriesTotals,\n        originalPreviousData: originalPreviousTimeseriesData,\n        previousData: previousTimeseriesData,\n        timeAggregatedData,\n        timeframe,\n        isMetricsData,\n      } = this.processData(timeseriesData);\n\n      const seriesAdditionalInfo = {\n        [this.props.currentSeriesNames?.[0] ?? 'current']: {isMetricsData},\n      };\n\n      return children({\n        loading,\n        reloading,\n        errored,\n        errorMessage,\n        // meta data,\n        seriesAdditionalInfo,\n        // timeseries data\n        timeseriesData: transformedTimeseriesData,\n        comparisonTimeseriesData: transformedComparisonTimeseriesData,\n        allTimeseriesData,\n        originalTimeseriesData,\n        timeseriesTotals,\n        originalPreviousTimeseriesData,\n        previousTimeseriesData: previousTimeseriesData\n          ? [previousTimeseriesData]\n          : previousTimeseriesData,\n        timeAggregatedData,\n        timeframe,\n        // sometimes we want to reference props that were given to EventsRequest\n        ...props,\n      });\n    }\n    return children({\n      loading,\n      reloading,\n      errored,\n      errorMessage,\n      ...props,\n    });\n  }\n}\nexport default EventsRequest;\n"],"names":["makeKey","prefix","dismissBanner","bannerKey","localStorage","setItem","Banner","title","subtitle","isDismissable","dismissKey","className","backgroundImg","backgroundComponent","children","dismissed","dismiss","key","value","setValue","useState","getItem","useDismissable","BannerWrapper","CloseButton","onClick","t","BannerContent","BannerTitle","BannerSubtitle","StyledButtonBar","gap","p","css","theme","gray500","space","dropShadowLight","borderRadius","white","breakpoints","small","fontSizeExtraLarge","ButtonBar","Button","defaultProps","icon","priority","borderless","size","api","organization","yAxis","query","orderby","projects","period","start","end","environments","referrer","eventView","EventView","id","undefined","name","version","fields","Array","isArray","range","getUtcDateString","environment","results","setResults","reloading","setReloading","errored","setErrored","useEffect","mounted","doDiscoverQuery","slug","generateQueryStringObject","then","discoverQueryResults","catch","loading","tableData","propNamesToIgnore","omitIgnoredProps","props","omitBy","_value","includes","EventsRequest","PureComponent","this","timeseriesData","fetchedWithPrevious","async","confirmedQuery","onError","expired","hideError","errorMessage","setState","state","addErrorMessage","append","clear","doEventsRequest","resp","responseJSON","detail","unmounting","includePrevious","data","hasPreviousPeriod","canIncludePreviousPeriod","dataMiddleIndex","Math","floor","length","current","slice","previous","componentDidMount","fetchData","componentDidUpdate","prevProps","isEqual","componentWillUnmount","calculateTotalsPerTimestamp","getName","timestamp","map","i","countArray","reduce","acc","count","transformPreviousPeriodData","seriesName","_timestamp","_countArray","stack","transformAggregatedTimeseries","transformTimeseriesData","countsForTimestamp","transformComparisonTimeseriesData","comparisonCount","processData","response","seriesIndex","isMetricsData","totals","includeTransformedData","includeTimeAggregation","timeAggregationSeriesName","currentSeriesNames","previousSeriesNames","comparisonDelta","getData","comparisonData","allData","originalData","originalPreviousData","previousData","getPreviousSeriesName","timeAggregatedData","timeframe","render","showLoading","topEvents","isMultiSeriesStats","defined","seriesAdditionalInfo","sortedTimeseriesData","Object","keys","index","seriesData","processedData","stripEquationPrefix","order","sort","a","b","item","previousTimeseriesData","some","transformedTimeseriesData","transformedComparisonTimeseriesData","allTimeseriesData","originalTimeseriesData","timeseriesTotals","originalPreviousTimeseriesData","comparisonTimeseriesData","interval","limit"],"sourceRoot":""}