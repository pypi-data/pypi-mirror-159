{"version":3,"file":"chunks/app_views_alerts_rules_metric_constants_tsx-app_views_alerts_wizard_options_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/charts.tsx","webpack:///./app/views/alerts/rules/metric/constants.tsx","webpack:///./app/views/alerts/rules/metric/types.tsx","webpack:///./app/views/alerts/types.tsx","webpack:///./app/views/alerts/utils/index.tsx","webpack:///./app/views/alerts/wizard/options.tsx"],"sourcesContent":["import {t} from 'sentry/locale';\nimport {defined} from 'sentry/utils';\nimport {aggregateOutputType} from 'sentry/utils/discover/fields';\nimport {\n  DAY,\n  formatAbbreviatedNumber,\n  formatPercentage,\n  getDuration,\n  HOUR,\n  MINUTE,\n  SECOND,\n  WEEK,\n} from 'sentry/utils/formatters';\n\n/**\n * Formatter for chart tooltips that handle a variety of discover and metrics result values.\n * If the result is metric values, the value can be of type number or null\n */\nexport function tooltipFormatter(value: number | null, seriesName: string = ''): string {\n  if (!defined(value)) {\n    return '\\u2014';\n  }\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 2);\n    case 'duration':\n      return getDuration(value / 1000, 2, true);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Formatter for chart axis labels that handle a variety of discover result values\n * This function is *very similar* to tooltipFormatter but outputs data with less precision.\n */\nexport function axisLabelFormatter(\n  value: number,\n  seriesName: string,\n  abbreviation: boolean = false\n): string {\n  switch (aggregateOutputType(seriesName)) {\n    case 'integer':\n    case 'number':\n      return abbreviation ? formatAbbreviatedNumber(value) : value.toLocaleString();\n    case 'percentage':\n      return formatPercentage(value, 0);\n    case 'duration':\n      return axisDuration(value);\n    default:\n      return value.toString();\n  }\n}\n\n/**\n * Specialized duration formatting for axis labels.\n * In that context we are ok sacrificing accuracy for more\n * consistent sizing.\n *\n * @param value Number of milliseconds to format.\n */\nexport function axisDuration(value: number): string {\n  if (value === 0) {\n    return '0';\n  }\n  if (value >= WEEK) {\n    const label = (value / WEEK).toFixed(0);\n    return t('%swk', label);\n  }\n  if (value >= DAY) {\n    const label = (value / DAY).toFixed(0);\n    return t('%sd', label);\n  }\n  if (value >= HOUR) {\n    const label = (value / HOUR).toFixed(0);\n    return t('%shr', label);\n  }\n  if (value >= MINUTE) {\n    const label = (value / MINUTE).toFixed(0);\n    return t('%smin', label);\n  }\n  if (value >= SECOND) {\n    const label = (value / SECOND).toFixed(0);\n    return t('%ss', label);\n  }\n  const label = value.toFixed(0);\n  return t('%sms', label);\n}\n","import {t} from 'sentry/locale';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {AggregationKey, LooseFieldKey} from 'sentry/utils/discover/fields';\nimport {WEB_VITAL_DETAILS} from 'sentry/utils/performance/vitals/constants';\nimport {\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  Dataset,\n  Datasource,\n  EventTypes,\n  TimeWindow,\n  Trigger,\n  UnsavedMetricRule,\n} from 'sentry/views/alerts/rules/metric/types';\nimport {\n  DATA_SOURCE_TO_SET_AND_EVENT_TYPES,\n  getQueryDatasource,\n  isSessionAggregate,\n} from 'sentry/views/alerts/utils';\nimport {AlertType, WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\n\nexport const DEFAULT_COUNT_TIME_WINDOW = 1; // 1min\nexport const DEFAULT_CHANGE_TIME_WINDOW = 60; // 1h\nexport const DEFAULT_CHANGE_COMP_DELTA = 10080; // 1w\n\nexport const DEFAULT_AGGREGATE = 'count()';\nexport const DEFAULT_TRANSACTION_AGGREGATE = 'p95(transaction.duration)';\n\nexport const DATASET_EVENT_TYPE_FILTERS = {\n  [Dataset.ERRORS]: 'event.type:error',\n  [Dataset.TRANSACTIONS]: 'event.type:transaction',\n} as const;\n\nexport const DATASOURCE_EVENT_TYPE_FILTERS = {\n  [Datasource.ERROR_DEFAULT]: 'event.type:[error, default]',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n} as const;\n\nexport type OptionConfig = {\n  aggregations: AggregationKey[];\n  fields: LooseFieldKey[];\n  measurementKeys?: string[];\n};\n\n/**\n * Allowed error aggregations for alerts\n */\nexport const errorFieldConfig: OptionConfig = {\n  aggregations: ['count', 'count_unique'],\n  fields: ['user'],\n};\n\nconst commonAggregations: AggregationKey[] = [\n  'avg',\n  'percentile',\n  'p50',\n  'p75',\n  'p95',\n  'p99',\n  'p100',\n];\n\nconst allAggregations: AggregationKey[] = [\n  ...commonAggregations,\n  'failure_rate',\n  'apdex',\n  'count',\n];\n\nexport const DuplicateMetricFields: string[] = [\n  'dataset',\n  'eventTypes',\n  'aggregate',\n  'query',\n  'timeWindow',\n  'thresholdPeriod',\n  'projects',\n  'environment',\n  'resolveThreshold',\n  'thresholdType',\n  'owner',\n  'name',\n  'projectId',\n  'comparisonDelta',\n];\n\nexport const DuplicateTriggerFields: string[] = ['alertThreshold', 'label'];\n\nexport const DuplicateActionFields: string[] = [\n  'type',\n  'targetType',\n  'targetIdentifier',\n  'inputChannelId',\n  'options',\n];\n\nexport const COMPARISON_DELTA_OPTIONS = [\n  {value: 5, label: t('same time 5 minutes ago')}, // 5 minutes\n  {value: 15, label: t('same time 15 minutes ago')}, // 15 minutes\n  {value: 60, label: t('same time one hour ago')}, // one hour\n  {value: 1440, label: t('same time one day ago')}, // one day\n  {value: 10080, label: t('same time one week ago')}, // one week\n  {value: 43200, label: t('same time one month ago')}, // 30 days\n];\n\nexport function getWizardAlertFieldConfig(\n  alertType: AlertType,\n  dataset: Dataset\n): OptionConfig {\n  if (alertType === 'custom' && dataset === Dataset.ERRORS) {\n    return errorFieldConfig;\n  }\n  // If user selected apdex we must include that in the OptionConfig as it has a user specified column\n  const aggregations =\n    alertType === 'apdex' || alertType === 'custom'\n      ? allAggregations\n      : commonAggregations;\n  return {\n    aggregations,\n    fields: ['transaction.duration'],\n    measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n  };\n}\n\n/**\n * Allowed transaction aggregations for alerts\n */\nexport const transactionFieldConfig: OptionConfig = {\n  aggregations: allAggregations,\n  fields: ['transaction.duration'],\n  measurementKeys: Object.keys(WEB_VITAL_DETAILS),\n};\n\nexport function createDefaultTrigger(label: AlertRuleTriggerType): Trigger {\n  return {\n    label,\n    alertThreshold: '',\n    actions: [],\n  };\n}\n\nexport function createDefaultRule(\n  defaultRuleOptions: Partial<UnsavedMetricRule> = {}\n): UnsavedMetricRule {\n  return {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n    aggregate: DEFAULT_AGGREGATE,\n    query: '',\n    timeWindow: 60,\n    thresholdPeriod: 1,\n    triggers: [\n      createDefaultTrigger(AlertRuleTriggerType.CRITICAL),\n      createDefaultTrigger(AlertRuleTriggerType.WARNING),\n    ],\n    projects: [],\n    environment: null,\n    resolveThreshold: '',\n    thresholdType: AlertRuleThresholdType.ABOVE,\n    ...defaultRuleOptions,\n  };\n}\n\n/**\n * Create an unsaved alert from a discover EventView object\n */\nexport function createRuleFromEventView(eventView: EventView): UnsavedMetricRule {\n  const parsedQuery = getQueryDatasource(eventView.query);\n  const datasetAndEventtypes = parsedQuery\n    ? DATA_SOURCE_TO_SET_AND_EVENT_TYPES[parsedQuery.source]\n    : DATA_SOURCE_TO_SET_AND_EVENT_TYPES.error;\n\n  let aggregate = eventView.getYAxis();\n  if (\n    datasetAndEventtypes.dataset === 'transactions' &&\n    /^p\\d{2,3}\\(\\)/.test(eventView.getYAxis())\n  ) {\n    // p95() -> p95(transaction.duration)\n    aggregate = eventView.getYAxis().slice(0, 3) + '(transaction.duration)';\n  }\n\n  return {\n    ...createDefaultRule(),\n    ...datasetAndEventtypes,\n    query: parsedQuery?.query ?? eventView.query,\n    aggregate,\n    environment: eventView.environment.length ? eventView.environment[0] : null,\n  };\n}\n\nexport function createRuleFromWizardTemplate(\n  wizardTemplate: WizardRuleTemplate\n): UnsavedMetricRule {\n  const {eventTypes, aggregate, dataset} = wizardTemplate;\n  const defaultRuleOptions: Partial<UnsavedMetricRule> = {};\n\n  if (isSessionAggregate(aggregate)) {\n    defaultRuleOptions.thresholdType = AlertRuleThresholdType.BELOW;\n    defaultRuleOptions.timeWindow = TimeWindow.ONE_HOUR;\n  }\n\n  if (aggregate.includes('apdex')) {\n    defaultRuleOptions.thresholdType = AlertRuleThresholdType.BELOW;\n  }\n\n  return {\n    ...createDefaultRule(defaultRuleOptions),\n    eventTypes: [eventTypes],\n    aggregate,\n    dataset,\n  };\n}\n\nexport function getThresholdUnits(\n  aggregate: string,\n  comparisonType: AlertRuleComparisonType\n): string {\n  // cls is a number not a measurement of time\n  if (\n    isSessionAggregate(aggregate) ||\n    comparisonType === AlertRuleComparisonType.CHANGE\n  ) {\n    return '%';\n  }\n\n  if (aggregate.includes('measurements.cls')) {\n    return '';\n  }\n\n  if (aggregate.includes('duration') || aggregate.includes('measurements')) {\n    return 'ms';\n  }\n\n  return '';\n}\n","import {t} from 'sentry/locale';\nimport type {SchemaFormConfig} from 'sentry/views/organizationIntegrations/sentryAppExternalForm';\n\nimport type {Incident} from '../../types';\n\nexport enum AlertRuleThresholdType {\n  ABOVE,\n  BELOW,\n}\n\nexport enum AlertRuleTriggerType {\n  CRITICAL = 'critical',\n  WARNING = 'warning',\n  RESOLVE = 'resolve',\n}\n\nexport enum AlertRuleComparisonType {\n  COUNT = 'count',\n  CHANGE = 'change',\n}\n\nexport enum Dataset {\n  ERRORS = 'events',\n  TRANSACTIONS = 'transactions',\n  SESSIONS = 'sessions',\n  /** Also used for crash free alerts */\n  METRICS = 'metrics',\n}\n\nexport enum EventTypes {\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n  USER = 'user',\n  SESSION = 'session',\n}\n\nexport enum Datasource {\n  ERROR_DEFAULT = 'error_default',\n  DEFAULT = 'default',\n  ERROR = 'error',\n  TRANSACTION = 'transaction',\n}\n\n/**\n * This is not a real aggregate as crash-free sessions/users can be only calculated on frontend by comparing the count of sessions broken down by status\n * It is here nevertheless to shoehorn sessions dataset into existing alerts codebase\n * This will most likely be revised as we introduce the metrics dataset\n */\nexport enum SessionsAggregate {\n  CRASH_FREE_SESSIONS = 'percentage(sessions_crashed, sessions) AS _crash_rate_alert_aggregate',\n  CRASH_FREE_USERS = 'percentage(users_crashed, users) AS _crash_rate_alert_aggregate',\n}\n\nexport type UnsavedTrigger = {\n  actions: Action[];\n  alertThreshold: number | '' | null;\n  label: AlertRuleTriggerType;\n  // UnsavedTrigger can be a part of an Unsaved Alert Rule that does not have an\n  // id yet\n  alertRuleId?: string;\n};\n\nexport type ThresholdControlValue = {\n  /**\n   * Resolve threshold is optional, so it can be null\n   */\n  threshold: number | '' | null;\n  thresholdType: AlertRuleThresholdType;\n};\n\ntype SavedTrigger = Omit<UnsavedTrigger, 'actions'> & {\n  actions: Action[];\n  dateCreated: string;\n  id: string;\n};\n\nexport type Trigger = Partial<SavedTrigger> & UnsavedTrigger;\n\nexport type UnsavedMetricRule = {\n  aggregate: string;\n  dataset: Dataset;\n  environment: string | null;\n  projects: string[];\n  query: string;\n  resolveThreshold: number | '' | null;\n  thresholdPeriod: number | null;\n  thresholdType: AlertRuleThresholdType;\n  timeWindow: TimeWindow;\n  triggers: Trigger[];\n  comparisonDelta?: number | null;\n  eventTypes?: EventTypes[];\n  owner?: string | null;\n};\n\nexport interface SavedMetricRule extends UnsavedMetricRule {\n  dateCreated: string;\n  dateModified: string;\n  id: string;\n  name: string;\n  status: number;\n  createdBy?: {email: string; id: number; name: string} | null;\n  errors?: {detail: string}[];\n  /**\n   * Returned with the expand=latestIncident query parameter\n   */\n  latestIncident?: Incident | null;\n  originalAlertRuleId?: number | null;\n}\n\nexport type MetricRule = Partial<SavedMetricRule> & UnsavedMetricRule;\n\nexport enum TimePeriod {\n  SIX_HOURS = '6h',\n  ONE_DAY = '1d',\n  THREE_DAYS = '3d',\n  // Seven days is actually 10080m but we have a max of 10000 events\n  SEVEN_DAYS = '10000m',\n  FOURTEEN_DAYS = '14d',\n  THIRTY_DAYS = '30d',\n}\n\nexport enum TimeWindow {\n  ONE_MINUTE = 1,\n  FIVE_MINUTES = 5,\n  TEN_MINUTES = 10,\n  FIFTEEN_MINUTES = 15,\n  THIRTY_MINUTES = 30,\n  ONE_HOUR = 60,\n  TWO_HOURS = 120,\n  FOUR_HOURS = 240,\n  ONE_DAY = 1440,\n}\n\nexport enum ActionType {\n  EMAIL = 'email',\n  SLACK = 'slack',\n  PAGERDUTY = 'pagerduty',\n  MSTEAMS = 'msteams',\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const ActionLabel = {\n  // \\u200B is needed because Safari disregards autocomplete=\"off\". It's seeing \"Email\" and\n  // opening up the browser autocomplete for email. https://github.com/JedWatson/react-select/issues/3500\n  [ActionType.EMAIL]: t('Emai\\u200Bl'),\n  [ActionType.SLACK]: t('Slack'),\n  [ActionType.PAGERDUTY]: t('Pagerduty'),\n  [ActionType.MSTEAMS]: t('MS Teams'),\n  [ActionType.SENTRY_APP]: t('Notification'),\n};\n\nexport enum TargetType {\n  // A direct reference, like an email address, Slack channel, or PagerDuty service\n  SPECIFIC = 'specific',\n\n  // A specific user. This could be used to grab the user's email address.\n  USER = 'user',\n\n  // A specific team. This could be used to send an email to everyone associated with a team.\n  TEAM = 'team',\n\n  // A Sentry App instead of any of the above.\n  SENTRY_APP = 'sentry_app',\n}\n\nexport const TargetLabel = {\n  [TargetType.USER]: t('Member'),\n  [TargetType.TEAM]: t('Team'),\n};\n\n/**\n * This is an available action template that is associated to a Trigger in a\n * Metric Alert Rule. They are defined by the available-actions API.\n */\nexport type MetricActionTemplate = {\n  /**\n   * See `TargetType`\n   */\n  allowedTargetTypes: TargetType[];\n\n  /**\n   * The integration type e.g. 'email'\n   */\n  type: ActionType;\n\n  /**\n   * Integration id for this `type`, should be passed to backend as `integrationId` when creating an action\n   */\n  integrationId?: number;\n\n  /**\n   * Name of the integration. This is a text field that differentiates integrations from the same provider from each other\n   */\n  integrationName?: string;\n\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options?: Array<{label: string; value: any}>;\n\n  /**\n   * SentryApp id for this `type`, should be passed to backend as `sentryAppId` when creating an action.\n   */\n  sentryAppId?: number;\n\n  sentryAppInstallationUuid?: string;\n  /**\n   * Name of the SentryApp. Like `integrationName`, this differentiates SentryApps from each other.\n   */\n  sentryAppName?: string;\n\n  /**\n   * Sentry App Alert Rule UI Component settings\n   */\n  settings?: SchemaFormConfig;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n\n/**\n * This is the user's configured action\n */\nexport type Action = UnsavedAction & Partial<SavedActionFields>;\n\ntype SavedActionFields = {\n  /**\n   * The id of the alert rule this action belongs to\n   */\n  alertRuleTriggerId: string;\n\n  /**\n   * date created\n   */\n  dateCreated: string;\n\n  /**\n   * A human readable description of the action generated by server\n   */\n  desc: string;\n\n  /**\n   * model id of the action\n   */\n  id: string;\n\n  /**\n   *  Could not fetch details from SentryApp. Show the rule but make it disabled.\n   */\n  disabled?: boolean;\n};\n\ntype UnsavedAction = {\n  /**\n   * An optional Slack channel or user id the user can input to avoid rate limiting issues.\n   */\n  inputChannelId: string | null;\n  /**\n   * For some available actions, we pass in the list of available targets.\n   */\n  options: Array<{label: string; value: any}> | null;\n  /**\n   * How to identify the target. Can be email, slack channel, pagerduty service,\n   * user_id, team_id, SentryApp id, etc\n   */\n  targetIdentifier: string | null;\n\n  targetType: TargetType | null;\n\n  type: ActionType;\n  /** Used to maintain order of unsaved actions */\n  unsavedDateCreated: string;\n  unsavedId: string;\n\n  /**\n   * The id of the integration, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  integrationId?: number | null;\n\n  /**\n   * The id of the SentryApp, can be null (e.g. email) or undefined (server errors when posting w/ null value)\n   */\n  sentryAppId?: number | null;\n\n  /**\n   * If this is a `sentry_app` action, this is the Sentry App's status.\n   */\n  status?: 'unpublished' | 'published' | 'internal';\n};\n","import {User} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\n\ntype Data = [number, {count: number}[]][];\n\nexport enum AlertRuleType {\n  METRIC = 'metric',\n  ISSUE = 'issue',\n}\n\nexport type Incident = {\n  alertRule: MetricRule;\n  dateClosed: string | null;\n  dateCreated: string;\n  dateDetected: string;\n  dateStarted: string;\n  // Array of group ids\n  discoverQuery: string;\n  groups: string[];\n  hasSeen: boolean;\n  id: string;\n  identifier: string;\n  isSubscribed: boolean;\n  organizationId: string;\n  projects: string[];\n  // Array of slugs\n  seenBy: User[];\n  status: IncidentStatus;\n  statusMethod: IncidentStatusMethod;\n  title: string;\n  activities?: ActivityType[];\n};\n\nexport type IncidentStats = {\n  eventStats: {\n    data: Data;\n  };\n  totalEvents: number;\n  uniqueUsers: number;\n};\n\nexport type ActivityTypeDraft = {\n  comment: null | string;\n  dateCreated: string;\n  id: string;\n  incidentIdentifier: string;\n  type: IncidentActivityType;\n  user: User | null;\n};\n\nexport type ActivityType = ActivityTypeDraft & {\n  previousValue: string | null;\n  value: string | null;\n  eventStats?: {data: Data};\n};\n\nexport enum IncidentActivityType {\n  CREATED = 0,\n  DETECTED = 1,\n  STATUS_CHANGE = 2,\n  COMMENT = 3,\n  STARTED = 4,\n}\n\nexport enum IncidentStatus {\n  OPENED = 1,\n  CLOSED = 2,\n  WARNING = 10,\n  CRITICAL = 20,\n}\n\nexport enum IncidentStatusMethod {\n  MANUAL = 1,\n  RULE_UPDATED = 2,\n  RULE_TRIGGERED = 3,\n}\n\nexport enum AlertRuleStatus {\n  PENDING = 0,\n  SNAPSHOT = 4,\n  DISABLED = 5,\n}\n\nexport enum CombinedAlertType {\n  METRIC = 'alert_rule',\n  ISSUE = 'rule',\n}\n\nexport type CombinedMetricIssueAlerts = (IssueAlertRule | MetricRule) & {\n  type: CombinedAlertType;\n  latestIncident?: Incident | null;\n};\n","import round from 'lodash/round';\n\nimport {t} from 'sentry/locale';\nimport {Organization, SessionFieldWithOperation} from 'sentry/types';\nimport {IssueAlertRule} from 'sentry/types/alerts';\nimport {defined} from 'sentry/utils';\nimport {getUtcDateString} from 'sentry/utils/dates';\nimport {axisLabelFormatter, tooltipFormatter} from 'sentry/utils/discover/charts';\nimport {\n  Dataset,\n  Datasource,\n  EventTypes,\n  MetricRule,\n  SavedMetricRule,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nimport {AlertRuleStatus, Incident, IncidentStats} from '../types';\n\n/**\n * Gets start and end date query parameters from stats\n */\nexport function getStartEndFromStats(stats: IncidentStats) {\n  const start = getUtcDateString(stats.eventStats.data[0][0] * 1000);\n  const end = getUtcDateString(\n    stats.eventStats.data[stats.eventStats.data.length - 1][0] * 1000\n  );\n\n  return {start, end};\n}\n\nexport function isIssueAlert(\n  data: IssueAlertRule | SavedMetricRule | MetricRule\n): data is IssueAlertRule {\n  return !data.hasOwnProperty('triggers');\n}\n\nexport const DATA_SOURCE_LABELS = {\n  [Dataset.ERRORS]: t('Errors'),\n  [Dataset.TRANSACTIONS]: t('Transactions'),\n  [Datasource.ERROR_DEFAULT]: 'event.type:error OR event.type:default',\n  [Datasource.ERROR]: 'event.type:error',\n  [Datasource.DEFAULT]: 'event.type:default',\n  [Datasource.TRANSACTION]: 'event.type:transaction',\n};\n\n// Maps a datasource to the relevant dataset and event_types for the backend to use\nexport const DATA_SOURCE_TO_SET_AND_EVENT_TYPES = {\n  [Datasource.ERROR_DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR, EventTypes.DEFAULT],\n  },\n  [Datasource.ERROR]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.ERROR],\n  },\n  [Datasource.DEFAULT]: {\n    dataset: Dataset.ERRORS,\n    eventTypes: [EventTypes.DEFAULT],\n  },\n  [Datasource.TRANSACTION]: {\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: [EventTypes.TRANSACTION],\n  },\n};\n\n// Converts the given dataset and event types array to a datasource for the datasource dropdown\nexport function convertDatasetEventTypesToSource(\n  dataset: Dataset,\n  eventTypes: EventTypes[]\n) {\n  // transactions only has one datasource option regardless of event type\n  if (dataset === Dataset.TRANSACTIONS) {\n    return Datasource.TRANSACTION;\n  }\n  // if no event type was provided use the default datasource\n  if (!eventTypes) {\n    return Datasource.ERROR;\n  }\n\n  if (eventTypes.includes(EventTypes.DEFAULT) && eventTypes.includes(EventTypes.ERROR)) {\n    return Datasource.ERROR_DEFAULT;\n  }\n  if (eventTypes.includes(EventTypes.DEFAULT)) {\n    return Datasource.DEFAULT;\n  }\n  return Datasource.ERROR;\n}\n\n/**\n * Attempt to guess the data source of a discover query\n *\n * @returns An object containing the datasource and new query without the datasource.\n * Returns null on no datasource.\n */\nexport function getQueryDatasource(\n  query: string\n): {query: string; source: Datasource} | null {\n  let match = query.match(\n    /\\(?\\bevent\\.type:(error|default|transaction)\\)?\\WOR\\W\\(?event\\.type:(error|default|transaction)\\)?/i\n  );\n  if (match) {\n    // should be [error, default] or [default, error]\n    const eventTypes = match.slice(1, 3).sort().join(',');\n    if (eventTypes !== 'default,error') {\n      return null;\n    }\n\n    return {source: Datasource.ERROR_DEFAULT, query: query.replace(match[0], '').trim()};\n  }\n\n  match = query.match(/(^|\\s)event\\.type:(error|default|transaction)/i);\n  if (match && Datasource[match[2].toUpperCase()]) {\n    return {\n      source: Datasource[match[2].toUpperCase()],\n      query: query.replace(match[0], '').trim(),\n    };\n  }\n\n  return null;\n}\n\nexport function isSessionAggregate(aggregate: string) {\n  return Object.values(SessionsAggregate).includes(aggregate as SessionsAggregate);\n}\n\nexport const SESSION_AGGREGATE_TO_FIELD = {\n  [SessionsAggregate.CRASH_FREE_SESSIONS]: SessionFieldWithOperation.SESSIONS,\n  [SessionsAggregate.CRASH_FREE_USERS]: SessionFieldWithOperation.USERS,\n};\n\nexport function alertAxisFormatter(value: number, seriesName: string, aggregate: string) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${round(value, 2)}%` : '\\u2015';\n  }\n\n  return axisLabelFormatter(value, seriesName);\n}\n\nexport function alertTooltipValueFormatter(\n  value: number,\n  seriesName: string,\n  aggregate: string\n) {\n  if (isSessionAggregate(aggregate)) {\n    return defined(value) ? `${value}%` : '\\u2015';\n  }\n\n  return tooltipFormatter(value, seriesName);\n}\n\nexport const ALERT_CHART_MIN_MAX_BUFFER = 1.03;\n\nexport function shouldScaleAlertChart(aggregate: string) {\n  // We want crash free rate charts to be scaled because they are usually too\n  // close to 100% and therefore too fine to see the spikes on 0%-100% scale.\n  return isSessionAggregate(aggregate);\n}\n\nexport function alertDetailsLink(organization: Organization, incident: Incident) {\n  return `/organizations/${organization.slug}/alerts/rules/details/${\n    incident.alertRule.status === AlertRuleStatus.SNAPSHOT &&\n    incident.alertRule.originalAlertRuleId\n      ? incident.alertRule.originalAlertRuleId\n      : incident.alertRule.id\n  }/`;\n}\n\n/**\n * Noramlizes a status string\n */\nexport function getQueryStatus(status: string | string[]): string {\n  if (Array.isArray(status) || status === '') {\n    return 'all';\n  }\n\n  return ['open', 'closed'].includes(status) ? status : 'all';\n}\n\nconst ALERT_LIST_QUERY_DEFAULT_TEAMS = ['myteams', 'unassigned'];\n\n/**\n * Noramlize a team slug from the query\n */\nexport function getTeamParams(team?: string | string[]): string[] {\n  if (team === undefined) {\n    return ALERT_LIST_QUERY_DEFAULT_TEAMS;\n  }\n\n  if (team === '') {\n    return [];\n  }\n\n  if (Array.isArray(team)) {\n    return team;\n  }\n\n  return [team];\n}\n","import {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {\n  Dataset,\n  EventTypes,\n  SessionsAggregate,\n} from 'sentry/views/alerts/rules/metric/types';\n\nexport type AlertType =\n  | 'issues'\n  | 'num_errors'\n  | 'users_experiencing_errors'\n  | 'throughput'\n  | 'trans_duration'\n  | 'apdex'\n  | 'failure_rate'\n  | 'lcp'\n  | 'fid'\n  | 'cls'\n  | 'custom'\n  | 'crash_free_sessions'\n  | 'crash_free_users';\n\nexport type MetricAlertType = Exclude<AlertType, 'issues'>;\n\nexport const AlertWizardAlertNames: Record<AlertType, string> = {\n  issues: t('Issues'),\n  num_errors: t('Number of Errors'),\n  users_experiencing_errors: t('Users Experiencing Errors'),\n  throughput: t('Throughput'),\n  trans_duration: t('Transaction Duration'),\n  apdex: t('Apdex'),\n  failure_rate: t('Failure Rate'),\n  lcp: t('Largest Contentful Paint'),\n  fid: t('First Input Delay'),\n  cls: t('Cumulative Layout Shift'),\n  custom: t('Custom Metric'),\n  crash_free_sessions: t('Crash Free Session Rate'),\n  crash_free_users: t('Crash Free User Rate'),\n};\n\ntype AlertWizardCategory = {\n  categoryHeading: string;\n  options: AlertType[];\n};\nexport const getAlertWizardCategories = (org: Organization): AlertWizardCategory[] => [\n  {\n    categoryHeading: t('Errors'),\n    options: ['issues', 'num_errors', 'users_experiencing_errors'],\n  },\n  ...(org.features.includes('crash-rate-alerts')\n    ? [\n        {\n          categoryHeading: t('Sessions'),\n          options: ['crash_free_sessions', 'crash_free_users'] as AlertType[],\n        },\n      ]\n    : []),\n  {\n    categoryHeading: t('Performance'),\n    options: [\n      'throughput',\n      'trans_duration',\n      'apdex',\n      'failure_rate',\n      'lcp',\n      'fid',\n      'cls',\n    ],\n  },\n  {\n    categoryHeading: t('Other'),\n    options: ['custom'],\n  },\n];\n\nexport type WizardRuleTemplate = {\n  aggregate: string;\n  dataset: Dataset;\n  eventTypes: EventTypes;\n};\n\nexport const AlertWizardRuleTemplates: Record<\n  MetricAlertType,\n  Readonly<WizardRuleTemplate>\n> = {\n  num_errors: {\n    aggregate: 'count()',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  users_experiencing_errors: {\n    aggregate: 'count_unique(user)',\n    dataset: Dataset.ERRORS,\n    eventTypes: EventTypes.ERROR,\n  },\n  throughput: {\n    aggregate: 'count()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  trans_duration: {\n    aggregate: 'p95(transaction.duration)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  apdex: {\n    aggregate: 'apdex(300)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  failure_rate: {\n    aggregate: 'failure_rate()',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  lcp: {\n    aggregate: 'p95(measurements.lcp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  fid: {\n    aggregate: 'p95(measurements.fid)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  cls: {\n    aggregate: 'p95(measurements.cls)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  custom: {\n    aggregate: 'p95(measurements.fp)',\n    dataset: Dataset.TRANSACTIONS,\n    eventTypes: EventTypes.TRANSACTION,\n  },\n  crash_free_sessions: {\n    aggregate: SessionsAggregate.CRASH_FREE_SESSIONS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.SESSION,\n  },\n  crash_free_users: {\n    aggregate: SessionsAggregate.CRASH_FREE_USERS,\n    // TODO(scttcper): Use Dataset.Metric on GA of alert-crash-free-metrics\n    dataset: Dataset.SESSIONS,\n    eventTypes: EventTypes.USER,\n  },\n};\n\nexport const DEFAULT_WIZARD_TEMPLATE = AlertWizardRuleTemplates.num_errors;\n\nexport const hidePrimarySelectorSet = new Set<AlertType>([\n  'num_errors',\n  'users_experiencing_errors',\n  'throughput',\n  'apdex',\n  'failure_rate',\n  'crash_free_sessions',\n  'crash_free_users',\n]);\n\nexport const hideParameterSelectorSet = new Set<AlertType>([\n  'trans_duration',\n  'lcp',\n  'fid',\n  'cls',\n]);\n\nexport function getFunctionHelpText(alertType: AlertType): {\n  labelText: string;\n  timeWindowText?: string;\n} {\n  const timeWindowText = t('over');\n  if (alertType === 'apdex') {\n    return {\n      labelText: t('Select apdex threshold and time interval'),\n      timeWindowText,\n    };\n  }\n  if (hidePrimarySelectorSet.has(alertType)) {\n    return {\n      labelText: t('Select time interval'),\n    };\n  }\n  return {\n    labelText: t('Select function and time interval'),\n    timeWindowText,\n  };\n}\n"],"names":["tooltipFormatter","value","seriesName","defined","aggregateOutputType","toLocaleString","formatPercentage","getDuration","toString","axisLabelFormatter","abbreviation","formatAbbreviatedNumber","axisDuration","WEEK","label","toFixed","t","DAY","HOUR","MINUTE","SECOND","DEFAULT_COUNT_TIME_WINDOW","DEFAULT_CHANGE_TIME_WINDOW","DEFAULT_CHANGE_COMP_DELTA","DEFAULT_AGGREGATE","DEFAULT_TRANSACTION_AGGREGATE","DATASET_EVENT_TYPE_FILTERS","Dataset","DATASOURCE_EVENT_TYPE_FILTERS","Datasource","errorFieldConfig","aggregations","fields","commonAggregations","allAggregations","DuplicateMetricFields","DuplicateTriggerFields","DuplicateActionFields","COMPARISON_DELTA_OPTIONS","getWizardAlertFieldConfig","alertType","dataset","measurementKeys","Object","keys","WEB_VITAL_DETAILS","transactionFieldConfig","createDefaultTrigger","alertThreshold","actions","createDefaultRule","defaultRuleOptions","eventTypes","EventTypes","aggregate","query","timeWindow","thresholdPeriod","triggers","AlertRuleTriggerType","projects","environment","resolveThreshold","thresholdType","AlertRuleThresholdType","createRuleFromEventView","eventView","parsedQuery","getQueryDatasource","datasetAndEventtypes","DATA_SOURCE_TO_SET_AND_EVENT_TYPES","source","getYAxis","test","slice","length","createRuleFromWizardTemplate","wizardTemplate","isSessionAggregate","TimeWindow","includes","getThresholdUnits","comparisonType","AlertRuleComparisonType","SessionsAggregate","TimePeriod","ActionType","ActionLabel","EMAIL","SLACK","PAGERDUTY","MSTEAMS","SENTRY_APP","TargetType","TargetLabel","USER","TEAM","AlertRuleType","IncidentActivityType","IncidentStatus","IncidentStatusMethod","AlertRuleStatus","CombinedAlertType","isIssueAlert","data","hasOwnProperty","DATA_SOURCE_LABELS","convertDatasetEventTypesToSource","match","sort","join","replace","trim","toUpperCase","values","SESSION_AGGREGATE_TO_FIELD","SessionFieldWithOperation","alertAxisFormatter","round","alertTooltipValueFormatter","ALERT_CHART_MIN_MAX_BUFFER","shouldScaleAlertChart","alertDetailsLink","organization","incident","slug","alertRule","status","originalAlertRuleId","id","getQueryStatus","Array","isArray","ALERT_LIST_QUERY_DEFAULT_TEAMS","getTeamParams","team","undefined","AlertWizardAlertNames","issues","num_errors","users_experiencing_errors","throughput","trans_duration","apdex","failure_rate","lcp","fid","cls","custom","crash_free_sessions","crash_free_users","getAlertWizardCategories","org","categoryHeading","options","features","AlertWizardRuleTemplates","DEFAULT_WIZARD_TEMPLATE","hidePrimarySelectorSet","Set","hideParameterSelectorSet","getFunctionHelpText","timeWindowText","labelText","has"],"sourceRoot":""}