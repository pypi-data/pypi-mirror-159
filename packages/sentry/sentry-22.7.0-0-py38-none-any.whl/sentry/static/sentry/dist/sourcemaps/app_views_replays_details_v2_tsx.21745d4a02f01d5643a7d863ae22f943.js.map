{"version":3,"file":"chunks/app_views_replays_details_v2_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/replays/detail/layout/pageSections.tsx","webpack:///./app/views/replays/detail/layout/resizePanel.tsx","webpack:///./app/views/replays/detail/layout/asideTabs_v2.tsx","webpack:///./app/views/replays/detail/layout/container.tsx","webpack:///./app/views/replays/detail/layout/index.tsx","webpack:///./app/components/replays/header/detailsPageBreadcrumbs.tsx","webpack:///./app/views/replays/detail/page.tsx","webpack:///./app/views/replays/details_v2.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\nexport const SIDEBAR_MIN_WIDTH = 325;\nexport const TOPBAR_MIN_HEIGHT = 325;\n\nconst PageColumn = styled('section')`\n  display: flex;\n  flex-grow: 1;\n  flex-wrap: nowrap;\n  flex-direction: column;\n`;\n\nexport const PageRow = styled(PageColumn)`\n  flex-direction: row;\n`;\n\nexport const TimelineSection = styled(PageColumn)`\n  flex-grow: 0;\n`;\n\nexport const ContentSection = styled(PageColumn)`\n  flex-grow: 3; /* Higher growth than SidebarSection or TopVideoSection */\n\n  height: 100%;\n  min-height: 300px;\n  width: 100%;\n`;\n\nexport const VideoSection = styled(PageColumn)`\n  height: 100%;\n  flex-grow: 2;\n`;\n\nexport const BreadcrumbSection = styled(PageColumn)``;\n\nexport const SidebarSection = styled(PageColumn)`\n  min-width: ${SIDEBAR_MIN_WIDTH}px;\n`;\n\nexport const TopbarSection = styled(PageRow)`\n  height: ${TOPBAR_MIN_HEIGHT}px;\n  min-height: ${TOPBAR_MIN_HEIGHT}px;\n\n  ${BreadcrumbSection} {\n    max-width: ${SIDEBAR_MIN_WIDTH}px;\n    margin-left: ${space(2)};\n  }\n`;\n","import {CSSProperties} from 'react';\nimport BaseResizePanel from 'react-resize-panel';\nimport styled from '@emotion/styled';\n\ntype Props = {\n  direction: 'n' | 'e' | 's' | 'w';\n  minHeight?: number;\n  minWidth?: number;\n  modifierClass?: string;\n  style?: CSSProperties;\n};\n\nexport const CLASSNAMES = {\n  bar: {\n    height: 'resizeHeightBar',\n    width: 'resizeWidthBar',\n  },\n  handle: {\n    height: 'resizeHeightHandle',\n    width: 'resizeWidthHandle',\n  },\n};\n\nconst ResizePanel = styled(function ResizePanelContent({\n  direction,\n  modifierClass = '',\n  ...props\n}: Props) {\n  const movesUpDown = ['n', 's'].includes(direction);\n  const borderClass = movesUpDown ? CLASSNAMES.bar.height : CLASSNAMES.bar.width;\n  const handleClass = movesUpDown ? CLASSNAMES.handle.height : CLASSNAMES.handle.width;\n\n  return (\n    <BaseResizePanel\n      direction={direction}\n      {...props}\n      borderClass={`${borderClass} ${modifierClass}`}\n      handleClass={`${handleClass} ${modifierClass}`}\n    />\n  );\n})`\n  position: relative;\n`;\n\nexport default ResizePanel;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport NavTabs from 'sentry/components/navTabs';\nimport Placeholder from 'sentry/components/placeholder';\nimport {useReplayContext} from 'sentry/components/replays/replayContext';\nimport ReplayView from 'sentry/components/replays/replayView';\nimport {t} from 'sentry/locale';\nimport useFullscreen from 'sentry/utils/replays/hooks/useFullscreen';\nimport useUrlParams from 'sentry/utils/replays/hooks/useUrlParams';\nimport ReplayReader from 'sentry/utils/replays/replayReader';\nimport Breadcrumbs from 'sentry/views/replays/detail/breadcrumbs';\n\nimport TagPanel from '../tagPanel';\n\nimport {BreadcrumbSection, VideoSection} from './pageSections';\nimport ResizePanel from './resizePanel';\n\ntype Props = {\n  showCrumbs?: boolean;\n  showVideo?: boolean;\n};\n\nconst TABS = {\n  video: t('Replay'),\n  tags: t('Tags'),\n};\n\nfunction AsideTabsV2({showCrumbs = true, showVideo = true}: Props) {\n  const {ref: fullscreenRef, isFullscreen, toggle: toggleFullscreen} = useFullscreen();\n  const {replay} = useReplayContext();\n\n  const {getParamValue, setParamValue} = useUrlParams('t_side', 'video');\n  const active = getParamValue();\n\n  const renderTabContent = (key: string, loadedReplay: ReplayReader) => {\n    if (key === 'tags') {\n      return <TagPanel replay={loadedReplay} />;\n    }\n\n    return (\n      <React.Fragment>\n        {showVideo ? (\n          <ResizePanel direction=\"s\" style={{height: '325px'}}>\n            <Container>\n              <VideoSection ref={fullscreenRef}>\n                <ErrorBoundary mini>\n                  <ReplayView\n                    toggleFullscreen={toggleFullscreen}\n                    isFullscreen={isFullscreen}\n                  />\n                </ErrorBoundary>\n              </VideoSection>\n            </Container>\n          </ResizePanel>\n        ) : null}\n\n        {showCrumbs ? (\n          <BreadcrumbSection>\n            <ErrorBoundary mini>\n              <Breadcrumbs />\n            </ErrorBoundary>\n          </BreadcrumbSection>\n        ) : null}\n      </React.Fragment>\n    );\n  };\n\n  return (\n    <React.Fragment>\n      <NavTabs underlined>\n        {Object.entries(TABS).map(([tab, label]) => {\n          return (\n            <li key={tab} className={active === tab ? 'active' : ''}>\n              <a onClick={() => setParamValue(tab)}>{label}</a>\n            </li>\n          );\n        })}\n      </NavTabs>\n      {replay ? renderTabContent(active, replay) : <Placeholder height=\"100%\" />}\n    </React.Fragment>\n  );\n}\n\nconst Container = styled('div')`\n  height: 100%;\n  /* TODO(replays): calc max height so the user can't resize infinitely but always showing both elements */\n  max-height: 50vh;\n`;\n\nexport default AsideTabsV2;\n","import styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport theme from 'sentry/utils/theme';\n\nimport {CLASSNAMES} from './resizePanel';\n\n// This is the generated SVG from https://github.com/getsentry/sentry/blob/master/static/app/icons/iconGrabbable.tsx\n// I couldn't sort out how to extract it from the react component. I think it\n// could be done react-dom-server or to render it inside an unmounted dom node\n// then copy the html content. All that seemed slower to build and slower to\n// exec compared to having an encoded svg.\nconst GrabberColor = encodeURIComponent(theme.gray300);\nconst GrabberSVG =\n  `url('data:image/svg+xml,` +\n  `%3Csvg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 16 16\" fill=\"${GrabberColor}\" height=\"16px\" width=\"16px\"%3E` +\n  '%3Ccircle cx=\"4.73\" cy=\"8\" r=\"1.31\"%3E%3C/circle%3E' +\n  '%3Ccircle cx=\"4.73\" cy=\"1.31\" r=\"1.31\"%3E%3C/circle%3E' +\n  '%3Ccircle cx=\"11.27\" cy=\"8\" r=\"1.31\"%3E%3C/circle%3E' +\n  '%3Ccircle cx=\"11.27\" cy=\"1.31\" r=\"1.31\"%3E%3C/circle%3E' +\n  '%3Ccircle cx=\"4.73\" cy=\"14.69\" r=\"1.31\"%3E%3C/circle%3E' +\n  '%3Ccircle cx=\"11.27\" cy=\"14.69\" r=\"1.31\"%3E%3C/circle%3E' +\n  '%3C/svg%3E' +\n  `')`;\n\nconst Container = styled('div')`\n  width: 100%;\n  height: 100%;\n  max-height: 100%;\n  display: flex;\n  flex-flow: nowrap column;\n  overflow: hidden;\n  padding: ${space(2)};\n\n  .${CLASSNAMES.bar.width} {\n    cursor: ew-resize;\n    height: 100%;\n    width: ${space(2)};\n  }\n\n  .${CLASSNAMES.bar.height} {\n    cursor: ns-resize;\n    height: ${space(2)};\n    width: 100%;\n  }\n  .${CLASSNAMES.bar.height}.overlapDown {\n    height: calc(16px + 34px); /* Spacing between components + height of <FocusTabs> */\n    margin-bottom: -34px; /* The height of the <FocusTabs> text + border */\n    z-index: ${p => p.theme.zIndex.initial};\n  }\n\n  .${CLASSNAMES.bar.height}, .${CLASSNAMES.bar.width} {\n    background: transparent;\n    display: flex;\n    align-items: center;\n    align-content: center;\n    justify-content: center;\n  }\n  .${CLASSNAMES.bar.height}:hover, .${CLASSNAMES.bar.width}:hover {\n    background: ${p => p.theme.hover};\n  }\n\n  .${CLASSNAMES.handle.width} {\n    height: ${space(3)};\n    width: ${space(2)};\n  }\n\n  .${CLASSNAMES.handle.height} {\n    height: ${space(2)};\n    width: ${space(3)};\n    transform: rotate(90deg);\n  }\n\n  .${CLASSNAMES.handle.height} > span,\n  .${CLASSNAMES.handle.width} > span {\n    display: block;\n    background: transparent ${GrabberSVG} center center no-repeat;\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport default Container;\n","import ErrorBoundary from 'sentry/components/errorBoundary';\nimport ReplayTimeline from 'sentry/components/replays/breadcrumbs/replayTimeline';\nimport ReplayView from 'sentry/components/replays/replayView';\nimport useFullscreen from 'sentry/utils/replays/hooks/useFullscreen';\nimport Breadcrumbs from 'sentry/views/replays/detail/breadcrumbs';\nimport FocusArea from 'sentry/views/replays/detail/focusArea';\nimport FocusTabs from 'sentry/views/replays/detail/focusTabs';\n\nimport AsideTabsV2 from './asideTabs_v2';\nimport Container from './container';\nimport {\n  BreadcrumbSection,\n  ContentSection,\n  PageRow,\n  SIDEBAR_MIN_WIDTH,\n  SidebarSection,\n  TimelineSection,\n  TOPBAR_MIN_HEIGHT,\n  TopbarSection,\n  VideoSection,\n} from './pageSections';\nimport ResizePanel from './resizePanel';\n\ntype Layout =\n  /**\n   * ### Sidebar\n   * ┌───────────────────┐\n   * │ Timeline          │\n   * ├──────────┬────────┤\n   * │ Details  > Video  │\n   * │          >        │\n   * │          >^^^^^^^^┤\n   * │          > Crumbs │\n   * │          >        │\n   * └──────────┴────────┘\n   */\n  | 'sidebar'\n  /**\n   * ### Topbar\n   *┌────────────────────┐\n   *│ Timeline           │\n   *├───────────┬────────┤\n   *│ Video     │ Crumbs │\n   *│           │        │\n   *├^^^^^^^^^^^^^^^^^^^^┤\n   *│ Details            │\n   *│                    │\n   *└────────────────────┘\n   */\n  | 'topbar'\n  /**\n   * ### Sidebar Left\n   * ┌───────────────────┐\n   * │ Timeline          │\n   * ├────────┬──────────┤\n   * │ Video  > Details  │\n   * │        >          │\n   * │^^^^^^^ >          |\n   * │ Crumbs >          │\n   * │        >          │\n   * └────────┴──────────┘\n   */\n  | 'sidebar_left';\n\ntype Props = {\n  layout?: Layout;\n  showCrumbs?: boolean;\n  showTimeline?: boolean;\n  showVideo?: boolean;\n};\n\nfunction ReplayLayout({\n  layout = 'topbar',\n  showCrumbs = true,\n  showTimeline = true,\n  showVideo = true,\n}: Props) {\n  const {ref: fullscreenRef, isFullscreen, toggle: toggleFullscreen} = useFullscreen();\n\n  const timeline = showTimeline ? (\n    <TimelineSection>\n      <ErrorBoundary mini>\n        <ReplayTimeline />\n      </ErrorBoundary>\n    </TimelineSection>\n  ) : null;\n\n  const video = showVideo ? (\n    <VideoSection ref={fullscreenRef}>\n      <ErrorBoundary mini>\n        <ReplayView toggleFullscreen={toggleFullscreen} isFullscreen={isFullscreen} />\n      </ErrorBoundary>\n    </VideoSection>\n  ) : null;\n\n  const crumbs = showCrumbs ? (\n    <BreadcrumbSection>\n      <ErrorBoundary mini>\n        <Breadcrumbs />\n      </ErrorBoundary>\n    </BreadcrumbSection>\n  ) : null;\n\n  const content = (\n    <ContentSection>\n      <ErrorBoundary mini>\n        <FocusTabs />\n        <FocusArea />\n      </ErrorBoundary>\n    </ContentSection>\n  );\n\n  if (layout === 'sidebar') {\n    return (\n      <Container>\n        {timeline}\n        <PageRow>\n          {content}\n          <ResizePanel direction=\"w\" minWidth={SIDEBAR_MIN_WIDTH}>\n            <SidebarSection>\n              <AsideTabsV2 showCrumbs={showCrumbs} showVideo={showVideo} />\n            </SidebarSection>\n          </ResizePanel>\n        </PageRow>\n      </Container>\n    );\n  }\n\n  if (layout === 'sidebar_left') {\n    return (\n      <Container>\n        {timeline}\n        <PageRow>\n          <ResizePanel direction=\"e\" minWidth={SIDEBAR_MIN_WIDTH}>\n            <SidebarSection>\n              <AsideTabsV2 showCrumbs={showCrumbs} showVideo={showVideo} />\n            </SidebarSection>\n          </ResizePanel>\n          {content}\n        </PageRow>\n      </Container>\n    );\n  }\n\n  // layout === 'topbar' or default\n  return (\n    <Container>\n      {timeline}\n      <ResizePanel\n        direction=\"s\"\n        minHeight={TOPBAR_MIN_HEIGHT}\n        modifierClass=\"overlapDown\"\n      >\n        <TopbarSection>\n          {video}\n          {crumbs}\n        </TopbarSection>\n      </ResizePanel>\n      {content}\n    </Container>\n  );\n}\n\nexport default ReplayLayout;\n","import {Fragment} from 'react';\n\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport {t} from 'sentry/locale';\nimport {Event} from 'sentry/types/event';\n\ntype Props = {\n  eventSlug: string;\n  orgId: string;\n  event?: Event;\n};\n\nfunction getUsernameFromEvent({eventSlug, event}: Pick<Props, 'event' | 'eventSlug'>) {\n  const user = event?.user;\n\n  if (!user) {\n    return eventSlug;\n  }\n\n  return user.name || user.email || user.username || user.ip_address;\n}\n\nfunction DetailsPageBreadcrumbs({orgId, event, eventSlug}: Props) {\n  const username = getUsernameFromEvent({event, eventSlug});\n\n  return (\n    <Breadcrumbs\n      crumbs={[\n        {\n          to: `/organizations/${orgId}/replays/`,\n          label: t('Replays'),\n        },\n        {\n          label: (\n            <Fragment>\n              {username}\n              <FeatureBadge type=\"alpha\" />\n            </Fragment>\n          ),\n        },\n      ]}\n    />\n  );\n}\n\nexport default DetailsPageBreadcrumbs;\n","import {ReactNode} from 'react';\nimport styled from '@emotion/styled';\n\nimport {FeatureFeedback} from 'sentry/components/featureFeedback';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport DetailsPageBreadcrumbs from 'sentry/components/replays/header/detailsPageBreadcrumbs';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport space from 'sentry/styles/space';\nimport {Event} from 'sentry/types/event';\n\ntype Props = {\n  children: ReactNode;\n  eventSlug: string;\n  orgId: string;\n  event?: Event;\n};\n\nfunction Page({children, event, orgId, eventSlug}: Props) {\n  const title = event ? `${event.id} - Replays - ${orgId}` : `Replays - ${orgId}`;\n\n  return (\n    <SentryDocumentTitle title={title}>\n      <FullViewport>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <DetailsPageBreadcrumbs orgId={orgId} event={event} eventSlug={eventSlug} />\n          </Layout.HeaderContent>\n          <ButtonActionsWrapper>\n            <FeatureFeedback featureName=\"replay\" buttonProps={{size: 'sm'}} />\n          </ButtonActionsWrapper>\n        </Layout.Header>\n        <FullViewportContent>{children}</FullViewportContent>\n      </FullViewport>\n    </SentryDocumentTitle>\n  );\n}\n\n// TODO(replay); This could make a lot of sense to put inside HeaderActions by default\nconst ButtonActionsWrapper = styled(Layout.HeaderActions)`\n  display: grid;\n  grid-template-columns: repeat(2, max-content);\n  justify-content: flex-end;\n  gap: ${space(1)};\n`;\n\nconst FullViewport = styled('div')`\n  height: 100vh;\n  width: 100%;\n\n  display: flex;\n  flex-flow: nowrap column;\n  flex-direction: column;\n  overflow: hidden;\n\n  /*\n   * The footer component is a sibling of this div.\n   * Remove it so the replay can take up the\n   * entire screen.\n   */\n  ~ footer {\n    display: none;\n  }\n`;\n\nconst FullViewportContent = styled('section')`\n  flex-grow: 1;\n  background: ${p => p.theme.background};\n`;\n\nexport default Page;\n","import {Fragment} from 'react';\n\nimport DetailedError from 'sentry/components/errors/detailedError';\nimport NotFound from 'sentry/components/errors/notFound';\nimport {Provider as ReplayContextProvider} from 'sentry/components/replays/replayContext';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport useReplayData from 'sentry/utils/replays/hooks/useReplayData';\nimport useUrlParam from 'sentry/utils/replays/hooks/useUrlParams';\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\nimport Layout from 'sentry/views/replays/detail/layout';\nimport Page from 'sentry/views/replays/detail/page';\n\nconst LAYOUT_NAMES = ['topbar', 'sidebar', 'sidebar_left'];\n\nfunction ReplayDetails() {\n  const {\n    location,\n    params: {eventSlug, orgId},\n  } = useRouteContext();\n\n  const {\n    t: initialTimeOffset, // Time, in seconds, where the video should start\n  } = location.query;\n\n  const {getParamValue} = useUrlParam('l_page', 'topbar');\n\n  const {fetching, onRetry, replay} = useReplayData({\n    eventSlug,\n    orgId,\n  });\n\n  if (!fetching && !replay) {\n    return (\n      <Page eventSlug={eventSlug} orgId={orgId}>\n        <PageContent>\n          <NotFound />\n        </PageContent>\n      </Page>\n    );\n  }\n\n  if (!fetching && replay && replay.getRRWebEvents().length < 2) {\n    return (\n      <Page eventSlug={eventSlug} orgId={orgId} event={replay.getEvent()}>\n        <DetailedError\n          onRetry={onRetry}\n          hideSupportLinks\n          heading={t('Expected two or more replay events')}\n          message={\n            <Fragment>\n              <p>{t('This Replay may not have captured any user actions.')}</p>\n              <p>\n                {t(\n                  'Or there may be an issue loading the actions from the server, click to try loading the Replay again.'\n                )}\n              </p>\n            </Fragment>\n          }\n        />\n      </Page>\n    );\n  }\n\n  return (\n    <Page eventSlug={eventSlug} orgId={orgId} event={replay?.getEvent()}>\n      <ReplayContextProvider replay={replay} initialTimeOffset={initialTimeOffset}>\n        <Layout\n          layout={\n            // TODO(replay): If we end up keeping this, we'll fix up the typing\n            LAYOUT_NAMES.includes(getParamValue()) ? (getParamValue() as any) : 'topbar'\n          }\n        />\n      </ReplayContextProvider>\n    </Page>\n  );\n}\n\nexport default ReplayDetails;\n"],"names":["SIDEBAR_MIN_WIDTH","PageColumn","PageRow","TimelineSection","ContentSection","VideoSection","BreadcrumbSection","SidebarSection","TopbarSection","space","CLASSNAMES","direction","modifierClass","props","movesUpDown","includes","borderClass","handleClass","TABS","video","t","tags","AsideTabsV2","showCrumbs","showVideo","ref","fullscreenRef","isFullscreen","toggle","toggleFullscreen","useFullscreen","replay","useReplayContext","getParamValue","setParamValue","useUrlParams","active","underlined","Object","entries","map","tab","label","className","onClick","key","loadedReplay","style","height","Container","mini","GrabberSVG","encodeURIComponent","theme","p","zIndex","initial","hover","ReplayLayout","layout","showTimeline","timeline","crumbs","content","minWidth","minHeight","DetailsPageBreadcrumbs","orgId","event","eventSlug","username","user","name","email","ip_address","getUsernameFromEvent","to","Fragment","type","Page","children","title","id","FullViewport","ButtonActionsWrapper","featureName","buttonProps","size","FullViewportContent","Layout","background","LAYOUT_NAMES","ReplayDetails","location","params","useRouteContext","initialTimeOffset","query","useUrlParam","fetching","onRetry","useReplayData","getRRWebEvents","length","getEvent","hideSupportLinks","heading","message"],"sourceRoot":""}