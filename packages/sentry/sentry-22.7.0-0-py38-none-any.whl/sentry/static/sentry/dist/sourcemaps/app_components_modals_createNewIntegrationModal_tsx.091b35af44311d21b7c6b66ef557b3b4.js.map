{"version":3,"file":"chunks/app_components_modals_createNewIntegrationModal_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"k6BAqBA,MAAMA,EAAgB,wBAEtB,SAASC,EAAT,GAMmC,IANA,KACjCC,EADiC,OAEjCC,EAFiC,OAGjCC,EAHiC,WAIjCC,EAJiC,aAKjCC,GACiC,EACjC,MAAOC,EAAQC,IAAgBC,EAAAA,EAAAA,UAAS,YAClCC,EAAU,CACd,CACE,YACA,QAACC,EAAD,CAAmB,eAAa,uBAAhC,UACGC,EAAAA,EAAAA,GAAE,yBADsD,oBAG3D,QAACC,EAAD,WACGC,EAAAA,EAAAA,IACC,oHACA,CACEC,UACE,QAAC,IAAD,CACEC,KAAMC,EAAAA,GAAqBC,EAAAA,GAAAA,eAC3BC,QAAS,MACPC,EAAAA,EAAAA,IAA0BF,EAAAA,GAAAA,cAA8B,CACtDZ,aAAAA,EACAe,KAAMrB,KALZ,UASGY,EAAAA,EAAAA,GAAE,8BAde,yBAqB9B,CACE,UACA,QAACD,EAAD,CAAmB,eAAa,qBAAhC,UACGC,EAAAA,EAAAA,GAAE,uBADoD,kBAGzD,QAACC,EAAD,WACGC,EAAAA,EAAAA,IACC,6GACA,CACEC,UACE,QAAC,IAAD,CACEC,KAAMC,EAAAA,GAAqBC,EAAAA,GAAAA,aAC3BC,QAAS,MACPC,EAAAA,EAAAA,IAA0BF,EAAAA,GAAAA,YAA4B,CACpDZ,aAAAA,EACAe,KAAMrB,KALZ,UASGY,EAAAA,EAAAA,GAAE,4BAde,wBAuBhC,OACE,QAAC,EAAAU,SAAD,YACE,QAACnB,EAAD,WACE,QAACoB,EAAD,YACE,wBAAKX,EAAAA,EAAAA,GAAE,8BACP,QAAC,IAAD,CAA0BZ,cAAeA,UAG7C,QAACE,EAAD,WACE,QAACsB,EAAD,CACEd,QAASA,EACTe,OAAOb,EAAAA,EAAAA,GAAE,eACTc,SAAUC,GAASnB,EAAamB,GAChCA,MAAOpB,OAGX,QAACH,EAAD,YACE,QAAC,KAAD,CAAQwB,KAAK,KAAKT,QAAS,IAAMd,IAAcwB,MAAO,CAACC,aAAaC,EAAAA,EAAAA,GAAM,IAA1E,UACGnB,EAAAA,EAAAA,GAAE,aAEL,QAAC,KAAD,CACEoB,SAAS,UACTJ,KAAK,KACLK,GAAK,aAAY3B,EAAa4B,2BACjB,WAAX3B,EAAsB,aAAe,kBAEvCY,QAAS,MACPC,EAAAA,EAAAA,IACa,WAAXb,EACIW,EAAAA,GAAAA,aACAA,EAAAA,GAAAA,eACJ,CACEZ,aAAAA,EACAe,KAAMrB,KAbd,UAkBGY,EAAAA,EAAAA,GAAE,gBArGJX,EAAAA,YAAAA,4BA4GT,MAAMuB,GAAmB,OAAOW,EAAAA,EAAP,sBAAH,oFAGAJ,EAAAA,EAAAA,GAAM,GAHN,MAMhBpB,GAAoB,OAAO,KAAP,sBAAH,mCAIjBE,GAAyB,OAAO,MAAP,sBAAH,UACjBuB,GAAKA,EAAEC,MAAMC,SADI,eAEbF,GAAKA,EAAEC,MAAME,gBAFA,uBAMtBhB,GAAgB,OAAO,MAAP,sBAAH,mGAOnB,GAAeiB,EAAAA,EAAAA,GAAiBvC,I,+aCtIhC,SAASwC,EAAT,GAIkC,IAJA,aAChCnC,EADgC,cAEhCN,KACG0C,GAC6B,EAChC,OACE,QAAC,KAAD,CACEd,KAAK,KACLe,UAAQ,EACR3B,KAAMC,EAAAA,GAAqBC,EAAAA,GAAAA,gBAC3BC,QAAS,MACPC,EAAAA,EAAAA,IAA0BF,EAAAA,GAAAA,eAA+B,CACvDZ,aAAAA,EACAe,KAAMrB,KAGV4C,MAAM,QAAC,KAAD,OACFF,EAXN,UAaG9B,EAAAA,EAAAA,GAAE,sBAnBA6B,EAAAA,YAAAA,2BAuBT,SAAeD,EAAAA,EAAAA,GAAiBC","sources":["webpack:///./app/components/modals/createNewIntegrationModal.tsx","webpack:///./app/views/organizationIntegrations/exampleIntegrationButton.tsx"],"sourcesContent":["import {Fragment, ReactNode, useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Button from 'sentry/components/button';\nimport RadioGroup from 'sentry/components/forms/controls/radioGroup';\nimport ExternalLink from 'sentry/components/links/externalLink';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {\n  platformEventLinkMap,\n  PlatformEvents,\n} from 'sentry/utils/analytics/integrations/platformAnalyticsEvents';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport ExampleIntegrationButton from 'sentry/views/organizationIntegrations/exampleIntegrationButton';\n\nexport type CreateNewIntegrationModalOptions = {organization: Organization};\ntype CreateNewIntegrationModalProps = CreateNewIntegrationModalOptions & ModalRenderProps;\n\nconst analyticsView = 'new_integration_modal' as const;\n\nfunction CreateNewIntegrationModal({\n  Body,\n  Header,\n  Footer,\n  closeModal,\n  organization,\n}: CreateNewIntegrationModalProps) {\n  const [option, selectOption] = useState('internal');\n  const choices = [\n    [\n      'internal',\n      <RadioChoiceHeader data-test-id=\"internal-integration\" key=\"header-internal\">\n        {t('Internal Integration')}\n      </RadioChoiceHeader>,\n      <RadioChoiceDescription key=\"description-internal\">\n        {tct(\n          'Internal integrations are meant for custom integrations unique to your organization. See more info on [docsLink].',\n          {\n            docsLink: (\n              <ExternalLink\n                href={platformEventLinkMap[PlatformEvents.INTERNAL_DOCS]}\n                onClick={() => {\n                  trackIntegrationAnalytics(PlatformEvents.INTERNAL_DOCS, {\n                    organization,\n                    view: analyticsView,\n                  });\n                }}\n              >\n                {t('Internal Integrations')}\n              </ExternalLink>\n            ),\n          }\n        )}\n      </RadioChoiceDescription>,\n    ],\n    [\n      'public',\n      <RadioChoiceHeader data-test-id=\"public-integration\" key=\"header-public\">\n        {t('Public Integration')}\n      </RadioChoiceHeader>,\n      <RadioChoiceDescription key=\"description-public\">\n        {tct(\n          'A public integration will be available for all Sentry users for installation. See more info on [docsLink].',\n          {\n            docsLink: (\n              <ExternalLink\n                href={platformEventLinkMap[PlatformEvents.PUBLIC_DOCS]}\n                onClick={() => {\n                  trackIntegrationAnalytics(PlatformEvents.PUBLIC_DOCS, {\n                    organization,\n                    view: analyticsView,\n                  });\n                }}\n              >\n                {t('Public Integrations')}\n              </ExternalLink>\n            ),\n          }\n        )}\n      </RadioChoiceDescription>,\n    ],\n  ] as [string, ReactNode, ReactNode][];\n\n  return (\n    <Fragment>\n      <Header>\n        <HeaderWrapper>\n          <h3>{t('Choose Integration Type')}</h3>\n          <ExampleIntegrationButton analyticsView={analyticsView} />\n        </HeaderWrapper>\n      </Header>\n      <Body>\n        <StyledRadioGroup\n          choices={choices}\n          label={t('Avatar Type')}\n          onChange={value => selectOption(value)}\n          value={option}\n        />\n      </Body>\n      <Footer>\n        <Button size=\"sm\" onClick={() => closeModal()} style={{marginRight: space(1)}}>\n          {t('Cancel')}\n        </Button>\n        <Button\n          priority=\"primary\"\n          size=\"sm\"\n          to={`/settings/${organization.slug}/developer-settings/${\n            option === 'public' ? 'new-public' : 'new-internal'\n          }/`}\n          onClick={() => {\n            trackIntegrationAnalytics(\n              option === 'public'\n                ? PlatformEvents.CHOSE_PUBLIC\n                : PlatformEvents.CHOSE_INTERNAL,\n              {\n                organization,\n                view: analyticsView,\n              }\n            );\n          }}\n        >\n          {t('Next')}\n        </Button>\n      </Footer>\n    </Fragment>\n  );\n}\n\nconst StyledRadioGroup = styled(RadioGroup)`\n  grid-auto-columns: auto;\n  & > label:not(:last-child) > div:last-child > * {\n    padding-bottom: ${space(1)};\n  }\n`;\nconst RadioChoiceHeader = styled('h6')`\n  margin: 0;\n`;\n\nconst RadioChoiceDescription = styled('div')`\n  color: ${p => p.theme.gray400};\n  font-size: ${p => p.theme.fontSizeMedium};\n  line-height: 1.6em;\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nexport default withOrganization(CreateNewIntegrationModal);\n","import Button, {ButtonProps} from 'sentry/components/button';\nimport {IconGithub} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport {IntegrationView} from 'sentry/utils/analytics/integrations';\nimport {\n  platformEventLinkMap,\n  PlatformEvents,\n} from 'sentry/utils/analytics/integrations/platformAnalyticsEvents';\nimport {trackIntegrationAnalytics} from 'sentry/utils/integrationUtil';\nimport withOrganization from 'sentry/utils/withOrganization';\n\ntype ExampleIntegrationButtonProps = {\n  analyticsView: IntegrationView['view'];\n  organization: Organization;\n} & ButtonProps;\n\n/**\n * Button to direct users to the Example App repository\n */\nfunction ExampleIntegrationButton({\n  organization,\n  analyticsView,\n  ...buttonProps\n}: ExampleIntegrationButtonProps) {\n  return (\n    <Button\n      size=\"sm\"\n      external\n      href={platformEventLinkMap[PlatformEvents.EXAMPLE_SOURCE]}\n      onClick={() => {\n        trackIntegrationAnalytics(PlatformEvents.EXAMPLE_SOURCE, {\n          organization,\n          view: analyticsView,\n        });\n      }}\n      icon={<IconGithub />}\n      {...buttonProps}\n    >\n      {t('View Example App')}\n    </Button>\n  );\n}\nexport default withOrganization(ExampleIntegrationButton);\n"],"names":["analyticsView","CreateNewIntegrationModal","Body","Header","Footer","closeModal","organization","option","selectOption","useState","choices","RadioChoiceHeader","t","RadioChoiceDescription","tct","docsLink","href","platformEventLinkMap","PlatformEvents","onClick","trackIntegrationAnalytics","view","Fragment","HeaderWrapper","StyledRadioGroup","label","onChange","value","size","style","marginRight","space","priority","to","slug","RadioGroup","p","theme","gray400","fontSizeMedium","withOrganization","ExampleIntegrationButton","buttonProps","external","icon"],"sourceRoot":""}