{"version":3,"file":"chunks/app_views_organizationGroupDetails_groupReplays_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"0OAEO,SAASA,IAEd,OADcC,EAAAA,EAAAA,KACDC,S,k4BCef,MAMMC,EAAe,IAAoB,IAAnB,MAACC,GAAkB,EACvC,MAAMC,GAAWC,EAAAA,EAAAA,KACXC,GAAeC,EAAAA,EAAAA,KACfN,GAASF,EAAAA,EAAAA,MACT,QAACS,GAAWL,GA6BZ,MAACM,GAASL,GACTM,OAAQC,EAASC,KAAMC,KAAUC,GAAgBL,EAElDM,EAEF,CACFC,OAAOC,EAAAA,EAAAA,GAAsBR,EAAMM,OAAS,cAGxCG,EAAiBH,EAAKC,MAAMG,WAAW,KAAO,OAAS,KACvDC,GAAY,QAAC,KAAD,CAAWC,MAAM,UAAUC,KAAK,KAAKC,UAAWL,IAElE,OACE,QAAC,EAAAM,SAAD,WACE,QAACC,EAAD,WACE,QAAC,IAAD,CACEC,UA3Ca,MACnB,MAAM,QAACC,GAAW1B,EACZ2B,EAA6B,CACjCC,GAAI,GACJC,KAAM,GACNC,QAAS,EACTC,OAAQ,CACN,WACA,UACA,UACA,YACA,MACA,eACA,aACA,UACA,kBACA,YACA,iBAEFC,SAAU,EAAEzB,EAAQqB,IACpBK,SAASjB,EAAAA,EAAAA,GAAsBR,EAAMM,OAAS,aAC9CN,MAAQ,YAAWkB,KAGrB,OAAOQ,EAAAA,GAAAA,yBAAmCP,EAAkBxB,IAmB3CgC,GACXhC,SAAUA,EACViC,QAAS/B,EAAagC,KACtBC,MA1DqB,GAsDvB,SAMGC,IAAQ,MACP,OACE,QAAC,EAAAhB,SAAD,YACE,QAACiB,EAAD,CACEC,UAAWF,EAAKE,UAChBC,QAAyC,KAAhC,UAAAH,EAAKI,iBAAL,eAAgBJ,KAAKK,QAC9BC,QAAS,EACPC,EAAAA,EAAAA,GAAE,YACF,QAACC,EAAD,CAEEC,KAAK,eACL,YACGlC,EAAKC,MAAMkC,SAAS,aAEF,eAAfnC,EAAKC,MACL,aACA,YAHA,OAKNmC,GAAI,CACFC,SAAUhD,EAASgD,SACnB3C,MAAO,IACFK,EACHC,KAAqB,eAAfA,EAAKC,MAAyB,YAAc,eAdxD,WAkBG+B,EAAAA,EAAAA,GAAE,aAlBL,IAkBoBhC,EAAKC,MAAMkC,SAAS,cAAgB9B,IAjBlD,cAmBN2B,EAAAA,EAAAA,GAAE,aACFA,EAAAA,EAAAA,GAAE,WA1BN,SA6BGP,EAAKI,WACJ,QAAC,IAAD,CACES,MAAM,WACNC,WAAYd,EAAKI,UAAUJ,OAE3B,QAEN,QAAC,IAAD,CAAYe,UAAWf,EAAKe,uBA7FtCrD,EAAAA,YAAAA,eAuGN,MAAMuC,GAAmB,OAAOe,EAAAA,GAAP,sBAAH,oGAIhB/B,GAAoB,OAAOgC,EAAAA,GAAP,sBAAH,2BACKC,GAAKA,EAAEC,MAAMC,SADlB,sBAEDF,GAAKA,EAAEC,MAAME,YAFZ,KAKjBb,GAAW,OAAOc,EAAAA,EAAP,sBAAH,wFAYd,ICxIMC,EAAwB,IAAoB,IAAnB,MAAC5D,GAAkB,EAChD,MAAMG,GAAeC,EAAAA,EAAAA,KASrB,OACE,QAAC,IAAD,CACEyD,SAAU,CAAC,kBACX1D,aAAcA,EACd2D,eAZJ,WACE,OACE,QAAC,KAAD,WACE,QAAC,IAAD,CAAOC,KAAK,UAAZ,UAAuBnB,EAAAA,EAAAA,GAAE,8CAM7B,UAKE,QAAC,EAAD,CAAc5C,MAAOA,OAhBrB4D,EAAAA,YAAAA,wBAqBN","sources":["webpack:///./app/utils/useParams.tsx","webpack:///./app/views/organizationGroupDetails/groupReplays/groupReplays.tsx","webpack:///./app/views/organizationGroupDetails/groupReplays/index.tsx"],"sourcesContent":["import {useRouteContext} from 'sentry/utils/useRouteContext';\n\nexport function useParams() {\n  const route = useRouteContext();\n  return route.params;\n}\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Link from 'sentry/components/links/link';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Group, NewQuery} from 'sentry/types';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {getQueryParamAsString} from 'sentry/utils/replays/getQueryParamAsString';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport {useParams} from 'sentry/utils/useParams';\nimport ReplayTable from 'sentry/views/replays/replayTable';\nimport {Replay} from 'sentry/views/replays/types';\n\nconst DEFAULT_DISCOVER_LIMIT = 50;\n\ntype Props = {\n  group: Group;\n};\n\nconst GroupReplays = ({group}: Props) => {\n  const location = useLocation();\n  const organization = useOrganization();\n  const params = useParams();\n  const {project} = group;\n\n  const getEventView = () => {\n    const {groupId} = params;\n    const eventQueryParams: NewQuery = {\n      id: '',\n      name: '',\n      version: 2,\n      fields: [\n        'replayId',\n        'eventID',\n        'project',\n        'timestamp',\n        'url',\n        'user.display',\n        'user.email',\n        'user.id',\n        'user.ip_address',\n        'user.name',\n        'user.username',\n      ],\n      projects: [+project.id],\n      orderby: getQueryParamAsString(query.sort) || '-timestamp',\n      query: `issue.id:${groupId}`,\n    };\n\n    return EventView.fromNewQueryWithLocation(eventQueryParams, location);\n  };\n\n  const {query} = location;\n  const {cursor: _cursor, page: _page, ...currentQuery} = query;\n\n  const sort: {\n    field: string;\n  } = {\n    field: getQueryParamAsString(query.sort) || '-timestamp',\n  };\n\n  const arrowDirection = sort.field.startsWith('-') ? 'down' : 'up';\n  const sortArrow = <IconArrow color=\"gray300\" size=\"xs\" direction={arrowDirection} />;\n\n  return (\n    <Fragment>\n      <StyledPageContent>\n        <DiscoverQuery\n          eventView={getEventView()}\n          location={location}\n          orgSlug={organization.slug}\n          limit={DEFAULT_DISCOVER_LIMIT}\n        >\n          {data => {\n            return (\n              <Fragment>\n                <StyledPanelTable\n                  isLoading={data.isLoading}\n                  isEmpty={data.tableData?.data.length === 0}\n                  headers={[\n                    t('Session'),\n                    <SortLink\n                      key=\"timestamp\"\n                      role=\"columnheader\"\n                      aria-sort={\n                        !sort.field.endsWith('timestamp')\n                          ? 'none'\n                          : sort.field === '-timestamp'\n                          ? 'descending'\n                          : 'ascending'\n                      }\n                      to={{\n                        pathname: location.pathname,\n                        query: {\n                          ...currentQuery,\n                          sort: sort.field === '-timestamp' ? 'timestamp' : '-timestamp',\n                        },\n                      }}\n                    >\n                      {t('Timestamp')} {sort.field.endsWith('timestamp') && sortArrow}\n                    </SortLink>,\n                    t('Duration'),\n                    t('Errors'),\n                  ]}\n                >\n                  {data.tableData ? (\n                    <ReplayTable\n                      idKey=\"replayId\"\n                      replayList={data.tableData.data as Replay[]}\n                    />\n                  ) : null}\n                </StyledPanelTable>\n                <Pagination pageLinks={data.pageLinks} />\n              </Fragment>\n            );\n          }}\n        </DiscoverQuery>\n      </StyledPageContent>\n    </Fragment>\n  );\n};\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: minmax(0, 1fr) max-content max-content max-content;\n`;\n\nconst StyledPageContent = styled(PageContent)`\n  box-shadow: 0px 0px 1px ${p => p.theme.gray200};\n  background-color: ${p => p.theme.background};\n`;\n\nconst SortLink = styled(Link)`\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n\n  svg {\n    vertical-align: top;\n  }\n`;\n\nexport default GroupReplays;\n","import Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Group} from 'sentry/types';\nimport useOrganization from 'sentry/utils/useOrganization';\n\nimport GroupReplays from './groupReplays';\n\ntype Props = {\n  group: Group;\n};\n\nconst GroupReplaysContainer = ({group}: Props) => {\n  const organization = useOrganization();\n  function renderNoAccess() {\n    return (\n      <PageContent>\n        <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n      </PageContent>\n    );\n  }\n\n  return (\n    <Feature\n      features={['session-replay']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      <GroupReplays group={group} />\n    </Feature>\n  );\n};\n\nexport default GroupReplaysContainer;\n"],"names":["useParams","useRouteContext","params","GroupReplays","group","location","useLocation","organization","useOrganization","project","query","cursor","_cursor","page","_page","currentQuery","sort","field","getQueryParamAsString","arrowDirection","startsWith","sortArrow","color","size","direction","Fragment","StyledPageContent","eventView","groupId","eventQueryParams","id","name","version","fields","projects","orderby","EventView","getEventView","orgSlug","slug","limit","data","StyledPanelTable","isLoading","isEmpty","tableData","length","headers","t","SortLink","role","endsWith","to","pathname","idKey","replayList","pageLinks","PanelTable","PageContent","p","theme","gray200","background","Link","GroupReplaysContainer","features","renderDisabled","type"],"sourceRoot":""}