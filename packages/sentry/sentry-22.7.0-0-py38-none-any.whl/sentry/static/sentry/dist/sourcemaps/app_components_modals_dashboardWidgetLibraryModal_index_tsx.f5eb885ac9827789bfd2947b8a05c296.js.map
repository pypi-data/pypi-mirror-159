{"version":3,"file":"chunks/app_components_modals_dashboardWidgetLibraryModal_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/circleIndicator.tsx","webpack:///./app/components/tagDeprecated.tsx","webpack:///./app/components/featureBadge.tsx","webpack:///./app/components/modals/dashboardWidgetLibraryModal/libraryTab.tsx","webpack:///./app/components/modals/dashboardWidgetLibraryModal/index.tsx","webpack:///./app/components/modals/dashboardWidgetLibraryModal/utils.tsx","webpack:///./app/components/modals/dashboardWidgetLibraryModal/tabsButtonBar.tsx","webpack:///./app/views/dashboardsV2/widgetLibrary/data.tsx","webpack:///./app/views/dashboardsV2/widgetLibrary/widgetCard.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {Theme} from 'sentry/utils/theme';\n\nconst defaultProps = {\n  enabled: true,\n  size: 14,\n};\n\ntype DefaultProps = Readonly<typeof defaultProps>;\n\ntype Props = {\n  color?: string;\n} & Partial<DefaultProps>;\n\nconst getBackgroundColor = (p: Props & {theme: Theme}) => {\n  if (p.color) {\n    return `background: ${p.color};`;\n  }\n\n  return `background: ${p.enabled ? p.theme.success : p.theme.error};`;\n};\n\nconst getSize = (p: Props) => `\n  height: ${p.size}px;\n  width: ${p.size}px;\n`;\n\nconst CircleIndicator = styled('div')<Props>`\n  display: inline-block;\n  position: relative;\n  border-radius: 50%;\n  ${getSize};\n  ${getBackgroundColor};\n`;\n\nCircleIndicator.defaultProps = defaultProps;\n\nexport default CircleIndicator;\n","import {cloneElement, isValidElement} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\nimport {Theme} from 'sentry/utils/theme';\n\ntype Props = React.HTMLAttributes<HTMLDivElement> & {\n  border?: boolean;\n  icon?: string | React.ReactNode;\n  inline?: boolean;\n  priority?: keyof Theme['badge'] | keyof Theme['alert'];\n  size?: string;\n};\n\ntype StyleFuncProps = Props & {theme: Theme};\n\n/**\n * Get priority from alerts or badge styles\n */\nconst getPriority = (p: StyleFuncProps) => {\n  if (p.priority) {\n    return p.theme.alert[p.priority] ?? p.theme.badge[p.priority] ?? null;\n  }\n\n  return null;\n};\n\nconst getMarginLeft = (p: StyleFuncProps) =>\n  p.inline ? `margin-left: ${p.size === 'small' ? '0.25em' : '0.5em'};` : '';\n\nconst getBorder = (p: StyleFuncProps) =>\n  p.border ? `border: 1px solid ${getPriority(p)?.border ?? p.theme.border};` : '';\n\nconst Tag = styled(\n  ({\n    children,\n    icon,\n    inline: _inline,\n    priority: _priority,\n    size: _size,\n    border: _border,\n    ...props\n  }: Props) => (\n    <div {...props}>\n      {icon && (\n        <IconWrapper>\n          {isValidElement(icon) && cloneElement(icon, {size: 'xs'})}\n        </IconWrapper>\n      )}\n      {children}\n    </div>\n  )\n)`\n  display: inline-flex;\n  box-sizing: border-box;\n  padding: ${p => (p.size === 'small' ? '0.1em 0.4em 0.2em' : '0.35em 0.8em 0.4em')};\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  line-height: 1;\n  color: ${p => (p.priority ? p.theme.background : p.theme.textColor)};\n  text-align: center;\n  white-space: nowrap;\n  vertical-align: middle;\n  align-items: center;\n  border-radius: ${p => (p.size === 'small' ? '0.25em' : '2em')};\n  text-transform: lowercase;\n  font-weight: ${p => (p.size === 'small' ? 'bold' : 'normal')};\n  background: ${p => getPriority(p)?.background ?? p.theme.gray100};\n  ${p => getBorder(p)};\n  ${p => getMarginLeft(p)};\n`;\n\nconst IconWrapper = styled('span')`\n  margin-right: ${space(0.5)};\n`;\n\nexport default Tag;\n","import {Fragment} from 'react';\nimport {useTheme} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport {captureException, withScope} from '@sentry/react';\nimport type {Severity} from '@sentry/types';\n\nimport CircleIndicator from 'sentry/components/circleIndicator';\nimport Tag from 'sentry/components/tagDeprecated';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\n\ntype BadgeProps = {\n  type: 'alpha' | 'beta' | 'new';\n  expiresAt?: Date;\n  noTooltip?: boolean;\n  title?: string;\n  variant?: 'indicator' | 'badge';\n};\n\ntype Props = Omit<React.HTMLAttributes<HTMLDivElement>, keyof BadgeProps> & BadgeProps;\n\nconst defaultTitles = {\n  alpha: t('This feature is internal and available for QA purposes'),\n  beta: t('This feature is available for early adopters and may change'),\n  new: t('This feature is new! Try it out and let us know what you think'),\n};\n\nconst labels = {\n  alpha: t('alpha'),\n  beta: t('beta'),\n  new: t('new'),\n};\n\nfunction BaseFeatureBadge({\n  type,\n  variant = 'badge',\n  title,\n  noTooltip,\n  expiresAt,\n  ...props\n}: Props) {\n  const theme = useTheme();\n  if (expiresAt && expiresAt.valueOf() < Date.now()) {\n    // Only get 1% of events as we don't need many to know that a badge needs to be cleaned up.\n    if (Math.random() < 0.01) {\n      withScope(scope => {\n        scope.setTag('title', title);\n        scope.setTag('type', type);\n        scope.setLevel('warning' as Severity);\n        captureException(new Error('Expired Feature Badge'));\n      });\n    }\n    return null;\n  }\n\n  return (\n    <div {...props}>\n      <Tooltip title={title ?? defaultTitles[type]} disabled={noTooltip} position=\"right\">\n        <Fragment>\n          {variant === 'badge' && <StyledTag priority={type}>{labels[type]}</StyledTag>}\n          {variant === 'indicator' && (\n            <CircleIndicator color={theme.badge[type].indicatorColor} size={8} />\n          )}\n        </Fragment>\n      </Tooltip>\n    </div>\n  );\n}\n\nconst StyledTag = styled(Tag)`\n  padding: 3px ${space(0.75)};\n`;\n\nconst FeatureBadge = styled(BaseFeatureBadge)`\n  display: inline-flex;\n  align-items: center;\n  margin-left: ${space(0.75)};\n  position: relative;\n  top: -1px;\n`;\n\nexport default FeatureBadge;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport Alert from 'sentry/components/alert';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {WidgetType} from 'sentry/views/dashboardsV2/types';\nimport {\n  DEFAULT_WIDGETS,\n  WidgetTemplate,\n} from 'sentry/views/dashboardsV2/widgetLibrary/data';\nimport WidgetLibraryCard from 'sentry/views/dashboardsV2/widgetLibrary/widgetCard';\n\ntype Props = {\n  errored: boolean;\n  organization: Organization;\n  selectedWidgets: WidgetTemplate[];\n  setErrored: (errored: boolean) => void;\n  setSelectedWidgets: (widgets: WidgetTemplate[]) => void;\n};\n\nfunction DashboardWidgetLibraryTab({\n  selectedWidgets,\n  errored,\n  organization,\n  setSelectedWidgets,\n  setErrored,\n}: Props) {\n  let defaultWidgets = DEFAULT_WIDGETS;\n  if (!!!organization.features.includes('dashboards-releases')) {\n    defaultWidgets = defaultWidgets.filter(\n      widget => !!!(widget.widgetType === WidgetType.RELEASE)\n    );\n  }\n  return (\n    <Fragment>\n      {errored && !!!selectedWidgets.length ? (\n        <Alert type=\"error\">\n          {t(\n            'Please select at least one Widget from our Library. Alternatively, you can build a custom widget from scratch.'\n          )}\n        </Alert>\n      ) : null}\n      <WidgetLibraryGrid>\n        {defaultWidgets.map((widgetCard, index) => {\n          return (\n            <WidgetLibraryCard\n              data-test-id={`widget-library-card-${index}`}\n              key={widgetCard.title}\n              widget={widgetCard}\n              selectedWidgets={selectedWidgets}\n              setSelectedWidgets={setSelectedWidgets}\n              setErrored={setErrored}\n            />\n          );\n        })}\n      </WidgetLibraryGrid>\n    </Fragment>\n  );\n}\n\nconst WidgetLibraryGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(100px, 1fr));\n  grid-template-rows: repeat(2, max-content);\n  row-gap: ${space(1.5)};\n  column-gap: ${space(2)};\n  /* 700px is the max width of the modal */\n  @media (max-width: 700px) {\n    grid-template-columns: auto;\n  }\n`;\n\nexport default DashboardWidgetLibraryTab;\n","import {Fragment, useState} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\n\nimport {ModalRenderProps} from 'sentry/actionCreators/modal';\nimport Tooltip from 'sentry/components/tooltip';\nimport {t, tct} from 'sentry/locale';\nimport {Organization} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {assignTempId} from 'sentry/views/dashboardsV2/layoutUtils';\nimport {DashboardDetails, MAX_WIDGETS, Widget} from 'sentry/views/dashboardsV2/types';\nimport {WidgetTemplate} from 'sentry/views/dashboardsV2/widgetLibrary/data';\n\nimport Button from '../../button';\nimport ButtonBar from '../../buttonBar';\n\nimport DashboardWidgetLibraryTab from './libraryTab';\nimport {TAB, TabsButtonBar} from './tabsButtonBar';\n\nexport type DashboardWidgetLibraryModalOptions = {\n  dashboard: DashboardDetails;\n  onAddWidget: (widgets: Widget[]) => void;\n  organization: Organization;\n  customWidget?: Widget;\n  initialSelectedWidgets?: WidgetTemplate[];\n};\n\ntype Props = ModalRenderProps & DashboardWidgetLibraryModalOptions;\n\nfunction DashboardWidgetLibraryModal({\n  Header,\n  Body,\n  Footer,\n  dashboard,\n  organization,\n  customWidget,\n  initialSelectedWidgets,\n  closeModal,\n  onAddWidget,\n}: Props) {\n  const [selectedWidgets, setSelectedWidgets] = useState<WidgetTemplate[]>(\n    initialSelectedWidgets ? initialSelectedWidgets : []\n  );\n  const [errored, setErrored] = useState(false);\n\n  function handleSubmit() {\n    onAddWidget([...dashboard.widgets, ...selectedWidgets.map(assignTempId)]);\n    closeModal();\n  }\n\n  const overLimit = dashboard.widgets.length + selectedWidgets.length > MAX_WIDGETS;\n\n  return (\n    <Fragment>\n      <Header closeButton>\n        <h4>{t('Add Widget(s)')}</h4>\n      </Header>\n      <Body>\n        <TabsButtonBar\n          activeTab={TAB.Library}\n          organization={organization}\n          dashboard={dashboard}\n          selectedWidgets={selectedWidgets}\n          customWidget={customWidget}\n          onAddWidget={onAddWidget}\n        />\n        <DashboardWidgetLibraryTab\n          selectedWidgets={selectedWidgets}\n          errored={errored}\n          setSelectedWidgets={setSelectedWidgets}\n          setErrored={setErrored}\n          organization={organization}\n        />\n      </Body>\n      <Footer>\n        <ButtonBar gap={1}>\n          <Button\n            external\n            href=\"https://docs.sentry.io/product/dashboards/widget-library/\"\n          >\n            {t('Read the docs')}\n          </Button>\n          <Tooltip\n            title={tct(\n              'Exceeds max widgets ([maxWidgets]) per dashboard. Plese unselect [unselectWidgets] widget(s).',\n              {\n                maxWidgets: MAX_WIDGETS,\n                unselectWidgets:\n                  dashboard.widgets.length + selectedWidgets.length - MAX_WIDGETS,\n              }\n            )}\n            disabled={!!!overLimit}\n          >\n            <StyledButton\n              data-test-id=\"confirm-widgets\"\n              priority=\"primary\"\n              disabled={overLimit}\n              type=\"button\"\n              onClick={() => {\n                if (!!!selectedWidgets.length) {\n                  setErrored(true);\n                  return;\n                }\n                trackAdvancedAnalyticsEvent('dashboards_views.widget_library.add', {\n                  organization,\n                  num_widgets: selectedWidgets.length,\n                });\n                selectedWidgets.forEach(selectedWidget => {\n                  trackAdvancedAnalyticsEvent(\n                    'dashboards_views.widget_library.add_widget',\n                    {\n                      organization,\n                      title: selectedWidget.title,\n                    }\n                  );\n                });\n                handleSubmit();\n              }}\n            >\n              {selectedWidgets.length\n                ? tct('Add ([numWidgets])', {numWidgets: selectedWidgets.length})\n                : t('Add')}\n            </StyledButton>\n          </Tooltip>\n        </ButtonBar>\n      </Footer>\n    </Fragment>\n  );\n}\n\nexport const modalCss = css`\n  width: 100%;\n  max-width: 700px;\n  margin: 70px auto;\n`;\n\nconst StyledButton = styled(Button)`\n  min-width: 90px;\n`;\n\nexport default DashboardWidgetLibraryModal;\n","const WIDGET_LIBRARY_VISITS = 'dashboard-widget-library-visits';\n\nexport function shouldShowNewBadge(): boolean {\n  const visits = localStorage.getItem(WIDGET_LIBRARY_VISITS);\n  return visits === null || (parseInt(visits, 10) || 0) < 5;\n}\nexport function setWidgetLibraryVisit() {\n  const visits = localStorage.getItem(WIDGET_LIBRARY_VISITS);\n  localStorage.setItem(\n    WIDGET_LIBRARY_VISITS,\n    visits === null ? '1' : `${(parseInt(visits, 10) || 0) + 1}`\n  );\n}\n","import styled from '@emotion/styled';\n\nimport {\n  openAddDashboardWidgetModal,\n  openDashboardWidgetLibraryModal,\n} from 'sentry/actionCreators/modal';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport {\n  DashboardDetails,\n  DashboardWidgetSource,\n  Widget,\n} from 'sentry/views/dashboardsV2/types';\nimport {WidgetTemplate} from 'sentry/views/dashboardsV2/widgetLibrary/data';\n\nimport Button from '../../button';\nimport ButtonBar from '../../buttonBar';\n\nimport {setWidgetLibraryVisit, shouldShowNewBadge} from './utils';\n\nexport enum TAB {\n  Library = 'library',\n  Custom = 'custom',\n}\n\ntype Props = {\n  activeTab: TAB;\n  dashboard: DashboardDetails;\n  organization: Organization;\n  customWidget?: Widget;\n  onAddWidget?: (widgets: Widget[]) => void;\n  selectedWidgets?: WidgetTemplate[];\n};\n\nexport function TabsButtonBar({\n  activeTab,\n  organization,\n  dashboard,\n  selectedWidgets,\n  customWidget,\n  onAddWidget,\n}: Props) {\n  return (\n    <StyledButtonBar active={activeTab}>\n      <CustomButton\n        barId={TAB.Custom}\n        onClick={() => {\n          if (activeTab === TAB.Custom) {\n            return;\n          }\n          trackAdvancedAnalyticsEvent('dashboards_views.widget_library.switch_tab', {\n            organization,\n            to: TAB.Custom,\n          });\n          openAddDashboardWidgetModal({\n            organization,\n            dashboard,\n            selectedWidgets,\n            widget: customWidget,\n            source: DashboardWidgetSource.LIBRARY,\n            onAddLibraryWidget: onAddWidget,\n          });\n        }}\n      >\n        {t('Custom Widget')}\n      </CustomButton>\n      <LibraryButton\n        barId={TAB.Library}\n        data-test-id=\"library-tab\"\n        onClick={() => {\n          if (activeTab === TAB.Library) {\n            return;\n          }\n          trackAdvancedAnalyticsEvent('dashboards_views.widget_library.switch_tab', {\n            organization,\n            to: TAB.Library,\n          });\n          setWidgetLibraryVisit();\n          if (defined(onAddWidget)) {\n            openDashboardWidgetLibraryModal({\n              organization,\n              dashboard,\n              customWidget,\n              initialSelectedWidgets: selectedWidgets,\n              onAddWidget,\n            });\n          }\n        }}\n      >\n        {t('Widget Library')}\n        {shouldShowNewBadge() && <FeatureBadge type=\"new\" />}\n      </LibraryButton>\n    </StyledButtonBar>\n  );\n}\n\nconst StyledButtonBar = styled(ButtonBar)`\n  display: inline-flex;\n  margin-bottom: ${space(2)};\n`;\n\nconst LibraryButton = styled(Button)`\n  border-top-left-radius: 0;\n  border-bottom-left-radius: 0;\n`;\n\nconst CustomButton = styled(Button)`\n  border-top-right-radius: 0;\n  border-bottom-right-radius: 0;\n  line-height: 17px;\n`;\n","import {t} from 'sentry/locale';\nimport {TOP_N} from 'sentry/utils/discover/types';\n\nimport {DisplayType, Widget, WidgetType} from '../types';\n\nexport type WidgetTemplate = Widget & {\n  description: string;\n};\n\nexport const DEFAULT_WIDGETS: Readonly<Array<WidgetTemplate>> = [\n  {\n    id: 'duration-distribution',\n    title: t('Duration Distribution'),\n    description: t('Compare transaction durations across different percentiles.'),\n    displayType: DisplayType.LINE,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:transaction',\n        fields: [\n          'p50(transaction.duration)',\n          'p75(transaction.duration)',\n          'p95(transaction.duration)',\n        ],\n        aggregates: [\n          'p50(transaction.duration)',\n          'p75(transaction.duration)',\n          'p95(transaction.duration)',\n        ],\n        columns: [],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: 'high-throughput-transactions',\n    title: t('High Throughput Transactions'),\n    description: t('Top 5 transactions with the largest volume.'),\n    displayType: DisplayType.TOP_N,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:transaction',\n        fields: ['transaction', 'count()'],\n        aggregates: ['count()'],\n        columns: ['transaction'],\n        orderby: '-count()',\n      },\n    ],\n  },\n  {\n    id: 'crash-rates-recent-releases',\n    title: t('Crash Rates for Recent Releases'),\n    description: t('Percentage of crashed sessions for latest releases.'),\n    displayType: DisplayType.LINE,\n    widgetType: WidgetType.RELEASE,\n    interval: '5m',\n    limit: 8,\n    queries: [\n      {\n        name: '',\n        conditions: '',\n        fields: ['crash_rate(session)', 'release'],\n        aggregates: ['crash_rate(session)'],\n        columns: ['release'],\n        orderby: '-release',\n      },\n    ],\n  },\n  {\n    id: 'session-health',\n    title: t('Session Health'),\n    description: t('Number of abnormal,crashed, errored and healthy sessions.'),\n    displayType: DisplayType.TABLE,\n    widgetType: WidgetType.RELEASE,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: '',\n        fields: ['session.status', 'sum(session)'],\n        aggregates: ['sum(session)'],\n        columns: ['session.status'],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: 'lcp-country',\n    title: t('LCP by Country'),\n    description: t('Density map showing page load times by country.'),\n    displayType: DisplayType.WORLD_MAP,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'has:geo.country_code',\n        fields: ['p75(measurements.lcp)'],\n        aggregates: ['p75(measurements.lcp)'],\n        columns: [],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: 'miserable-users',\n    title: t('Miserable Users'),\n    description: t('Unique users who have experienced slow load times.'),\n    displayType: DisplayType.BIG_NUMBER,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: '',\n        fields: ['count_miserable(user,300)'],\n        aggregates: ['count_miserable(user,300)'],\n        columns: [],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: 'slow-vs-fast',\n    title: t('Slow vs. Fast Transactions'),\n    description: t('Percentage breakdown of transaction durations over and under 300ms.'),\n    displayType: DisplayType.BAR,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:transaction',\n        fields: [\n          'equation|(count_if(transaction.duration,greater,300) / count()) * 100',\n          'equation|(count_if(transaction.duration,lessOrEquals,300) / count()) * 100',\n        ],\n        aggregates: [\n          'equation|(count_if(transaction.duration,greater,300) / count()) * 100',\n          'equation|(count_if(transaction.duration,lessOrEquals,300) / count()) * 100',\n        ],\n        columns: [],\n        orderby: '',\n      },\n    ],\n  },\n  {\n    id: 'issue-for-review',\n    title: t('Issues For Review'),\n    description: t('Most recently seen unresolved issues for review.'),\n    displayType: DisplayType.TABLE,\n    widgetType: WidgetType.ISSUE,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'is:unresolved is:for_review',\n        fields: ['issue', 'assignee', 'events', 'title'],\n        aggregates: [],\n        columns: ['issue', 'assignee', 'events', 'title'],\n        orderby: 'date',\n      },\n    ],\n  },\n  {\n    id: 'top-unhandled',\n    title: t('Top Unhandled Error Types'),\n    description: t('Most frequently encountered unhandled errors.'),\n    displayType: DisplayType.TOP_N,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'error.unhandled:true',\n        fields: ['error.type', 'count()'],\n        aggregates: ['count()'],\n        columns: ['error.type'],\n        orderby: '-count()',\n      },\n    ],\n  },\n  {\n    id: 'users-affected',\n    title: t('Users Affected by Errors'),\n    description: t('Footprint of unique users affected by errors.'),\n    displayType: DisplayType.LINE,\n    widgetType: WidgetType.DISCOVER,\n    interval: '5m',\n    queries: [\n      {\n        name: '',\n        conditions: 'event.type:error',\n        fields: ['count_unique(user)', 'count()'],\n        aggregates: ['count_unique(user)', 'count()'],\n        columns: [],\n        orderby: '',\n      },\n    ],\n  },\n];\n\nexport function getTopNConvertedDefaultWidgets(): Readonly<Array<WidgetTemplate>> {\n  return DEFAULT_WIDGETS.map(widget => {\n    if (widget.displayType === DisplayType.TOP_N) {\n      return {\n        ...widget,\n        displayType: DisplayType.AREA,\n        limit: TOP_N,\n      };\n    }\n    return widget;\n  });\n}\n","import {useState} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Panel, PanelBody} from 'sentry/components/panels';\nimport {IconArrow, IconGlobe, IconGraph, IconMenu, IconNumber} from 'sentry/icons';\nimport {IconGraphArea} from 'sentry/icons/iconGraphArea';\nimport {IconGraphBar} from 'sentry/icons/iconGraphBar';\nimport space from 'sentry/styles/space';\n\nimport {DisplayType} from '../types';\n\nimport {WidgetTemplate} from './data';\n\ntype Props = {\n  selectedWidgets: WidgetTemplate[];\n  setErrored: (errored: boolean) => void;\n  setSelectedWidgets: (widgets: WidgetTemplate[]) => void;\n  widget: WidgetTemplate;\n  ['data-test-id']?: string;\n};\n\nexport function getWidgetIcon(displayType: DisplayType) {\n  switch (displayType) {\n    case DisplayType.TABLE:\n      return IconMenu;\n    case DisplayType.WORLD_MAP:\n      return IconGlobe;\n    case DisplayType.BIG_NUMBER:\n      return IconNumber;\n    case DisplayType.BAR:\n      return IconGraphBar;\n    case DisplayType.TOP_N:\n      return IconArrow;\n    case DisplayType.AREA:\n      return IconGraphArea;\n    case DisplayType.LINE:\n    default:\n      return IconGraph;\n  }\n}\n\nfunction WidgetLibraryCard({\n  selectedWidgets,\n  widget,\n  setSelectedWidgets,\n  ['data-test-id']: dataTestId,\n}: Props) {\n  const [selected, setSelected] = useState(selectedWidgets.includes(widget));\n  const Icon = getWidgetIcon(widget.displayType);\n\n  return (\n    <StyledPanel\n      data-test-id={dataTestId}\n      selected={selected}\n      onClick={() => {\n        if (selected) {\n          const updatedWidgets = selectedWidgets.filter(\n            selectedWidget => widget !== selectedWidget\n          );\n          setSelectedWidgets(updatedWidgets);\n        } else {\n          const updatedWidgets = selectedWidgets.slice().concat(widget);\n          setSelectedWidgets(updatedWidgets);\n        }\n        setSelected(!!!selected);\n      }}\n    >\n      <PanelBody>\n        <TitleContainer>\n          <Icon size=\"xs\" />\n          <Title>{widget.title}</Title>\n        </TitleContainer>\n        <Description>{widget.description}</Description>\n      </PanelBody>\n    </StyledPanel>\n  );\n}\n\nconst Title = styled('div')`\n  padding-left: ${space(1)};\n  font-size: 16px;\n  line-height: 140%;\n  color: ${p => p.theme.gray500};\n`;\n\nconst TitleContainer = styled('div')`\n  padding: ${space(1.5)} ${space(2)};\n  padding-bottom: ${space(0.5)};\n  display: flex;\n  align-items: center;\n`;\n\nconst Description = styled('div')`\n  padding: 0 ${space(1)} ${space(1.5)} 36px;\n  font-size: 14px;\n  line-height: 21px;\n  color: ${p => p.theme.gray300};\n`;\n\ntype PanelProps = {\n  selected?: boolean;\n};\n\nconst StyledPanel = styled(Panel)<PanelProps>`\n  border: ${p =>\n    p.selected ? `2px solid ${p.theme.active}` : `1px solid ${p.theme.border}`};\n  margin: ${p => (p.selected ? '-1px' : 0)};\n  box-sizing: border-box;\n  box-shadow: 0px 2px 1px rgba(0, 0, 0, 0.08);\n  cursor: pointer;\n`;\n\nexport default WidgetLibraryCard;\n"],"names":["getBackgroundColor","p","color","enabled","theme","success","error","getSize","size","CircleIndicator","defaultProps","getPriority","priority","alert","badge","Tag","children","icon","inline","_inline","_priority","_size","border","_border","props","IconWrapper","isValidElement","cloneElement","fontSizeExtraSmall","background","textColor","gray100","getBorder","getMarginLeft","space","defaultTitles","alpha","t","beta","new","labels","BaseFeatureBadge","type","variant","title","noTooltip","expiresAt","useTheme","valueOf","Date","now","Math","random","withScope","scope","setTag","setLevel","captureException","Error","disabled","position","Fragment","StyledTag","indicatorColor","DashboardWidgetLibraryTab","selectedWidgets","errored","organization","setSelectedWidgets","setErrored","defaultWidgets","DEFAULT_WIDGETS","features","includes","filter","widget","widgetType","WidgetType","length","WidgetLibraryGrid","map","widgetCard","index","DashboardWidgetLibraryModal","Header","Body","Footer","dashboard","customWidget","initialSelectedWidgets","closeModal","onAddWidget","useState","overLimit","widgets","MAX_WIDGETS","closeButton","activeTab","TAB","gap","external","href","tct","maxWidgets","unselectWidgets","StyledButton","onClick","trackAdvancedAnalyticsEvent","num_widgets","forEach","selectedWidget","assignTempId","numWidgets","modalCss","Button","WIDGET_LIBRARY_VISITS","shouldShowNewBadge","visits","localStorage","getItem","parseInt","TabsButtonBar","StyledButtonBar","active","CustomButton","barId","Custom","to","openAddDashboardWidgetModal","source","DashboardWidgetSource","onAddLibraryWidget","LibraryButton","Library","setItem","setWidgetLibraryVisit","defined","openDashboardWidgetLibraryModal","ButtonBar","id","description","displayType","DisplayType","interval","queries","name","conditions","fields","aggregates","columns","orderby","limit","getTopNConvertedDefaultWidgets","TOP_N","getWidgetIcon","IconMenu","IconGlobe","IconNumber","IconGraphBar","IconArrow","IconGraphArea","IconGraph","WidgetLibraryCard","dataTestId","selected","setSelected","Icon","StyledPanel","updatedWidgets","slice","concat","TitleContainer","Title","Description","gray500","gray300","Panel"],"sourceRoot":""}