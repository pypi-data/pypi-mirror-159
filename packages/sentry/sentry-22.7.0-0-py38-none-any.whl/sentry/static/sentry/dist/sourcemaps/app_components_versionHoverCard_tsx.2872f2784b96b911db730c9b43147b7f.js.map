{"version":3,"file":"chunks/app_components_versionHoverCard_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/actionCreators/release.tsx","webpack:///./app/actions/releaseActions.tsx","webpack:///./app/actions/repositoryActions.tsx","webpack:///./app/components/lastCommit.tsx","webpack:///./app/components/repoLabel.tsx","webpack:///./app/components/versionHoverCard.tsx","webpack:///./app/utils/withRelease.tsx","webpack:///./app/stores/releaseStore.tsx","webpack:///./app/stores/repositoryStore.tsx","webpack:///./app/utils/withRepositories.tsx","webpack:///./app/actionCreators/repositories.tsx"],"sourcesContent":["import * as Sentry from '@sentry/react';\n\nimport {\n  addErrorMessage,\n  addLoadingMessage,\n  addSuccessMessage,\n} from 'sentry/actionCreators/indicator';\nimport ReleaseActions from 'sentry/actions/releaseActions';\nimport {Client} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport ReleaseStore, {getReleaseStoreKey} from 'sentry/stores/releaseStore';\nimport {Deploy, Release, ReleaseStatus} from 'sentry/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n  projectSlug: string;\n  releaseVersion: string;\n};\n\nexport function getProjectRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n  const path = `/projects/${orgSlug}/${projectSlug}/releases/${encodeURIComponent(\n    releaseVersion\n  )}/`;\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRelease for the same\n  // release to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  ReleaseStore.state.releaseLoading[getReleaseStoreKey(projectSlug, releaseVersion)] =\n    true;\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, res);\n    })\n    .catch(err => {\n      // This happens when a Project is not linked to a specific Release\n      if (err.status === 404) {\n        ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, null);\n        return;\n      }\n\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, err);\n      Sentry.withScope(scope => {\n        scope.setLevel('warning');\n        scope.setFingerprint(['getRelease-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n\nexport function getReleaseDeploys(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n  const path = `/organizations/${orgSlug}/releases/${encodeURIComponent(\n    releaseVersion\n  )}/deploys/`;\n\n  // HACK(leedongwei): Same as above\n  ReleaseStore.state.deploysLoading[getReleaseStoreKey(projectSlug, releaseVersion)] =\n    true;\n  ReleaseActions.loadDeploys(orgSlug, projectSlug, releaseVersion);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Deploy[]) => {\n      ReleaseActions.loadDeploysSuccess(projectSlug, releaseVersion, res);\n    })\n    .catch(err => {\n      // This happens when a Project is not linked to a specific Release\n      if (err.status === 404) {\n        ReleaseActions.loadDeploysSuccess(projectSlug, releaseVersion, null);\n        return;\n      }\n\n      ReleaseActions.loadDeploysError(projectSlug, releaseVersion, err);\n      Sentry.withScope(scope => {\n        scope.setLevel('warning');\n        scope.setFingerprint(['getReleaseDeploys-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n\nexport function archiveRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n  addLoadingMessage(t('Archiving Release\\u2026'));\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/releases/`, {\n      method: 'POST',\n      data: {\n        status: ReleaseStatus.Archived,\n        projects: [],\n        version: releaseVersion,\n      },\n    })\n    .then((release: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, release);\n      addSuccessMessage(t('Release was successfully archived.'));\n    })\n    .catch(error => {\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, error);\n      addErrorMessage(\n        error.responseJSON?.detail ?? t('Release could not be be archived.')\n      );\n      throw error;\n    });\n}\n\nexport function restoreRelease(api: Client, params: ParamsGet) {\n  const {orgSlug, projectSlug, releaseVersion} = params;\n\n  ReleaseActions.loadRelease(orgSlug, projectSlug, releaseVersion);\n  addLoadingMessage(t('Restoring Release\\u2026'));\n\n  return api\n    .requestPromise(`/organizations/${orgSlug}/releases/`, {\n      method: 'POST',\n      data: {\n        status: ReleaseStatus.Active,\n        projects: [],\n        version: releaseVersion,\n      },\n    })\n    .then((release: Release) => {\n      ReleaseActions.loadReleaseSuccess(projectSlug, releaseVersion, release);\n      addSuccessMessage(t('Release was successfully restored.'));\n    })\n    .catch(error => {\n      ReleaseActions.loadReleaseError(projectSlug, releaseVersion, error);\n      addErrorMessage(\n        error.responseJSON?.detail ?? t('Release could not be be restored.')\n      );\n      throw error;\n    });\n}\n","import {createActions} from 'reflux';\n\nconst ReleaseActions = createActions([\n  'loadRelease', // Singular as it loads 1 release\n  'loadReleaseError',\n  'loadReleaseSuccess',\n  'loadDeploys', // Plural as it loads all deploys related to a release\n  'loadDeploysError',\n  'loadDeploysSuccess',\n]);\n\nexport default ReleaseActions;\n","import {createActions} from 'reflux';\n\nconst RepositoryActions = createActions([\n  'resetRepositories',\n  'loadRepositories',\n  'loadRepositoriesError',\n  'loadRepositoriesSuccess',\n]);\n\nexport default RepositoryActions;\n","import UserAvatar from 'sentry/components/avatar/userAvatar';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport {AvatarUser, Commit} from 'sentry/types';\n\ntype Props = {\n  commit: Commit;\n  headerClass: string;\n};\n\nconst unknownUser: AvatarUser = {\n  id: '',\n  name: '',\n  username: '??',\n  email: '',\n  avatarUrl: '',\n  avatar: {\n    avatarUuid: '',\n    avatarType: 'letter_avatar',\n  },\n  ip_address: '',\n};\n\nfunction LastCommit({commit, headerClass}: Props) {\n  function renderMessage(message: Commit['message']) {\n    if (!message) {\n      return t('No message provided');\n    }\n\n    const firstLine = message.split(/\\n/)[0];\n    if (firstLine.length > 100) {\n      let truncated = firstLine.substr(0, 90);\n      const words = truncated.split(/ /);\n      // try to not have ellipsis mid-word\n      if (words.length > 1) {\n        words.pop();\n        truncated = words.join(' ');\n      }\n      return `${truncated}\\u2026`;\n    }\n    return firstLine;\n  }\n\n  const commitAuthor = commit?.author;\n  return (\n    <div>\n      <h6 className={headerClass}>Last commit</h6>\n      <div className=\"commit\">\n        <div className=\"commit-avatar\">\n          <UserAvatar user={commitAuthor || unknownUser} />\n        </div>\n        <div className=\"commit-message truncate\">{renderMessage(commit.message)}</div>\n        <div className=\"commit-meta\">\n          <strong>{commitAuthor?.name || t('Unknown Author')}</strong>\n          &nbsp;\n          <TimeSince date={commit.dateCreated} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LastCommit;\n","import styled from '@emotion/styled';\n\nconst RepoLabel = styled('span')`\n  /* label mixin from bootstrap */\n  font-weight: 700;\n  color: ${p => p.theme.white};\n  text-align: center;\n  white-space: nowrap;\n  border-radius: 0.25em;\n  /* end of label mixin from bootstrap */\n\n  ${p => p.theme.overflowEllipsis};\n\n  display: inline-block;\n  vertical-align: text-bottom;\n  line-height: 1;\n  background: ${p => p.theme.gray200};\n  padding: 3px;\n  max-width: 86px;\n  font-size: ${p => p.theme.fontSizeSmall};\n`;\n\nexport default RepoLabel;\n","import {Component} from 'react';\nimport styled from '@emotion/styled';\n\nimport {Client} from 'sentry/api';\nimport AvatarList from 'sentry/components/avatar/avatarList';\nimport Button from 'sentry/components/button';\nimport Clipboard from 'sentry/components/clipboard';\nimport {Hovercard} from 'sentry/components/hovercard';\nimport LastCommit from 'sentry/components/lastCommit';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport RepoLabel from 'sentry/components/repoLabel';\nimport TimeSince from 'sentry/components/timeSince';\nimport Version from 'sentry/components/version';\nimport {IconCopy} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Deploy, Organization, Release, Repository} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport withApi from 'sentry/utils/withApi';\nimport withRelease from 'sentry/utils/withRelease';\nimport withRepositories from 'sentry/utils/withRepositories';\n\ninterface Props extends React.ComponentProps<typeof Hovercard> {\n  api: Client;\n  organization: Organization;\n  projectSlug: string;\n\n  releaseVersion: string;\n  deploys?: Array<Deploy>;\n  deploysError?: Error;\n  deploysLoading?: boolean;\n  release?: Release;\n  releaseError?: Error;\n  releaseLoading?: boolean;\n  repositories?: Array<Repository>;\n  repositoriesError?: Error;\n  repositoriesLoading?: boolean;\n}\n\ntype State = {\n  visible: boolean;\n};\n\nclass VersionHoverCard extends Component<Props, State> {\n  state: State = {\n    visible: false,\n  };\n\n  toggleHovercard() {\n    this.setState({\n      visible: true,\n    });\n  }\n\n  getRepoLink() {\n    const {organization} = this.props;\n    const orgSlug = organization.slug;\n    return {\n      header: null,\n      body: (\n        <ConnectRepo>\n          <h5>{t('Releases are better with commit data!')}</h5>\n          <p>\n            {t(\n              'Connect a repository to see commit info, files changed, and authors involved in future releases.'\n            )}\n          </p>\n          <Button href={`/organizations/${orgSlug}/repos/`} priority=\"primary\">\n            {t('Connect a repository')}\n          </Button>\n        </ConnectRepo>\n      ),\n    };\n  }\n\n  getBody() {\n    const {releaseVersion, release, deploys} = this.props;\n    if (release === undefined || !defined(deploys)) {\n      return {header: null, body: null};\n    }\n\n    const {lastCommit} = release;\n    const recentDeploysByEnvironment = deploys.reduce(function (dbe, deploy) {\n      const {dateFinished, environment} = deploy;\n      if (!dbe.hasOwnProperty(environment)) {\n        dbe[environment] = dateFinished;\n      }\n\n      return dbe;\n    }, {});\n    let mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment);\n\n    if (Object.keys(recentDeploysByEnvironment).length > 3) {\n      mostRecentDeploySlice = Object.keys(recentDeploysByEnvironment).slice(0, 3);\n    }\n\n    return {\n      header: (\n        <HeaderWrapper>\n          {t('Release')}\n          <VersionWrapper>\n            <StyledVersion version={releaseVersion} truncate anchor={false} />\n\n            <Clipboard value={releaseVersion}>\n              <ClipboardIconWrapper>\n                <IconCopy size=\"xs\" />\n              </ClipboardIconWrapper>\n            </Clipboard>\n          </VersionWrapper>\n        </HeaderWrapper>\n      ),\n      body: (\n        <div>\n          <div className=\"row\">\n            <div className=\"col-xs-4\">\n              <h6>{t('New Issues')}</h6>\n              <div className=\"count-since\">{release.newGroups}</div>\n            </div>\n            <div className=\"col-xs-8\">\n              <h6 style={{textAlign: 'right'}}>\n                {release.commitCount}{' '}\n                {release.commitCount !== 1 ? t('commits ') : t('commit ')} {t('by ')}{' '}\n                {release.authors.length}{' '}\n                {release.authors.length !== 1 ? t('authors') : t('author')}{' '}\n              </h6>\n              <AvatarList\n                users={release.authors}\n                avatarSize={25}\n                tooltipOptions={{container: 'body'} as any}\n                typeMembers=\"authors\"\n              />\n            </div>\n          </div>\n          {lastCommit && <LastCommit commit={lastCommit} headerClass=\"commit-heading\" />}\n          {deploys.length > 0 && (\n            <div>\n              <div className=\"divider\">\n                <h6 className=\"deploy-heading\">{t('Deploys')}</h6>\n              </div>\n              {mostRecentDeploySlice.map((env, idx) => {\n                const dateFinished = recentDeploysByEnvironment[env];\n                return (\n                  <div className=\"deploy\" key={idx}>\n                    <div className=\"deploy-meta\" style={{position: 'relative'}}>\n                      <VersionRepoLabel>{env}</VersionRepoLabel>\n                      {dateFinished && <StyledTimeSince date={dateFinished} />}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      ),\n    };\n  }\n\n  render() {\n    const {\n      deploysLoading,\n      deploysError,\n      release,\n      releaseLoading,\n      releaseError,\n      repositories,\n      repositoriesLoading,\n      repositoriesError,\n    } = this.props;\n    let header: React.ReactNode = null;\n    let body: React.ReactNode = null;\n\n    const loading = !!(deploysLoading || releaseLoading || repositoriesLoading);\n    const error = deploysError ?? releaseError ?? repositoriesError;\n    const hasRepos = repositories && repositories.length > 0;\n\n    if (loading) {\n      body = <LoadingIndicator mini />;\n    } else if (error) {\n      body = <LoadingError />;\n    } else {\n      const renderObj: {[key: string]: React.ReactNode} =\n        hasRepos && release ? this.getBody() : this.getRepoLink();\n      header = renderObj.header;\n      body = renderObj.body;\n    }\n\n    return (\n      <Hovercard {...this.props} header={header} body={body}>\n        {this.props.children}\n      </Hovercard>\n    );\n  }\n}\n\nexport {VersionHoverCard};\nexport default withApi(withRelease(withRepositories(VersionHoverCard)));\n\nconst ConnectRepo = styled('div')`\n  padding: ${space(2)};\n  text-align: center;\n`;\n\nconst VersionRepoLabel = styled(RepoLabel)`\n  width: 86px;\n`;\n\nconst StyledTimeSince = styled(TimeSince)`\n  color: ${p => p.theme.gray300};\n  position: absolute;\n  left: 98px;\n  width: 50%;\n  padding: 3px 0;\n`;\n\nconst HeaderWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n`;\nconst VersionWrapper = styled('div')`\n  display: flex;\n  flex: 1;\n  align-items: center;\n  justify-content: flex-end;\n`;\nconst StyledVersion = styled(Version)`\n  margin-right: ${space(0.5)};\n  max-width: 190px;\n`;\nconst ClipboardIconWrapper = styled('span')`\n  &:hover {\n    cursor: pointer;\n  }\n`;\n","import {Component} from 'react';\n\nimport {getProjectRelease, getReleaseDeploys} from 'sentry/actionCreators/release';\nimport {Client} from 'sentry/api';\nimport ReleaseStore from 'sentry/stores/releaseStore';\nimport {Deploy, Organization, Release} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n  projectSlug: string;\n  releaseVersion: string;\n};\n\ntype InjectedProps = {\n  deploys?: Array<Deploy>;\n  deploysError?: Error;\n  deploysLoading?: boolean;\n  release?: Release;\n  releaseError?: Error;\n  releaseLoading?: boolean;\n};\n\nfunction withRelease<P extends DependentProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithRelease extends Component<\n    Omit<P, keyof InjectedProps> & Partial<InjectedProps> & DependentProps,\n    InjectedProps\n  > {\n    static displayName = `withRelease(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props, context) {\n      super(props, context);\n\n      const {projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      this.state = {...releaseData};\n    }\n\n    componentDidMount() {\n      this.fetchRelease();\n      this.fetchDeploys();\n    }\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = ReleaseStore.listen(() => this.onStoreUpdate(), undefined);\n\n    fetchRelease() {\n      const {api, organization, projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      const orgSlug = organization.slug;\n\n      if (\n        (!releaseData.release && !releaseData.releaseLoading) ||\n        releaseData.releaseError\n      ) {\n        getProjectRelease(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    }\n\n    fetchDeploys() {\n      const {api, organization, projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n      const orgSlug = organization.slug;\n\n      if (\n        (!releaseData.deploys && !releaseData.deploysLoading) ||\n        releaseData.deploysError\n      ) {\n        getReleaseDeploys(api, {orgSlug, projectSlug, releaseVersion});\n      }\n    }\n\n    onStoreUpdate() {\n      const {projectSlug, releaseVersion} = this.props;\n      const releaseData = ReleaseStore.get(projectSlug, releaseVersion);\n\n      this.setState({...releaseData});\n    }\n\n    render() {\n      return (\n        <WrappedComponent\n          {...(this.props as P & DependentProps)}\n          {...(this.state as InjectedProps)}\n        />\n      );\n    }\n  }\n  return WithRelease;\n}\n\nexport default withRelease;\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport OrganizationActions from 'sentry/actions/organizationActions';\nimport ReleaseActions from 'sentry/actions/releaseActions';\nimport {Deploy, Organization, Release} from 'sentry/types';\nimport {makeSafeRefluxStore} from 'sentry/utils/makeSafeRefluxStore';\n\ntype StoreRelease = Map<string, Release>;\ntype StoreDeploys = Map<string, Array<Deploy>>;\ntype StoreLoading = Map<string, boolean>;\ntype StoreError = Map<string, Error>;\n\ninterface ReleaseStoreDefinition extends StoreDefinition {\n  get(\n    projectSlug: string,\n    releaseVersion: string\n  ): {\n    deploys: Array<Deploy> | undefined;\n    deploysError: Error | undefined;\n    deploysLoading: boolean | undefined;\n    release: Release | undefined;\n    releaseError: Error | undefined;\n    releaseLoading: boolean | undefined;\n  };\n\n  loadDeploys(orgSlug: string, projectSlug: string, releaseVersion: string): void;\n\n  loadDeploysError(projectSlug: string, releaseVersion: string, error: Error): void;\n  loadDeploysSuccess(projectSlug: string, releaseVersion: string, data: Release): void;\n  loadRelease(orgSlug: string, projectSlug: string, releaseVersion: string): void;\n  loadReleaseError(projectSlug: string, releaseVersion: string, error: Error): void;\n  loadReleaseSuccess(projectSlug: string, releaseVersion: string, data: Release): void;\n  state: {\n    deploys: StoreDeploys;\n    deploysError: StoreError;\n    deploysLoading: StoreLoading;\n    orgSlug: string | undefined;\n    release: StoreRelease;\n    releaseError: StoreError;\n    releaseLoading: StoreLoading;\n  };\n  updateOrganization(org: Organization): void;\n}\n\nexport const getReleaseStoreKey = (projectSlug: string, releaseVersion: string) =>\n  `${projectSlug}${releaseVersion}`;\n\nconst storeConfig: ReleaseStoreDefinition = {\n  state: {\n    orgSlug: undefined,\n    release: new Map() as StoreRelease,\n    releaseLoading: new Map() as StoreLoading,\n    releaseError: new Map() as StoreError,\n    deploys: new Map() as StoreDeploys,\n    deploysLoading: new Map() as StoreLoading,\n    deploysError: new Map() as StoreError,\n  },\n\n  listenables: ReleaseActions,\n  unsubscribeListeners: [],\n\n  init() {\n    this.unsubscribeListeners.push(\n      this.listenTo(OrganizationActions.update, this.updateOrganization)\n    );\n    this.reset();\n  },\n\n  reset() {\n    this.state = {\n      orgSlug: undefined,\n      release: new Map() as StoreRelease,\n      releaseLoading: new Map() as StoreLoading,\n      releaseError: new Map() as StoreError,\n      deploys: new Map() as StoreDeploys,\n      deploysLoading: new Map() as StoreLoading,\n      deploysError: new Map() as StoreError,\n    };\n    this.trigger(this.state);\n  },\n\n  updateOrganization(org: Organization) {\n    this.reset();\n    this.state.orgSlug = org.slug;\n    this.trigger(this.state);\n  },\n\n  loadRelease(orgSlug: string, projectSlug: string, releaseVersion: string) {\n    // Wipe entire store if the user switched organizations\n    if (!this.orgSlug || this.orgSlug !== orgSlug) {\n      this.reset();\n      this.orgSlug = orgSlug;\n    }\n\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {releaseLoading, releaseError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: true,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadReleaseError(projectSlug: string, releaseVersion: string, error: Error) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {releaseLoading, releaseError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: false,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: error,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadReleaseSuccess(projectSlug: string, releaseVersion: string, data: Release) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {release, releaseLoading, releaseError, ...state} = this.state;\n    this.state = {\n      ...state,\n      release: {\n        ...release,\n        [releaseKey]: data,\n      },\n      releaseLoading: {\n        ...releaseLoading,\n        [releaseKey]: false,\n      },\n      releaseError: {\n        ...releaseError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploys(orgSlug: string, projectSlug: string, releaseVersion: string) {\n    // Wipe entire store if the user switched organizations\n    if (!this.orgSlug || this.orgSlug !== orgSlug) {\n      this.reset();\n      this.orgSlug = orgSlug;\n    }\n\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: true,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploysError(projectSlug: string, releaseVersion: string, error: Error) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: false,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: error,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  loadDeploysSuccess(projectSlug: string, releaseVersion: string, data: Release) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n    const {deploys, deploysLoading, deploysError, ...state} = this.state;\n\n    this.state = {\n      ...state,\n      deploys: {\n        ...deploys,\n        [releaseKey]: data,\n      },\n      deploysLoading: {\n        ...deploysLoading,\n        [releaseKey]: false,\n      },\n      deploysError: {\n        ...deploysError,\n        [releaseKey]: undefined,\n      },\n    };\n    this.trigger(this.state);\n  },\n\n  get(projectSlug: string, releaseVersion: string) {\n    const releaseKey = getReleaseStoreKey(projectSlug, releaseVersion);\n\n    return {\n      release: this.state.release[releaseKey],\n      releaseLoading: this.state.releaseLoading[releaseKey],\n      releaseError: this.state.releaseError[releaseKey],\n      deploys: this.state.deploys[releaseKey],\n      deploysLoading: this.state.deploysLoading[releaseKey],\n      deploysError: this.state.deploysError[releaseKey],\n    };\n  },\n};\n\nconst ReleaseStore = createStore(makeSafeRefluxStore(storeConfig));\nexport default ReleaseStore;\n","import {createStore, StoreDefinition} from 'reflux';\n\nimport RepoActions from 'sentry/actions/repositoryActions';\nimport {Repository} from 'sentry/types';\nimport {makeSafeRefluxStore} from 'sentry/utils/makeSafeRefluxStore';\n\ninterface RepositoryStoreDefinition extends StoreDefinition {\n  get(): {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesError?: Error;\n    repositoriesLoading?: boolean;\n  };\n\n  loadRepositories(orgSlug: string): void;\n\n  loadRepositoriesError(error: Error): void;\n  loadRepositoriesSuccess(data: Repository[]): void;\n  state: {\n    orgSlug?: string;\n    repositories?: Repository[];\n    repositoriesError?: Error;\n    repositoriesLoading?: boolean;\n  };\n}\n\nconst storeConfig: RepositoryStoreDefinition = {\n  listenables: RepoActions,\n  state: {\n    orgSlug: undefined,\n    repositories: undefined,\n    repositoriesLoading: undefined,\n    repositoriesError: undefined,\n  },\n\n  init() {\n    this.resetRepositories();\n  },\n\n  resetRepositories() {\n    this.state = {\n      orgSlug: undefined,\n      repositories: undefined,\n      repositoriesLoading: undefined,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositories(orgSlug: string) {\n    this.state = {\n      orgSlug,\n      repositories: orgSlug === this.state.orgSlug ? this.state.repositories : undefined,\n      repositoriesLoading: true,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesError(err: Error) {\n    this.state = {\n      ...this.state,\n      repositories: undefined,\n      repositoriesLoading: false,\n      repositoriesError: err,\n    };\n    this.trigger(this.state);\n  },\n\n  loadRepositoriesSuccess(data: Repository[]) {\n    this.state = {\n      ...this.state,\n      repositories: data,\n      repositoriesLoading: false,\n      repositoriesError: undefined,\n    };\n    this.trigger(this.state);\n  },\n\n  get() {\n    return {...this.state};\n  },\n};\n\nconst RepositoryStore = createStore(makeSafeRefluxStore(storeConfig));\nexport default RepositoryStore;\n","import {Component} from 'react';\n\nimport {getRepositories} from 'sentry/actionCreators/repositories';\nimport RepositoryActions from 'sentry/actions/repositoryActions';\nimport {Client} from 'sentry/api';\nimport RepositoryStore from 'sentry/stores/repositoryStore';\nimport {Organization, Repository} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype DependentProps = {\n  api: Client;\n  organization: Organization;\n};\n\ntype InjectedProps = {\n  repositories?: Repository[];\n  repositoriesError?: Error;\n  repositoriesLoading?: boolean;\n};\n\nconst INITIAL_STATE: InjectedProps = {\n  repositories: undefined,\n  repositoriesLoading: undefined,\n  repositoriesError: undefined,\n};\n\nfunction withRepositories<P extends DependentProps>(\n  WrappedComponent: React.ComponentType<P>\n) {\n  class WithRepositories extends Component<P & DependentProps, InjectedProps> {\n    static displayName = `withRepositories(${getDisplayName(WrappedComponent)})`;\n\n    constructor(props: P & DependentProps, context: any) {\n      super(props, context);\n\n      const {organization} = this.props;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      if (repoData.orgSlug !== orgSlug) {\n        RepositoryActions.resetRepositories();\n      }\n\n      this.state =\n        repoData.orgSlug === orgSlug\n          ? {...INITIAL_STATE, ...repoData}\n          : {...INITIAL_STATE};\n    }\n\n    componentDidMount() {\n      // XXX(leedongwei): Do not move this function call unless you modify the\n      // unit test named \"prevents repeated calls\"\n      this.fetchRepositories();\n    }\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n    unsubscribe = RepositoryStore.listen(() => this.onStoreUpdate(), undefined);\n\n    fetchRepositories() {\n      const {api, organization} = this.props;\n      const orgSlug = organization.slug;\n      const repoData = RepositoryStore.get();\n\n      // XXX(leedongwei): Do not check the orgSlug here. It would have been\n      // verified at `getInitialState`. The short-circuit hack in actionCreator\n      // does not update the orgSlug in the store.\n      if (\n        (!repoData.repositories && !repoData.repositoriesLoading) ||\n        repoData.repositoriesError\n      ) {\n        getRepositories(api, {orgSlug});\n      }\n    }\n\n    onStoreUpdate() {\n      const repoData = RepositoryStore.get();\n      this.setState({...repoData});\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} {...this.state} />;\n    }\n  }\n\n  return WithRepositories;\n}\n\nexport default withRepositories;\n","import * as Sentry from '@sentry/react';\n\nimport RepositoryActions from 'sentry/actions/repositoryActions';\nimport {Client} from 'sentry/api';\nimport RepositoryStore from 'sentry/stores/repositoryStore';\nimport {Repository} from 'sentry/types';\n\ntype ParamsGet = {\n  orgSlug: string;\n};\n\nexport function getRepositories(api: Client, params: ParamsGet) {\n  const {orgSlug} = params;\n  const path = `/organizations/${orgSlug}/repos/`;\n\n  // HACK(leedongwei): Actions fired by the ActionCreators are queued to\n  // the back of the event loop, allowing another getRepo for the same\n  // repo to be fired before the loading state is updated in store.\n  // This hack short-circuits that and update the state immediately.\n  RepositoryStore.state.repositoriesLoading = true;\n  RepositoryActions.loadRepositories(orgSlug);\n\n  return api\n    .requestPromise(path, {\n      method: 'GET',\n    })\n    .then((res: Repository[]) => {\n      RepositoryActions.loadRepositoriesSuccess(res);\n    })\n    .catch(err => {\n      RepositoryActions.loadRepositoriesError(err);\n      Sentry.withScope(scope => {\n        scope.setLevel('warning');\n        scope.setFingerprint(['getRepositories-action-creator']);\n        Sentry.captureException(err);\n      });\n    });\n}\n"],"names":["getProjectRelease","api","params","orgSlug","projectSlug","releaseVersion","path","encodeURIComponent","ReleaseStore","getReleaseStoreKey","ReleaseActions","requestPromise","method","then","res","catch","err","status","Sentry","scope","setLevel","setFingerprint","getReleaseDeploys","archiveRelease","addLoadingMessage","t","data","ReleaseStatus","projects","version","release","addSuccessMessage","error","addErrorMessage","responseJSON","detail","restoreRelease","createActions","unknownUser","id","name","username","email","avatarUrl","avatar","avatarUuid","avatarType","ip_address","LastCommit","commit","headerClass","commitAuthor","author","className","user","message","firstLine","split","length","truncated","substr","words","pop","join","renderMessage","date","dateCreated","p","theme","white","overflowEllipsis","gray200","fontSizeSmall","VersionHoverCard","Component","visible","toggleHovercard","this","setState","getRepoLink","organization","props","slug","header","body","ConnectRepo","href","priority","getBody","deploys","undefined","defined","lastCommit","recentDeploysByEnvironment","reduce","dbe","deploy","dateFinished","environment","hasOwnProperty","mostRecentDeploySlice","Object","keys","slice","HeaderWrapper","VersionWrapper","StyledVersion","truncate","anchor","value","ClipboardIconWrapper","size","newGroups","style","textAlign","commitCount","authors","users","avatarSize","tooltipOptions","container","typeMembers","map","env","idx","position","VersionRepoLabel","StyledTimeSince","render","deploysLoading","deploysError","releaseLoading","releaseError","repositories","repositoriesLoading","repositoriesError","loading","hasRepos","mini","renderObj","children","withApi","WrappedComponent","WithRelease","constructor","context","super","onStoreUpdate","releaseData","state","componentDidMount","fetchRelease","fetchDeploys","componentWillUnmount","unsubscribe","getDisplayName","withRelease","withRepositories","space","RepoLabel","TimeSince","gray300","Version","storeConfig","Map","listenables","unsubscribeListeners","init","push","listenTo","OrganizationActions","updateOrganization","reset","trigger","org","loadRelease","releaseKey","loadReleaseError","loadReleaseSuccess","loadDeploys","loadDeploysError","loadDeploysSuccess","get","createStore","makeSafeRefluxStore","RepoActions","resetRepositories","loadRepositories","loadRepositoriesError","loadRepositoriesSuccess","INITIAL_STATE","WithRepositories","RepositoryStore","repoData","RepositoryActions","fetchRepositories","getRepositories"],"sourceRoot":""}