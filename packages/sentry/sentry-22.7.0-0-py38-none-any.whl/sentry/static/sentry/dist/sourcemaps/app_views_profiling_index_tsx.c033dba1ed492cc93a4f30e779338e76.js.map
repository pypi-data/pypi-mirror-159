{"version":3,"file":"chunks/app_views_profiling_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"20BAgBA,SAASA,IACP,OACE,QAAC,KAAD,WACE,QAAC,IAAD,CAAOC,KAAK,UAAZ,UAAuBC,EAAAA,EAAAA,GAAE,6CAkB/B,SAASC,EAAT,GAA6D,IAAjC,aAACC,EAAD,SAAeC,GAAkB,EAC3D,MAAMC,GAAMC,EAAAA,EAAAA,MAELC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAmC,CACzET,KAAM,aAIRU,EAAAA,EAAAA,YAAU,KACRF,EAAgB,CAACR,KAAM,aACvBW,EAAAA,EAAAA,IAAaN,EAAK,CAChBO,eAAgBT,EAAaU,GAC7BC,QAAS,yBAERC,MAAKC,IACJR,EAAgB,CAACR,KAAM,WAAYgB,KAAAA,OAEpCC,OAAMC,IACLC,EAAAA,GAAwBD,GACxBV,EAAgB,CAACR,KAAM,UAAWoB,OAAOnB,EAAAA,EAAAA,GAAE,4CAE9C,CAACI,EAAKF,IAGT,MAAMkB,GAAgBC,EAAAA,EAAAA,cACnBC,IACCf,EAAgB,CAACR,KAAM,WAAYgB,KAAM,CAACQ,cAAeC,KAAKC,UAC9DC,EAAAA,EAAAA,GAA4B,oCAAqC,CAC/DC,OAAQL,EACRpB,aAAAA,KAGK0B,EAAAA,EAAAA,IAAcxB,EAAK,CACxBS,QAAS,uBACTF,eAAgBT,EAAaU,GAI7BU,OAAQ,gBAGZ,CAACpB,EAAcE,IAGXyB,GAAaR,EAAAA,EAAAA,cAAY,KAC7BD,EAAc,UACb,CAACA,IAEEU,GAAgBT,EAAAA,EAAAA,cAAY,KAChCD,EAAc,eACb,CAACA,IAEJ,OACE,QAAC,IAAD,CACEW,SAAS,kCACTC,SAAU,CAAC,aACX9B,aAAcA,EACd+B,eAAgBnC,EAJlB,SAMyB,YAAtBQ,EAAaP,MACZ,QAAC,IAAD,KAzE+BmC,EA0EC5B,EAzEnB,aAAf4B,EAAMnC,MACoC,iBAArC,UAAOmC,EAAMnB,YAAb,aAAO,EAAYQ,gBAyEtB,QAAC,IAAD,CACErB,aAAcA,EACdiC,eAAgBL,EAChBM,YAAaP,IAGf1B,KAjFR,IAAuC+B,EACN,EATxBpC,EAAAA,YAAAA,iBAqBAG,EAAAA,YAAAA,qBA0ET,SAAeoC,EAAAA,EAAAA,GAAiBpC","sources":["webpack:///./app/views/profiling/index.tsx"],"sourcesContent":["import {useCallback, useEffect, useState} from 'react';\nimport * as Sentry from '@sentry/react';\n\nimport {PromptData, promptsCheck, promptsUpdate} from 'sentry/actionCreators/prompts';\nimport Feature from 'sentry/components/acl/feature';\nimport Alert from 'sentry/components/alert';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport {Organization, RequestState} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport useApi from 'sentry/utils/useApi';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport ProfilingOnboarding from './profilingOnboarding';\n\nfunction renderNoAccess() {\n  return (\n    <PageContent>\n      <Alert type=\"warning\">{t(\"You don't have access to this feature\")}</Alert>\n    </PageContent>\n  );\n}\n\nfunction shouldShowProfilingOnboarding(state: RequestState<PromptData>): boolean {\n  if (state.type === 'resolved') {\n    return typeof state.data?.dismissedTime !== 'number';\n  }\n\n  return false;\n}\n\ntype Props = {\n  children: React.ReactChildren;\n  organization: Organization;\n};\n\nfunction ProfilingContainer({organization, children}: Props) {\n  const api = useApi();\n\n  const [requestState, setRequestState] = useState<RequestState<PromptData>>({\n    type: 'initial',\n  });\n\n  // Fetch prompt data and see if we need to show the onboarding.\n  useEffect(() => {\n    setRequestState({type: 'loading'});\n    promptsCheck(api, {\n      organizationId: organization.id,\n      feature: 'profiling_onboarding',\n    })\n      .then(data => {\n        setRequestState({type: 'resolved', data});\n      })\n      .catch(e => {\n        Sentry.captureException(e);\n        setRequestState({type: 'errored', error: t('Error: Unable to load prompt data')});\n      });\n  }, [api, organization]);\n\n  // Eagerly update state and update check\n  const dismissPrompt = useCallback(\n    (status: 'done' | 'dismissed') => {\n      setRequestState({type: 'resolved', data: {dismissedTime: Date.now()}});\n      trackAdvancedAnalyticsEvent('profiling_views.onboarding_action', {\n        action: status,\n        organization,\n      });\n\n      return promptsUpdate(api, {\n        feature: 'profiling_onboarding',\n        organizationId: organization.id,\n        // This will always send dismissed, becuse we dont actually\n        // care about the snooze mechanism. It would be awkward to suddenly\n        // creep a full page into view.\n        status: 'dismissed',\n      });\n    },\n    [organization, api]\n  );\n\n  const handleDone = useCallback(() => {\n    dismissPrompt('done');\n  }, [dismissPrompt]);\n\n  const handleDismiss = useCallback(() => {\n    dismissPrompt('dismissed');\n  }, [dismissPrompt]);\n\n  return (\n    <Feature\n      hookName=\"feature-disabled:profiling-page\"\n      features={['profiling']}\n      organization={organization}\n      renderDisabled={renderNoAccess}\n    >\n      {requestState.type === 'loading' ? (\n        <LoadingIndicator />\n      ) : shouldShowProfilingOnboarding(requestState) ? (\n        <ProfilingOnboarding\n          organization={organization}\n          onDismissClick={handleDismiss}\n          onDoneClick={handleDone}\n        />\n      ) : (\n        children\n      )}\n    </Feature>\n  );\n}\n\nexport default withOrganization(ProfilingContainer);\n"],"names":["renderNoAccess","type","t","ProfilingContainer","organization","children","api","useApi","requestState","setRequestState","useState","useEffect","promptsCheck","organizationId","id","feature","then","data","catch","e","Sentry","error","dismissPrompt","useCallback","status","dismissedTime","Date","now","trackAdvancedAnalyticsEvent","action","promptsUpdate","handleDone","handleDismiss","hookName","features","renderDisabled","state","onDismissClick","onDoneClick","withOrganization"],"sourceRoot":""}