{"version":3,"file":"chunks/app_views_replays_replays_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"y+BAyBA,MAAMA,EAA8B,IAAIC,OACrC,IAAGC,EAAAA,QAAuBC,EAAAA,KAC3B,KAiBF,SAASC,EAAUC,GACjB,MAAM,eACJC,EADI,aAEJC,EAFI,KAGJC,EAHI,SAIJC,EAJI,OAKJC,EALI,WAMJC,EANI,yBAOJC,EAPI,cAQJC,GACER,EAEES,GAAMC,EAAAA,EAAAA,MAEZC,EAAAA,EAAAA,YAAU,KAAM,QAEd,aAAAC,EAAoBC,OAAMC,aAA1B,mBAEC,CAACR,IAIJ,MAAMM,EAAsBG,GAAAA,EAC1B,CAACC,EAAKC,EAAOC,KACX,MAAMC,EAAoBb,MAAAA,OAAJ,EAAIA,EAAmCc,IAAIC,QAEjE,OAAIC,EAAAA,EAAAA,IAAiBN,EAAIO,OAAQC,EAAAA,EAAAA,IAAcR,EAAIO,KAG1CE,QAAQC,QAAQ,KAGlBC,EAAAA,EAAAA,IACLlB,EACAP,EAAa0B,KACbZ,EAAIO,IACJN,EACAE,EACAD,GAGA,EAGAX,GACAsB,MACAC,GACEC,GAAAA,CAAQD,EAAQE,QAAO,QAAC,KAACC,GAAF,SAAYC,EAAAA,EAAAA,IAAQD,MAAOb,KAAI,QAAC,KAACa,GAAF,SAAYA,QACpE,KACE,MAAM,IAAIE,MAAM,4CAItB,CAAC,EAAOlB,KAAR,IAAC,IAACM,GAAF,QAAmB,GAAEA,KAAON,OAGxBmB,EACJC,IAIA,MAAMC,EAAejC,EACjBkC,OAAOC,YACLnC,EACG2B,QACCS,IACGF,OAAOG,KAAKC,EAAAA,IAAYC,SAASH,EAAKI,UAAWC,EAAAA,EAAAA,IAAWL,EAAKI,SAErEzB,KAAIqB,GAAQ,CAACA,EAAKI,MAAO,CAACtB,IAAKkB,EAAKI,MAAOZ,KAAMQ,EAAKI,WAE3D,GAEEE,EAAY7C,EAAa8C,SAASJ,SAAS,oBAC7CL,OAAOU,OAAO,GAAIZ,EAAcM,EAAAA,GAAYL,GAC5CY,GAAAA,CAAKP,EAAAA,GAAYQ,EAAAA,IAEfC,EAAWH,GAAAA,CAAO,GAAI9C,EAAM4C,EAAWM,EAAAA,IAQ7C,OAPAD,EAASE,IAAM,CACb/B,IAAK,MACLU,KAAM,eACNsB,OAAQhB,OAAOG,KAAKU,GACpBI,YAAY,GAGPN,GAAAA,CAAKE,EAAUhD,MAAAA,EAAAA,EAAY,KAGpC,OACE,QAAC,IAAD,UACG,QAAC,aAACiC,GAAF,SACC,QAAC,IAAD,CACEoB,mBAAiB,EACjBC,gBAAiBC,EAAAA,GAAAA,MACjBC,eAAgBhD,EAChBiD,cAAezB,EAAWC,GAC1ByB,aAAc7C,GAELA,EAAM8C,QAAQpE,EAA6B,IAEpDM,eAAgBA,EAChB+D,oBAAkB,EAClBxD,cAAeA,MAAAA,EAAAA,EAAiB,IAChCyD,YAAaA,EAAAA,MACTjE,OAvGLD,EAAAA,YAAAA,YA8GT,SAAemE,EAAAA,EAAAA,GAASnE,I,kVCxIxB,SAASoE,EACPC,GAEA,OAAO7B,OAAOC,YACZD,OAAO8B,QAAQD,GAAShD,KAAI,IAAkB,IAAhBG,EAAK+C,GAAW,EAK5C,MAAO,CAAC/C,EAJsB,CAC5BU,KAAMqC,EAAMrC,KACZV,IAAAA,QAOR,MAAMgD,EAAsBJ,EAAwBK,EAAAA,IAC9CC,EAAmBN,EAAwBO,EAAAA,IAE1C,SAASC,IACd,MAAO,IAAIF,KAAqBF,GAWlC,SAASK,EAAT,GAAyC,IAAnB,SAACC,GAAkB,EACvC,MAAMxC,EAAesC,IACrB,OAAO,QAAC,EAAAG,SAAD,UAAWD,EAAS,CAACxC,aAAAA,MAFrBuC,EAAAA,YAAAA,eAKT,W,gKChDO,MAAMF,EAA6C,CACxD,CAACK,EAAAA,GAAAA,IAAc,CACbnD,KAAM,KACNK,MAAM+C,EAAAA,EAAAA,GAAE,eACRC,QAAS,KACTC,aAAaF,EAAAA,EAAAA,GACX,iFAEFG,cAAe,IACfC,MAAMC,EAAAA,EAAAA,IAAgBN,EAAAA,GAAAA,KAExB,CAACA,EAAAA,GAAAA,KAAe,CACdnD,KAAM,MACNK,MAAM+C,EAAAA,EAAAA,GAAE,0BACRC,QAAS,MACTC,aAAaF,EAAAA,EAAAA,GACX,2EAEFG,cAAe,IACfC,MAAMC,EAAAA,EAAAA,IAAgBN,EAAAA,GAAAA,MAExB,CAACA,EAAAA,GAAAA,KAAe,CACdnD,KAAM,MACNK,MAAM+C,EAAAA,EAAAA,GAAE,4BACRC,QAAS,MACTC,aAAaF,EAAAA,EAAAA,GACX,6EAEFG,cAAe,IACfC,MAAMC,EAAAA,EAAAA,IAAgBN,EAAAA,GAAAA,MAExB,CAACA,EAAAA,GAAAA,KAAe,CACdnD,KAAM,MACNK,MAAM+C,EAAAA,EAAAA,GAAE,qBACRC,QAAS,MACTC,aAAaF,EAAAA,EAAAA,GACX,gFAEFG,cAAe,IACfC,MAAMC,EAAAA,EAAAA,IAAgBN,EAAAA,GAAAA,MAExB,CAACA,EAAAA,GAAAA,KAAe,CACdnD,KAAM,MACNK,MAAM+C,EAAAA,EAAAA,GAAE,2BACRC,QAAS,MACTC,aAAaF,EAAAA,EAAAA,GACX,6EAEFG,cAAe,IACfC,MAAMC,EAAAA,EAAAA,IAAgBN,EAAAA,GAAAA,MAExB,CAACA,EAAAA,GAAAA,MAAgB,CACfnD,KAAM,OACNK,MAAM+C,EAAAA,EAAAA,GAAE,sBACRC,QAAS,OACTC,aAAaF,EAAAA,EAAAA,GACX,0FAEFG,cAAe,IACfC,MAAMC,EAAAA,EAAAA,IAAgBN,EAAAA,GAAAA,OAExB,CAACA,EAAAA,GAAAA,aAAuB,CACtBnD,KAAM,mBACNK,MAAM+C,EAAAA,EAAAA,GAAE,gBACRC,QAAS,KACTC,aAAaF,EAAAA,EAAAA,GACX,4FAEFG,cAAe,IACfC,MAAMC,EAAAA,EAAAA,IAAgBN,EAAAA,GAAAA,eAIbP,EAAmD,CAC9D,CAACc,EAAAA,GAAAA,cAA2B,CAC1B1D,KAAM,iBACNK,MAAM+C,EAAAA,EAAAA,GAAE,kBACRE,aAAaF,EAAAA,EAAAA,GACX,0EAEFI,MAAMC,EAAAA,EAAAA,IAAgBC,EAAAA,GAAAA,eAExB,CAACA,EAAAA,GAAAA,cAA2B,CAC1B1D,KAAM,iBACNK,MAAM+C,EAAAA,EAAAA,GAAE,kBACRE,aAAaF,EAAAA,EAAAA,GACX,mFAEFI,MAAMC,EAAAA,EAAAA,IAAgBC,EAAAA,GAAAA,eAExB,CAACA,EAAAA,GAAAA,aAA0B,CACzB1D,KAAM,eACNK,MAAM+C,EAAAA,EAAAA,GAAE,gBACRE,aAAaF,EAAAA,EAAAA,GACX,kFAEFI,MAAMC,EAAAA,EAAAA,IAAgBC,EAAAA,GAAAA,cAExB,CAACA,EAAAA,GAAAA,YAAyB,CACxB1D,KAAM,cACNK,MAAM+C,EAAAA,EAAAA,GAAE,eACRE,aAAaF,EAAAA,EAAAA,GACX,sFAEFI,MAAMC,EAAAA,EAAAA,IAAgBC,EAAAA,GAAAA,aAExB,CAACA,EAAAA,GAAAA,cAA2B,CAC1B1D,KAAM,gBACNK,MAAM+C,EAAAA,EAAAA,GAAE,iBACRE,aAAaF,EAAAA,EAAAA,GACX,0FAEFI,MAAMC,EAAAA,EAAAA,IAAgBC,EAAAA,GAAAA,eAExB,CAACA,EAAAA,GAAAA,gBAA6B,CAC5B1D,KAAM,mBACNK,MAAM+C,EAAAA,EAAAA,GAAE,oBACRE,aAAaF,EAAAA,EAAAA,GACX,uGAEFI,MAAMC,EAAAA,EAAAA,IAAgBC,EAAAA,GAAAA,iBAExB,CAACA,EAAAA,GAAAA,kBAA+B,CAC9B1D,KAAM,qBACNK,MAAM+C,EAAAA,EAAAA,GAAE,sBACRE,aAAaF,EAAAA,EAAAA,GACX,2GAEFI,MAAMC,EAAAA,EAAAA,IAAgBC,EAAAA,GAAAA,mBAExB,CAACA,EAAAA,GAAAA,YAAyB,CACxB1D,KAAM,cACNK,MAAM+C,EAAAA,EAAAA,GAAE,UACRE,aAAaF,EAAAA,EAAAA,GACX,+EAEFI,MAAMC,EAAAA,EAAAA,IAAgBC,EAAAA,GAAAA,aAExB,CAACA,EAAAA,GAAAA,gBAA6B,CAC5B1D,KAAM,mBACNK,MAAM+C,EAAAA,EAAAA,GAAE,oBACRE,aAAaF,EAAAA,EAAAA,GACX,iGAEFI,MAAMC,EAAAA,EAAAA,IAAgBC,EAAAA,GAAAA,iBAExB,CAACA,EAAAA,GAAAA,kBAA+B,CAC9B1D,KAAM,qBACNK,MAAM+C,EAAAA,EAAAA,GAAE,sBACRE,aAAaF,EAAAA,EAAAA,GACX,qGAEFI,MAAMC,EAAAA,EAAAA,IAAgBC,EAAAA,GAAAA,mBAExB,CAACA,EAAAA,GAAAA,iBAA8B,CAC7B1D,KAAM,mBACNK,MAAM+C,EAAAA,EAAAA,GAAE,oBACRE,aAAaF,EAAAA,EAAAA,GACX,+FAEFI,MAAMC,EAAAA,EAAAA,IAAgBC,EAAAA,GAAAA,mBAInB,IAAKC,G,SAAAA,GAAAA,EAAAA,OAAAA,SAAAA,EAAAA,KAAAA,OAAAA,EAAAA,MAAAA,QAAAA,EAAAA,QAAAA,UAAAA,EAAAA,OAAAA,SAAAA,EAAAA,GAAAA,K,CAAAA,IAAAA,EAAAA,M,kZC7HZ,QA1BA,SAA+CC,GAC7C,MAAMC,UAAiBC,EAAAA,UAAmD,uDAGzD,CACbvF,KAAMwF,EAAAA,EAAAA,gBAJgE,0BAW1DA,EAAAA,EAAAA,QACXxF,GAAwByF,KAAKC,SAAS,CAAC1F,KAAAA,UACxC2F,IANFC,uBACEH,KAAKI,cAQPC,SACE,MAAM,KAAC9F,KAASH,GAAS4F,KAAK5F,MAC9B,OAAO,QAACwF,EAAD,CAAwBrF,KAAMA,MAAAA,EAAAA,EAAQyF,KAAKM,MAAM/F,QAASH,KAIrE,OAtBMyF,EADiF,+BACjFA,EADiF,cAE/D,aAAWU,EAAAA,EAAAA,GAAeX,OAqB3CC,I,y0CCvBT,SAASW,EAAT,GAAyE,IAAjD,aAAClG,EAAD,kBAAemG,EAAf,MAAkCpF,GAAe,EACvE,OACE,QAACqF,EAAD,WACE,QAACC,EAAD,YACE,QAAC,IAAD,CAAeC,WAAS,EAAxB,WACE,QAAC,IAAD,CAAmBC,oBAAqB,CAAC,aACzC,QAAC,IAAD,CAAuBA,oBAAqB,CAAC,aAC7C,QAAC,IAAD,CAAgBC,cAAc,OAAOD,oBAAqB,CAAC,gBAE7D,QAAC,IAAD,CACEvG,aAAcA,EACdyG,aAAa,GACb1F,MAAOA,EACP2F,aAAa5B,EAAAA,EAAAA,GAAE,UACf6B,SAAUR,SAdXD,EAAAA,YAAAA,iBAqBT,MAAME,GAAkB,OAAO,MAAP,sBAAH,qBAEZQ,EAAAA,EAAAA,GAAM,GAFM,mBAGFA,EAAAA,EAAAA,GAAM,GAHJ,KAMfP,GAAkB,OAAO,MAAP,sBAAH,4FAGZO,EAAAA,EAAAA,GAAM,GAHM,8BAKFA,EAAAA,EAAAA,GAAM,GALJ,wBAOEC,GAAKA,EAAEC,MAAMC,YAAYC,OAP3B,4CAYrB,I,+CC5BA,MAAMC,EAAU,EAACnC,EAAAA,EAAAA,GAAE,YAAYA,EAAAA,EAAAA,GAAE,YAEjC,SAASoC,IACP,MAAMC,GAAWC,EAAAA,EAAAA,KACXpH,GAAeqH,EAAAA,EAAAA,MACf,UAACC,IAAaC,EAAAA,EAAAA,KACdC,GAAgBC,EAAAA,EAAAA,GAAU,eAAcX,EAAAA,GAAAA,YAAAA,WAEvCY,EAAaC,IAAkBC,EAAAA,EAAAA,WACpCC,EAAAA,EAAAA,GAAsBV,EAASpG,MAAMA,SAGvCN,EAAAA,EAAAA,YAAU,KACRkH,GAAeE,EAAAA,EAAAA,GAAsBV,EAASpG,MAAMA,UACnD,CAACoG,EAASpG,MAAMA,QAEnB,MA+BMoF,EAAqBpF,IACzB+G,EAAAA,eAAAA,KAAoB,CAClBC,SAAUZ,EAASY,SACnBhH,MAAO,IACFoG,EAASpG,MACZiH,YAAQpC,EACR7E,MAAOI,OAAOJ,GAAOkH,aAAUrC,OAK/B,MAAC7E,GAASoG,GACTa,OAAQE,EAASC,KAAMC,KAAUC,GAAgBtH,EAElDuH,EAEF,CACF3F,OAAOkF,EAAAA,EAAAA,GAAsB9G,EAAMuH,OAAS,cAGxCC,EAAiBD,EAAK3F,MAAM6F,WAAW,KAAO,OAAS,KACvDC,GAAY,QAAC,KAAD,CAAWC,MAAM,UAAUC,KAAK,KAAKC,UAAWL,IAElE,OACE,QAAC,EAAA3D,SAAD,YACE,QAACiE,EAAD,WACE,QAACC,EAAD,WACE,0BACGhE,EAAAA,EAAAA,GAAE,WADL,KACiB,QAAC,IAAD,CAAcI,KAAK,kBAIxC,QAAC,IAAD,WACE,QAAC6D,EAAD,WACE,QAAC,IAAD,CACEC,UAlEW,MACnB,MAAM,MAACjI,GAASoG,EACV8B,EAA6B,CACjCC,GAAI,GACJnH,KAAM,GACNoH,QAAS,EACThJ,OAAQ,CAEN,UACA,UACA,YACA,MACA,eACA,aACA,UACA,kBACA,YACA,iBAEFiJ,SAASvB,EAAAA,EAAAA,GAAsB9G,EAAMuH,OAAS,aAC9Ce,YAAa/B,EAAUgC,aACvBC,SAAUjC,EAAUiC,SACpBxI,MAAQ,uBAAsB2G,KAMhC,OAHIJ,EAAUkC,SAASC,SACrBR,EAAiBS,MAAQpC,EAAUkC,SAASC,QAEvCE,EAAAA,GAAAA,yBAAmCV,EAAkB9B,IAsCzCyC,GACXzC,SAAUA,EACV0C,QAAS7J,EAAa0B,KACtBoI,MAAO,GAJT,SAMGC,IAAQ,MACP,OACE,QAAC,EAAAnF,SAAD,YACE,QAAC,EAAD,CACE7D,MAAO2G,EACP1H,aAAcA,EACdmG,kBAAmBA,KAErB,QAAC6D,EAAD,CACEC,UAAWF,EAAKE,UAChBC,QAAyC,KAAhC,UAAAH,EAAKI,iBAAL,eAAgBJ,KAAKK,QAC9BC,QAAS,IACF7C,EAEDP,EADAA,EAAQnF,QAAOwI,GAAOA,KAAQxF,EAAAA,EAAAA,GAAE,cAEpC,QAACyF,EAAD,CAEEC,KAAK,eACL,YACGlC,EAAK3F,MAAM8H,SAAS,aAEF,eAAfnC,EAAK3F,MACL,aACA,YAHA,OAKN+H,GAAI,CACF3C,SAAUZ,EAASY,SACnBhH,MAAO,IACFsH,EAEHC,KACiB,eAAfA,EAAK3F,MAAyB,YAAc,eAhBpD,WAoBGmC,EAAAA,EAAAA,GAAE,aApBL,IAoBoBwD,EAAK3F,MAAM8H,SAAS,cAAgBhC,IAnBlD,cAqBN3D,EAAAA,EAAAA,GAAE,aACFA,EAAAA,EAAAA,GAAE,WA9BN,SAiCGiF,EAAKI,WACJ,QAAC,IAAD,CACEQ,MAAM,KACNC,mBAAiB,EACjBC,WAAYd,EAAKI,UAAUJ,OAE3B,QAEN,QAAC,IAAD,CAAYe,UAAWf,EAAKe,yBAtIrC5D,EAAAA,YAAAA,UAiJT,MAAM2B,GAAmB,OAAOkC,EAAAA,GAAP,qBAAH,qBACAlE,GAAKA,EAAEC,MAAMkE,YADb,kCAGVpE,EAAAA,EAAAA,GAAM,GAHI,KAGEA,EAAAA,EAAAA,GAAM,GAHR,KAGcA,EAAAA,EAAAA,GAAM,GAHpB,KAG0BA,EAAAA,EAAAA,GAAM,GAHhC,KAMhBmC,GAAoB,OAAOkC,EAAAA,GAAP,qBAAH,2BACKpE,GAAKA,EAAEC,MAAMoE,SADlB,sBAEDrE,GAAKA,EAAEC,MAAMqE,YAFZ,KAKjBnB,GAAmB,OAAOoB,EAAAA,GAAP,qBAAH,4GAGCvE,GAAKA,EAAEC,MAAMC,YAAYC,OAH1B,gFAQhB8B,GAAc,OAAOuC,EAAAA,EAAP,qBAAH,gGAOXd,GAAW,OAAOe,EAAAA,EAAP,qBAAH,wFAYd","sources":["webpack:///./app/components/events/searchBar.tsx","webpack:///./app/utils/measurements/measurements.tsx","webpack:///./app/utils/performance/vitals/constants.tsx","webpack:///./app/utils/withTags.tsx","webpack:///./app/views/replays/filters.tsx","webpack:///./app/views/replays/replays.tsx"],"sourcesContent":["import {useEffect} from 'react';\nimport assign from 'lodash/assign';\nimport flatten from 'lodash/flatten';\nimport memoize from 'lodash/memoize';\nimport omit from 'lodash/omit';\n\nimport {fetchTagValues} from 'sentry/actionCreators/tags';\nimport SmartSearchBar from 'sentry/components/smartSearchBar';\nimport {NEGATION_OPERATOR, SEARCH_WILDCARD} from 'sentry/constants';\nimport {Organization, SavedSearchType, TagCollection} from 'sentry/types';\nimport {defined} from 'sentry/utils';\nimport {\n  Field,\n  FIELD_TAGS,\n  getFieldDoc,\n  isAggregateField,\n  isEquation,\n  isMeasurement,\n  SEMVER_TAGS,\n  TRACING_FIELDS,\n} from 'sentry/utils/discover/fields';\nimport Measurements from 'sentry/utils/measurements/measurements';\nimport useApi from 'sentry/utils/useApi';\nimport withTags from 'sentry/utils/withTags';\n\nconst SEARCH_SPECIAL_CHARS_REGEXP = new RegExp(\n  `^${NEGATION_OPERATOR}|\\\\${SEARCH_WILDCARD}`,\n  'g'\n);\n\nexport type SearchBarProps = Omit<React.ComponentProps<typeof SmartSearchBar>, 'tags'> & {\n  organization: Organization;\n  tags: TagCollection;\n  fields?: Readonly<Field[]>;\n  includeSessionTagsValues?: boolean;\n  /**\n   * Used to define the max height of the menu in px.\n   */\n  maxMenuHeight?: number;\n  maxSearchItems?: React.ComponentProps<typeof SmartSearchBar>['maxSearchItems'];\n  omitTags?: string[];\n  projectIds?: number[] | Readonly<number[]>;\n};\n\nfunction SearchBar(props: SearchBarProps) {\n  const {\n    maxSearchItems,\n    organization,\n    tags,\n    omitTags,\n    fields,\n    projectIds,\n    includeSessionTagsValues,\n    maxMenuHeight,\n  } = props;\n\n  const api = useApi();\n\n  useEffect(() => {\n    // Clear memoized data on mount to make tests more consistent.\n    getEventFieldValues.cache.clear?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [projectIds]);\n\n  // Returns array of tag values that substring match `query`; invokes `callback`\n  // with data when ready\n  const getEventFieldValues = memoize(\n    (tag, query, endpointParams): Promise<string[]> => {\n      const projectIdStrings = (projectIds as Readonly<number>[])?.map(String);\n\n      if (isAggregateField(tag.key) || isMeasurement(tag.key)) {\n        // We can't really auto suggest values for aggregate fields\n        // or measurements, so we simply don't\n        return Promise.resolve([]);\n      }\n\n      return fetchTagValues(\n        api,\n        organization.slug,\n        tag.key,\n        query,\n        projectIdStrings,\n        endpointParams,\n\n        // allows searching for tags on transactions as well\n        true,\n\n        // allows searching for tags on sessions as well\n        includeSessionTagsValues\n      ).then(\n        results =>\n          flatten(results.filter(({name}) => defined(name)).map(({name}) => name)),\n        () => {\n          throw new Error('Unable to fetch event field values');\n        }\n      );\n    },\n    ({key}, query) => `${key}-${query}`\n  );\n\n  const getTagList = (\n    measurements: Parameters<\n      React.ComponentProps<typeof Measurements>['children']\n    >[0]['measurements']\n  ) => {\n    const functionTags = fields\n      ? Object.fromEntries(\n          fields\n            .filter(\n              item =>\n                !Object.keys(FIELD_TAGS).includes(item.field) && !isEquation(item.field)\n            )\n            .map(item => [item.field, {key: item.field, name: item.field}])\n        )\n      : {};\n\n    const fieldTags = organization.features.includes('performance-view')\n      ? Object.assign({}, measurements, FIELD_TAGS, functionTags)\n      : omit(FIELD_TAGS, TRACING_FIELDS);\n\n    const combined = assign({}, tags, fieldTags, SEMVER_TAGS);\n    combined.has = {\n      key: 'has',\n      name: 'Has property',\n      values: Object.keys(combined),\n      predefined: true,\n    };\n\n    return omit(combined, omitTags ?? []);\n  };\n\n  return (\n    <Measurements>\n      {({measurements}) => (\n        <SmartSearchBar\n          hasRecentSearches\n          savedSearchType={SavedSearchType.EVENT}\n          onGetTagValues={getEventFieldValues}\n          supportedTags={getTagList(measurements)}\n          prepareQuery={query => {\n            // Prepare query string (e.g. strip special characters like negation operator)\n            return query.replace(SEARCH_SPECIAL_CHARS_REGEXP, '');\n          }}\n          maxSearchItems={maxSearchItems}\n          excludeEnvironment\n          maxMenuHeight={maxMenuHeight ?? 300}\n          getFieldDoc={getFieldDoc}\n          {...props}\n        />\n      )}\n    </Measurements>\n  );\n}\n\nexport default withTags(SearchBar);\n","import {Fragment} from 'react';\n\nimport {MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {\n  MOBILE_VITAL_DETAILS,\n  WEB_VITAL_DETAILS,\n} from 'sentry/utils/performance/vitals/constants';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\nexport type Measurement = {\n  key: string;\n  name: string;\n};\n\nexport type MeasurementCollection = Record<string, Measurement>;\n\ntype VitalType = WebVital | MobileVital;\n\nfunction measurementsFromDetails(\n  details: Partial<Record<VitalType, Vital>>\n): MeasurementCollection {\n  return Object.fromEntries(\n    Object.entries(details).map(([key, value]) => {\n      const newValue: Measurement = {\n        name: value.name,\n        key,\n      };\n      return [key, newValue];\n    })\n  );\n}\n\nconst MOBILE_MEASUREMENTS = measurementsFromDetails(MOBILE_VITAL_DETAILS);\nconst WEB_MEASUREMENTS = measurementsFromDetails(WEB_VITAL_DETAILS);\n\nexport function getMeasurements() {\n  return {...WEB_MEASUREMENTS, ...MOBILE_MEASUREMENTS};\n}\n\ntype ChildrenProps = {\n  measurements: MeasurementCollection;\n};\n\ntype Props = {\n  children: (props: ChildrenProps) => React.ReactNode;\n};\n\nfunction Measurements({children}: Props) {\n  const measurements = getMeasurements();\n  return <Fragment>{children({measurements})}</Fragment>;\n}\n\nexport default Measurements;\n","import {t} from 'sentry/locale';\nimport {measurementType, MobileVital, WebVital} from 'sentry/utils/discover/fields';\nimport {Vital} from 'sentry/utils/performance/vitals/types';\n\nexport const WEB_VITAL_DETAILS: Record<WebVital, Vital> = {\n  [WebVital.FP]: {\n    slug: 'fp',\n    name: t('First Paint'),\n    acronym: 'FP',\n    description: t(\n      'Render time of the first pixel loaded in the viewport (may overlap with FCP).'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FP),\n  },\n  [WebVital.FCP]: {\n    slug: 'fcp',\n    name: t('First Contentful Paint'),\n    acronym: 'FCP',\n    description: t(\n      'Render time of the first image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 3000,\n    type: measurementType(WebVital.FCP),\n  },\n  [WebVital.LCP]: {\n    slug: 'lcp',\n    name: t('Largest Contentful Paint'),\n    acronym: 'LCP',\n    description: t(\n      'Render time of the largest image, text or other DOM node in the viewport.'\n    ),\n    poorThreshold: 4000,\n    type: measurementType(WebVital.LCP),\n  },\n  [WebVital.FID]: {\n    slug: 'fid',\n    name: t('First Input Delay'),\n    acronym: 'FID',\n    description: t(\n      'Response time of the browser to a user interaction (clicking, tapping, etc).'\n    ),\n    poorThreshold: 300,\n    type: measurementType(WebVital.FID),\n  },\n  [WebVital.CLS]: {\n    slug: 'cls',\n    name: t('Cumulative Layout Shift'),\n    acronym: 'CLS',\n    description: t(\n      'Sum of layout shift scores that measure the visual stability of the page.'\n    ),\n    poorThreshold: 0.25,\n    type: measurementType(WebVital.CLS),\n  },\n  [WebVital.TTFB]: {\n    slug: 'ttfb',\n    name: t('Time to First Byte'),\n    acronym: 'TTFB',\n    description: t(\n      \"The time that it takes for a user's browser to receive the first byte of page content.\"\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.TTFB),\n  },\n  [WebVital.RequestTime]: {\n    slug: 'ttfb.requesttime',\n    name: t('Request Time'),\n    acronym: 'RT',\n    description: t(\n      'Captures the time spent making the request and receiving the first byte of the response.'\n    ),\n    poorThreshold: 600,\n    type: measurementType(WebVital.RequestTime),\n  },\n};\n\nexport const MOBILE_VITAL_DETAILS: Record<MobileVital, Vital> = {\n  [MobileVital.AppStartCold]: {\n    slug: 'app_start_cold',\n    name: t('App Start Cold'),\n    description: t(\n      'Cold start is a measure of the application start up time from scratch.'\n    ),\n    type: measurementType(MobileVital.AppStartCold),\n  },\n  [MobileVital.AppStartWarm]: {\n    slug: 'app_start_warm',\n    name: t('App Start Warm'),\n    description: t(\n      'Warm start is a measure of the application start up time while still in memory.'\n    ),\n    type: measurementType(MobileVital.AppStartWarm),\n  },\n  [MobileVital.FramesTotal]: {\n    slug: 'frames_total',\n    name: t('Total Frames'),\n    description: t(\n      'Total frames is a count of the number of frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesTotal),\n  },\n  [MobileVital.FramesSlow]: {\n    slug: 'frames_slow',\n    name: t('Slow Frames'),\n    description: t(\n      'Slow frames is a count of the number of slow frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesSlow),\n  },\n  [MobileVital.FramesFrozen]: {\n    slug: 'frames_frozen',\n    name: t('Frozen Frames'),\n    description: t(\n      'Frozen frames is a count of the number of frozen frames recorded within a transaction.'\n    ),\n    type: measurementType(MobileVital.FramesFrozen),\n  },\n  [MobileVital.FramesSlowRate]: {\n    slug: 'frames_slow_rate',\n    name: t('Slow Frames Rate'),\n    description: t(\n      'Slow Frames Rate is the percentage of frames recorded within a transaction that is considered slow.'\n    ),\n    type: measurementType(MobileVital.FramesSlowRate),\n  },\n  [MobileVital.FramesFrozenRate]: {\n    slug: 'frames_frozen_rate',\n    name: t('Frozen Frames Rate'),\n    description: t(\n      'Frozen Frames Rate is the percentage of frames recorded within a transaction that is considered frozen.'\n    ),\n    type: measurementType(MobileVital.FramesFrozenRate),\n  },\n  [MobileVital.StallCount]: {\n    slug: 'stall_count',\n    name: t('Stalls'),\n    description: t(\n      'Stalls is the number of times the application stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallCount),\n  },\n  [MobileVital.StallTotalTime]: {\n    slug: 'stall_total_time',\n    name: t('Total Stall Time'),\n    description: t(\n      'Stall Total Time is the total amount of time the application is stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallTotalTime),\n  },\n  [MobileVital.StallLongestTime]: {\n    slug: 'stall_longest_time',\n    name: t('Longest Stall Time'),\n    description: t(\n      'Stall Longest Time is the longest amount of time the application is stalled within a transaction.'\n    ),\n    type: measurementType(MobileVital.StallLongestTime),\n  },\n  [MobileVital.StallPercentage]: {\n    slug: 'stall_percentage',\n    name: t('Stall Percentage'),\n    description: t(\n      'Stall Percentage is the percentage of the transaction duration the application was stalled.'\n    ),\n    type: measurementType(MobileVital.StallPercentage),\n  },\n};\n\nexport enum Browser {\n  CHROME = 'Chrome',\n  EDGE = 'Edge',\n  OPERA = 'Opera',\n  FIREFOX = 'Firefox',\n  SAFARI = 'Safari',\n  IE = 'IE',\n}\n","import {Component} from 'react';\n\nimport TagStore from 'sentry/stores/tagStore';\nimport {TagCollection} from 'sentry/types';\nimport getDisplayName from 'sentry/utils/getDisplayName';\n\ntype InjectedTagsProps = {\n  tags: TagCollection;\n};\n\ntype State = {\n  tags: TagCollection;\n};\n\n/**\n * HOC for getting *only* tags from the TagStore.\n */\nfunction withTags<P extends InjectedTagsProps>(WrappedComponent: React.ComponentType<P>) {\n  class WithTags extends Component<Omit<P, keyof InjectedTagsProps>, State> {\n    static displayName = `withTags(${getDisplayName(WrappedComponent)})`;\n\n    state: State = {\n      tags: TagStore.getAllTags(),\n    };\n\n    componentWillUnmount() {\n      this.unsubscribe();\n    }\n\n    unsubscribe = TagStore.listen(\n      (tags: TagCollection) => this.setState({tags}),\n      undefined\n    );\n\n    render() {\n      const {tags, ...props} = this.props as P;\n      return <WrappedComponent {...({tags: tags ?? this.state.tags, ...props} as P)} />;\n    }\n  }\n\n  return WithTags;\n}\n\nexport default withTags;\n","import styled from '@emotion/styled';\n\nimport DatePageFilter from 'sentry/components/datePageFilter';\nimport EnvironmentPageFilter from 'sentry/components/environmentPageFilter';\nimport SearchBar from 'sentry/components/events/searchBar';\nimport PageFilterBar from 'sentry/components/organizations/pageFilterBar';\nimport ProjectPageFilter from 'sentry/components/projectPageFilter';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\n\ntype Props = {\n  handleSearchQuery: (query: string) => void;\n  organization: Organization;\n  query: string;\n};\n\nfunction ReplaysFilters({organization, handleSearchQuery, query}: Props) {\n  return (\n    <FilterContainer>\n      <SearchContainer>\n        <PageFilterBar condensed>\n          <ProjectPageFilter resetParamsOnChange={['cursor']} />\n          <EnvironmentPageFilter resetParamsOnChange={['cursor']} />\n          <DatePageFilter alignDropdown=\"left\" resetParamsOnChange={['cursor']} />\n        </PageFilterBar>\n        <SearchBar\n          organization={organization}\n          defaultQuery=\"\"\n          query={query}\n          placeholder={t('Search')}\n          onSearch={handleSearchQuery}\n        />\n      </SearchContainer>\n    </FilterContainer>\n  );\n}\n\nconst FilterContainer = styled('div')`\n  display: grid;\n  gap: ${space(1)};\n  margin-bottom: ${space(1)};\n`;\n\nconst SearchContainer = styled('div')`\n  display: inline-grid;\n  grid-template-columns: minmax(0, max-content) minmax(20rem, 1fr);\n  gap: ${space(1)};\n  width: 100%;\n  margin-bottom: ${space(1)};\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: minmax(0, 1fr);\n  }\n`;\n\nexport default ReplaysFilters;\n","import {Fragment, useEffect, useState} from 'react';\nimport {browserHistory} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport Link from 'sentry/components/links/link';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport PageHeading from 'sentry/components/pageHeading';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {PageContent, PageHeader} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport {NewQuery} from 'sentry/types';\nimport DiscoverQuery from 'sentry/utils/discover/discoverQuery';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {getQueryParamAsString} from 'sentry/utils/replays/getQueryParamAsString';\nimport theme from 'sentry/utils/theme';\nimport {useLocation} from 'sentry/utils/useLocation';\nimport useMedia from 'sentry/utils/useMedia';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport usePageFilters from 'sentry/utils/usePageFilters';\n\nimport ReplaysFilters from './filters';\nimport ReplayTable from './replayTable';\nimport {Replay} from './types';\n\nconst columns = [t('Session'), t('Project')];\n\nfunction Replays() {\n  const location = useLocation();\n  const organization = useOrganization();\n  const {selection} = usePageFilters();\n  const isScreenLarge = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const [searchQuery, setSearchQuery] = useState<string>(\n    getQueryParamAsString(location.query.query)\n  );\n\n  useEffect(() => {\n    setSearchQuery(getQueryParamAsString(location.query.query));\n  }, [location.query.query]);\n\n  const getEventView = () => {\n    const {query} = location;\n    const eventQueryParams: NewQuery = {\n      id: '',\n      name: '',\n      version: 2,\n      fields: [\n        // 'id' is always returned, don't need to list it here.\n        'eventID',\n        'project',\n        'timestamp',\n        'url',\n        'user.display',\n        'user.email',\n        'user.id',\n        'user.ip_address',\n        'user.name',\n        'user.username',\n      ],\n      orderby: getQueryParamAsString(query.sort) || '-timestamp',\n      environment: selection.environments,\n      projects: selection.projects,\n      query: `title:sentry-replay ${searchQuery}`,\n    };\n\n    if (selection.datetime.period) {\n      eventQueryParams.range = selection.datetime.period;\n    }\n    return EventView.fromNewQueryWithLocation(eventQueryParams, location);\n  };\n\n  const handleSearchQuery = (query: string) => {\n    browserHistory.push({\n      pathname: location.pathname,\n      query: {\n        ...location.query,\n        cursor: undefined,\n        query: String(query).trim() || undefined,\n      },\n    });\n  };\n\n  const {query} = location;\n  const {cursor: _cursor, page: _page, ...currentQuery} = query;\n\n  const sort: {\n    field: string;\n  } = {\n    field: getQueryParamAsString(query.sort) || '-timestamp',\n  };\n\n  const arrowDirection = sort.field.startsWith('-') ? 'down' : 'up';\n  const sortArrow = <IconArrow color=\"gray300\" size=\"xs\" direction={arrowDirection} />;\n\n  return (\n    <Fragment>\n      <StyledPageHeader>\n        <HeaderTitle>\n          <div>\n            {t('Replays')} <FeatureBadge type=\"alpha\" />\n          </div>\n        </HeaderTitle>\n      </StyledPageHeader>\n      <PageFiltersContainer>\n        <StyledPageContent>\n          <DiscoverQuery\n            eventView={getEventView()}\n            location={location}\n            orgSlug={organization.slug}\n            limit={15}\n          >\n            {data => {\n              return (\n                <Fragment>\n                  <ReplaysFilters\n                    query={searchQuery}\n                    organization={organization}\n                    handleSearchQuery={handleSearchQuery}\n                  />\n                  <StyledPanelTable\n                    isLoading={data.isLoading}\n                    isEmpty={data.tableData?.data.length === 0}\n                    headers={[\n                      ...(!isScreenLarge\n                        ? columns.filter(col => col === t('Session'))\n                        : columns),\n                      <SortLink\n                        key=\"timestamp\"\n                        role=\"columnheader\"\n                        aria-sort={\n                          !sort.field.endsWith('timestamp')\n                            ? 'none'\n                            : sort.field === '-timestamp'\n                            ? 'descending'\n                            : 'ascending'\n                        }\n                        to={{\n                          pathname: location.pathname,\n                          query: {\n                            ...currentQuery,\n                            // sort by timestamp should start by ascending on first click\n                            sort:\n                              sort.field === '-timestamp' ? 'timestamp' : '-timestamp',\n                          },\n                        }}\n                      >\n                        {t('Timestamp')} {sort.field.endsWith('timestamp') && sortArrow}\n                      </SortLink>,\n                      t('Duration'),\n                      t('Errors'),\n                    ]}\n                  >\n                    {data.tableData ? (\n                      <ReplayTable\n                        idKey=\"id\"\n                        showProjectColumn\n                        replayList={data.tableData.data as Replay[]}\n                      />\n                    ) : null}\n                  </StyledPanelTable>\n                  <Pagination pageLinks={data.pageLinks} />\n                </Fragment>\n              );\n            }}\n          </DiscoverQuery>\n        </StyledPageContent>\n      </PageFiltersContainer>\n    </Fragment>\n  );\n}\n\nconst StyledPageHeader = styled(PageHeader)`\n  background-color: ${p => p.theme.surface100};\n  min-width: max-content;\n  margin: ${space(3)} ${space(0)} ${space(4)} ${space(4)};\n`;\n\nconst StyledPageContent = styled(PageContent)`\n  box-shadow: 0px 0px 1px ${p => p.theme.gray200};\n  background-color: ${p => p.theme.background};\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  grid-template-columns: minmax(0, 1fr) max-content max-content max-content max-content;\n\n  @media (max-width: ${p => p.theme.breakpoints.small}) {\n    grid-template-columns: minmax(0, 1fr) max-content max-content max-content;\n  }\n`;\n\nconst HeaderTitle = styled(PageHeading)`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex: 1;\n`;\n\nconst SortLink = styled(Link)`\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n\n  svg {\n    vertical-align: top;\n  }\n`;\n\nexport default Replays;\n"],"names":["SEARCH_SPECIAL_CHARS_REGEXP","RegExp","NEGATION_OPERATOR","SEARCH_WILDCARD","SearchBar","props","maxSearchItems","organization","tags","omitTags","fields","projectIds","includeSessionTagsValues","maxMenuHeight","api","useApi","useEffect","getEventFieldValues","cache","clear","memoize","tag","query","endpointParams","projectIdStrings","map","String","isAggregateField","key","isMeasurement","Promise","resolve","fetchTagValues","slug","then","results","flatten","filter","name","defined","Error","getTagList","measurements","functionTags","Object","fromEntries","item","keys","FIELD_TAGS","includes","field","isEquation","fieldTags","features","assign","omit","TRACING_FIELDS","combined","SEMVER_TAGS","has","values","predefined","hasRecentSearches","savedSearchType","SavedSearchType","onGetTagValues","supportedTags","prepareQuery","replace","excludeEnvironment","getFieldDoc","withTags","measurementsFromDetails","details","entries","value","MOBILE_MEASUREMENTS","MOBILE_VITAL_DETAILS","WEB_MEASUREMENTS","WEB_VITAL_DETAILS","getMeasurements","Measurements","children","Fragment","WebVital","t","acronym","description","poorThreshold","type","measurementType","MobileVital","Browser","WrappedComponent","WithTags","Component","TagStore","this","setState","undefined","componentWillUnmount","unsubscribe","render","state","getDisplayName","ReplaysFilters","handleSearchQuery","FilterContainer","SearchContainer","condensed","resetParamsOnChange","alignDropdown","defaultQuery","placeholder","onSearch","space","p","theme","breakpoints","small","columns","Replays","location","useLocation","useOrganization","selection","usePageFilters","isScreenLarge","useMedia","searchQuery","setSearchQuery","useState","getQueryParamAsString","browserHistory","pathname","cursor","trim","_cursor","page","_page","currentQuery","sort","arrowDirection","startsWith","sortArrow","color","size","direction","StyledPageHeader","HeaderTitle","StyledPageContent","eventView","eventQueryParams","id","version","orderby","environment","environments","projects","datetime","period","range","EventView","getEventView","orgSlug","limit","data","StyledPanelTable","isLoading","isEmpty","tableData","length","headers","col","SortLink","role","endsWith","to","idKey","showProjectColumn","replayList","pageLinks","PageHeader","surface100","PageContent","gray200","background","PanelTable","PageHeading","Link"],"sourceRoot":""}