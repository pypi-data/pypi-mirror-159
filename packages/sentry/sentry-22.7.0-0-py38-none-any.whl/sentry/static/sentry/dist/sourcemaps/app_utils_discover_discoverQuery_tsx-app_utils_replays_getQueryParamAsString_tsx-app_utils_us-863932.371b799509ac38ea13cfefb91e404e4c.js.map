{"version":3,"file":"chunks/app_utils_discover_discoverQuery_tsx-app_utils_replays_getQueryParamAsString_tsx-app_utils_us-863932.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/discover/discoverQuery.tsx","webpack:///./app/utils/discover/genericDiscoverQuery.tsx","webpack:///./app/utils/getUrlPathname.tsx","webpack:///./app/utils/performance/contexts/performanceEventViewContext.tsx","webpack:///./app/utils/performance/contexts/utils.tsx","webpack:///./app/utils/replays/getQueryParamAsString.tsx","webpack:///./app/utils/replays/hooks/useDiscoveryQuery.tsx","webpack:///./app/utils/useLocation.tsx","webpack:///./app/views/replays/replayTable.tsx"],"sourcesContent":["import {EventsMetaType, MetaType} from 'sentry/utils/discover/eventView';\nimport withApi from 'sentry/utils/withApi';\nimport {TransactionThresholdMetric} from 'sentry/views/performance/transactionSummary/transactionThresholdModal';\n\nimport GenericDiscoverQuery, {\n  DiscoverQueryProps,\n  GenericChildrenProps,\n} from './genericDiscoverQuery';\n\n/**\n * An individual row in a DiscoverQuery result\n */\nexport type TableDataRow = {\n  [key: string]: React.ReactText;\n  id: string;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata.\n */\nexport type TableData = {\n  data: Array<TableDataRow>;\n  meta?: MetaType;\n};\n\n/**\n * A DiscoverQuery result including rows and metadata from the events endpoint.\n */\nexport type EventsTableData = {\n  data: Array<TableDataRow>;\n  meta?: EventsMetaType;\n};\n\nexport type TableDataWithTitle = TableData & {title: string};\n\ntype DiscoverQueryPropsWithThresholds = DiscoverQueryProps & {\n  transactionName?: string;\n  transactionThreshold?: number;\n  transactionThresholdMetric?: TransactionThresholdMetric;\n};\n\ntype DiscoverQueryComponentProps = DiscoverQueryPropsWithThresholds & {\n  children: (props: GenericChildrenProps<TableData>) => React.ReactNode;\n  useEvents?: boolean;\n};\n\nfunction shouldRefetchData(\n  prevProps: DiscoverQueryPropsWithThresholds,\n  nextProps: DiscoverQueryPropsWithThresholds\n) {\n  return (\n    prevProps.transactionName !== nextProps.transactionName ||\n    prevProps.transactionThreshold !== nextProps.transactionThreshold ||\n    prevProps.transactionThresholdMetric !== nextProps.transactionThresholdMetric\n  );\n}\n\nfunction DiscoverQuery(props: DiscoverQueryComponentProps) {\n  const endpoint = props.useEvents ? 'events' : 'eventsv2';\n  const afterFetch = props.useEvents\n    ? (data, _) => {\n        const {fields, ...otherMeta} = data.meta ?? {};\n        return {\n          ...data,\n          meta: {...fields, ...otherMeta},\n        };\n      }\n    : undefined;\n  return (\n    <GenericDiscoverQuery<TableData, DiscoverQueryPropsWithThresholds>\n      route={endpoint}\n      shouldRefetchData={shouldRefetchData}\n      afterFetch={afterFetch}\n      {...props}\n    />\n  );\n}\n\nexport default withApi(DiscoverQuery);\n","import {Component, useContext} from 'react';\nimport {Location} from 'history';\n\nimport {EventQuery} from 'sentry/actionCreators/events';\nimport {Client, ResponseMeta} from 'sentry/api';\nimport {t} from 'sentry/locale';\nimport EventView, {\n  ImmutableEventView,\n  isAPIPayloadSimilar,\n  LocationQuery,\n} from 'sentry/utils/discover/eventView';\nimport {PerformanceEventViewContext} from 'sentry/utils/performance/contexts/performanceEventViewContext';\nimport {OrganizationContext} from 'sentry/views/organizationContext';\n\nexport class QueryError {\n  message: string;\n  private originalError: any; // For debugging in case parseError picks a value that doesn't make sense.\n  constructor(errorMessage: string, originalError?: any) {\n    this.message = errorMessage;\n    this.originalError = originalError;\n  }\n\n  getOriginalError() {\n    return this.originalError;\n  }\n}\n\nexport type GenericChildrenProps<T> = {\n  /**\n   * Error, if not null.\n   */\n  error: null | QueryError;\n  /**\n   * Loading state of this query.\n   */\n  isLoading: boolean;\n  /**\n   * Pagelinks, if applicable. Can be provided to the Pagination component.\n   */\n  pageLinks: null | string;\n  /**\n   * Data / result.\n   */\n  tableData: T | null;\n};\n\ntype OptionalContextProps = {\n  eventView?: EventView | ImmutableEventView;\n  orgSlug?: string;\n};\n\ntype BaseDiscoverQueryProps = {\n  api: Client;\n  /**\n   * Used as the default source for cursor values.\n   */\n  location: Location;\n  /**\n   * Explicit cursor value if you aren't using `location.query.cursor` because there are\n   * multiple paginated results on the page.\n   */\n  cursor?: string;\n  /**\n   * Record limit to get.\n   */\n  limit?: number;\n  /**\n   * Include this whenever pagination won't be used. Limit can still be used when this is\n   * passed, but cursor will be ignored.\n   */\n  noPagination?: boolean;\n  /**\n   * Extra query parameters to be added.\n   */\n  queryExtras?: Record<string, string>;\n  /**\n   * Sets referrer parameter in the API Payload. Set of allowed referrers are defined\n   * on the OrganizationEventsV2Endpoint view.\n   */\n  referrer?: string;\n  /**\n   * A callback to set an error so that the error can be rendered in parent components\n   */\n  setError?: (errObject: QueryError | undefined) => void;\n};\n\nexport type DiscoverQueryPropsWithContext = BaseDiscoverQueryProps & OptionalContextProps;\nexport type DiscoverQueryProps = BaseDiscoverQueryProps & {\n  eventView: EventView | ImmutableEventView;\n  orgSlug: string;\n};\n\ntype InnerRequestProps<P> = DiscoverQueryProps & P;\ntype OuterRequestProps<P> = DiscoverQueryPropsWithContext & P;\n\nexport type ReactProps<T> = {\n  children?: (props: GenericChildrenProps<T>) => React.ReactNode;\n};\n\ntype ComponentProps<T, P> = {\n  /**\n   * Route to the endpoint\n   */\n  route: string;\n  /**\n   * A hook to modify data into the correct output after data has been received\n   */\n  afterFetch?: (data: any, props?: Props<T, P>) => T;\n  /**\n   * A hook before fetch that can be used to do things like clearing the api\n   */\n  beforeFetch?: (api: Client) => void;\n  /**\n   * A hook for parent orchestrators to pass down data based on query results, unlike afterFetch it is not meant for specializations as it will not modify data.\n   */\n  didFetch?: (data: T) => void;\n  /**\n   * Allows components to modify the payload before it is set.\n   */\n  getRequestPayload?: (props: Props<T, P>) => any;\n  /**\n   * An external hook to parse errors in case there are differences for a specific api.\n   */\n  parseError?: (error: any) => QueryError | null;\n  /**\n   * An external hook in addition to the event view check to check if data should be refetched\n   */\n  shouldRefetchData?: (prevProps: Props<T, P>, props: Props<T, P>) => boolean;\n};\n\ntype Props<T, P> = InnerRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\ntype OuterProps<T, P> = OuterRequestProps<P> & ReactProps<T> & ComponentProps<T, P>;\n\ntype State<T> = {\n  tableFetchID: symbol | undefined;\n} & GenericChildrenProps<T>;\n\n/**\n * Generic component for discover queries\n */\nclass _GenericDiscoverQuery<T, P> extends Component<Props<T, P>, State<T>> {\n  state: State<T> = {\n    isLoading: true,\n    tableFetchID: undefined,\n    error: null,\n\n    tableData: null,\n    pageLinks: null,\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  componentDidUpdate(prevProps: Props<T, P>) {\n    // Reload data if the payload changes\n    const refetchCondition = this._shouldRefetchData(prevProps);\n\n    // or if we've moved from an invalid view state to a valid one,\n    const eventViewValidation =\n      prevProps.eventView.isValid() === false && this.props.eventView.isValid();\n\n    const shouldRefetchExternal = this.props.shouldRefetchData\n      ? this.props.shouldRefetchData(prevProps, this.props)\n      : false;\n\n    if (refetchCondition || eventViewValidation || shouldRefetchExternal) {\n      this.fetchData();\n    }\n  }\n\n  getPayload(props: Props<T, P>) {\n    const {cursor, limit, noPagination, referrer} = props;\n    const payload = this.props.getRequestPayload\n      ? this.props.getRequestPayload(props)\n      : props.eventView.getEventsAPIPayload(props.location);\n\n    if (cursor) {\n      payload.cursor = cursor;\n    }\n    if (limit) {\n      payload.per_page = limit;\n    }\n    if (noPagination) {\n      payload.noPagination = noPagination;\n    }\n    if (referrer) {\n      payload.referrer = referrer;\n    }\n\n    Object.assign(payload, props.queryExtras ?? {});\n\n    return payload;\n  }\n\n  _shouldRefetchData = (prevProps: Props<T, P>): boolean => {\n    const thisAPIPayload = this.getPayload(this.props);\n    const otherAPIPayload = this.getPayload(prevProps);\n\n    return (\n      !isAPIPayloadSimilar(thisAPIPayload, otherAPIPayload) ||\n      prevProps.limit !== this.props.limit ||\n      prevProps.route !== this.props.route ||\n      prevProps.cursor !== this.props.cursor\n    );\n  };\n\n  /**\n   * The error type isn't consistent across APIs. We see detail as just string some times, other times as an object.\n   */\n  _parseError = (error: any): QueryError | null => {\n    if (this.props.parseError) {\n      return this.props.parseError(error);\n    }\n\n    if (!error) {\n      return null;\n    }\n\n    const detail = error.responseJSON?.detail;\n    if (typeof detail === 'string') {\n      return new QueryError(detail, error);\n    }\n\n    const message = detail?.message;\n    if (typeof message === 'string') {\n      return new QueryError(message, error);\n    }\n\n    const unknownError = new QueryError(t('An unknown error occurred.'), error);\n    return unknownError;\n  };\n\n  fetchData = async () => {\n    const {api, beforeFetch, afterFetch, didFetch, eventView, orgSlug, route, setError} =\n      this.props;\n\n    if (!eventView.isValid()) {\n      return;\n    }\n\n    const url = `/organizations/${orgSlug}/${route}/`;\n    const tableFetchID = Symbol(`tableFetchID`);\n    const apiPayload: Partial<EventQuery & LocationQuery> = this.getPayload(this.props);\n\n    this.setState({isLoading: true, tableFetchID});\n\n    setError?.(undefined);\n\n    beforeFetch?.(api);\n\n    // clear any inflight requests since they are now stale\n    api.clear();\n\n    try {\n      const [data, , resp] = await doDiscoverQuery<T>(api, url, apiPayload);\n      if (this.state.tableFetchID !== tableFetchID) {\n        // invariant: a different request was initiated after this request\n        return;\n      }\n\n      const tableData = afterFetch ? afterFetch(data, this.props) : data;\n      didFetch?.(tableData);\n\n      this.setState(prevState => ({\n        isLoading: false,\n        tableFetchID: undefined,\n        error: null,\n        pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n        tableData,\n      }));\n    } catch (err) {\n      const error = this._parseError(err);\n      this.setState({\n        isLoading: false,\n        tableFetchID: undefined,\n        error,\n        tableData: null,\n      });\n      if (setError) {\n        setError(error ?? undefined);\n      }\n    }\n  };\n\n  render() {\n    const {isLoading, error, tableData, pageLinks} = this.state;\n\n    const childrenProps: GenericChildrenProps<T> = {\n      isLoading,\n      error,\n      tableData,\n      pageLinks,\n    };\n    const children: ReactProps<T>['children'] = this.props.children; // Explicitly setting type due to issues with generics and React's children\n    return children?.(childrenProps);\n  }\n}\n\n// Shim to allow us to use generic discover query or any specialization with or without passing org slug or eventview, which are now contexts.\n// This will help keep tests working and we can remove extra uses of context-provided props and update tests as we go.\nexport function GenericDiscoverQuery<T, P>(props: OuterProps<T, P>) {\n  const organizationSlug = useContext(OrganizationContext)?.slug;\n  const performanceEventView = useContext(PerformanceEventViewContext)?.eventView;\n\n  const orgSlug = props.orgSlug ?? organizationSlug;\n  const eventView = props.eventView ?? performanceEventView;\n\n  if (orgSlug === undefined || eventView === undefined) {\n    throw new Error('GenericDiscoverQuery requires both an orgSlug and eventView');\n  }\n\n  const _props: Props<T, P> = {\n    ...props,\n    orgSlug,\n    eventView,\n  };\n  return <_GenericDiscoverQuery<T, P> {..._props} />;\n}\n\nexport type DiscoverQueryRequestParams = Partial<EventQuery & LocationQuery>;\n\nexport function doDiscoverQuery<T>(\n  api: Client,\n  url: string,\n  params: DiscoverQueryRequestParams\n): Promise<[T, string | undefined, ResponseMeta<T> | undefined]> {\n  return api.requestPromise(url, {\n    method: 'GET',\n    includeAllArgs: true,\n    query: {\n      // marking params as any so as to not cause typescript errors\n      ...(params as any),\n    },\n  });\n}\n\nexport default GenericDiscoverQuery;\n","export default function getUrlPathname(url: string) {\n  try {\n    return new URL(url).pathname;\n  } catch {\n    return undefined;\n  }\n}\n","import EventView, {ImmutableEventView} from 'sentry/utils/discover/eventView';\n\nimport {createDefinedContext} from './utils';\n\ntype usePerformanceEventViewContext = {\n  eventView: EventView;\n};\n\nconst [\n  PerformanceEventViewProvider,\n  _usePerformanceEventView,\n  PerformanceEventViewContext,\n] = createDefinedContext<usePerformanceEventViewContext>({\n  name: 'PerformanceEventViewContext',\n});\n\nexport {PerformanceEventViewProvider, PerformanceEventViewContext};\n\n// Provides a readonly event view. Also omits anything that isn't currently read-only, although in the future we should switch the code in EventView instead.\n// If you need mutability, use the mutable version.\nexport function usePerformanceEventView(): ImmutableEventView {\n  return _usePerformanceEventView().eventView;\n}\n\nexport function useMutablePerformanceEventView() {\n  return usePerformanceEventView().clone();\n}\n","import {createContext, useContext} from 'react';\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>];\n/*\n * Creates provider, context and useContext hook, guarding against calling useContext without a provider.\n * [0]: https://github.com/chakra-ui/chakra-ui/blob/c0f9c287df0397e2aa9bd90eb3d5c2f2c08aa0b1/packages/utils/src/react-helpers.ts#L27\n *\n * Renamed to createDefinedContext to not conflate with React context.\n */\nexport function createDefinedContext<ContextType>(options: {\n  name: string;\n  errorMessage?: string;\n  strict?: boolean;\n}) {\n  const {\n    strict = true,\n    errorMessage = `useContext for \"${options.name}\" must be inside a Provider with a value`,\n    name,\n  } = options;\n\n  const Context = createContext<ContextType | undefined>(undefined);\n\n  Context.displayName = name;\n\n  function useDefinedContext() {\n    const context = useContext(Context);\n    if (!context && strict) {\n      throw new Error(errorMessage);\n    }\n    return context;\n  }\n\n  return [\n    Context.Provider,\n    useDefinedContext,\n    Context,\n  ] as CreateContextReturn<ContextType>;\n}\n","export function getQueryParamAsString(query: string | string[] | null | undefined) {\n  if (!query) {\n    return '';\n  }\n  return Array.isArray(query) ? query.join(' ') : query;\n}\n","import {useEffect, useState} from 'react';\nimport {Location} from 'history';\n\nimport {NewQuery} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport useApi from 'sentry/utils/useApi';\nimport useOrganization from 'sentry/utils/useOrganization';\n\ntype OptionalProperties = 'projects' | 'environment' | 'id' | 'name' | 'version';\ninterface Params {\n  /**\n   * The Discover query to perform. This is a function because we will require the consumer of the hook to memoize this function.\n   */\n  discoverQuery: Omit<NewQuery, OptionalProperties> &\n    Partial<Pick<NewQuery, OptionalProperties>>;\n\n  endpoint?: string;\n\n  /**\n   * Should we ignore the current URL parameter `cursor`?\n   *\n   * This is useful when we are making nested discover queries and the child queries have their own cursor (or do not need it at all).\n   */\n  ignoreCursor?: boolean;\n}\n\ninterface State<T> {\n  data: T[] | undefined;\n  error: Error | undefined;\n  isLoading: boolean;\n  pageLinks: string | undefined;\n}\n\nconst INITIAL_STATE: Readonly<State<any>> = {\n  isLoading: true,\n  error: undefined,\n  data: undefined,\n  pageLinks: undefined,\n};\n\nconst FAKE_LOCATION = {\n  query: {},\n} as Location;\n\n/**\n * Simple custom hook to perform a Discover query.\n *\n * Note this does *not* handle URL parameters like the render component `<DiscoverQuery>`.\n * It will need to be handled in a parent.\n */\nexport default function useDiscoverQuery<T = unknown>({\n  endpoint,\n  discoverQuery,\n  ignoreCursor,\n}: Params) {\n  const [state, setState] = useState<State<T>>(INITIAL_STATE);\n  const api = useApi();\n  const organization = useOrganization();\n\n  useEffect(() => {\n    async function runQuery() {\n      const url = endpoint || `/organizations/${organization.slug}/eventsv2/`;\n      const eventView = EventView.fromNewQueryWithLocation(\n        {\n          environment: [],\n          projects: [],\n          id: '',\n          name: '',\n          version: 2,\n          ...discoverQuery,\n        },\n        FAKE_LOCATION\n      );\n      const query = eventView.getEventsAPIPayload(FAKE_LOCATION);\n\n      setState(prevState => ({...prevState, isLoading: true, error: undefined}));\n      api.clear();\n\n      try {\n        const [data, , resp] = await api.requestPromise(url, {\n          includeAllArgs: true,\n          query,\n        });\n        setState(prevState => ({\n          ...prevState,\n          isLoading: false,\n          error: undefined,\n          pageLinks: resp?.getResponseHeader('Link') ?? prevState.pageLinks,\n          data: data.data,\n        }));\n      } catch (error) {\n        setState(prevState => ({\n          ...prevState,\n          isLoading: false,\n          error,\n          data: undefined,\n        }));\n      }\n    }\n\n    runQuery();\n\n    // location is ignored in deps array, see getEventView comments\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [endpoint, discoverQuery, organization.slug, ignoreCursor]);\n\n  return state;\n}\n","import {Location, Query} from 'history';\n\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\ntype DefaultQuery<T = string> = {\n  [key: string]: T | T[] | null | undefined;\n};\n\nexport function useLocation<Q extends Query = DefaultQuery>(): Location<Q> {\n  const route = useRouteContext();\n  return route.location;\n}\n","import React, {Fragment, useMemo} from 'react';\nimport styled from '@emotion/styled';\n\nimport Duration from 'sentry/components/duration';\nimport ProjectBadge from 'sentry/components/idBadge/projectBadge';\nimport UserBadge from 'sentry/components/idBadge/userBadge';\nimport Link from 'sentry/components/links/link';\nimport Placeholder from 'sentry/components/placeholder';\nimport TimeSince from 'sentry/components/timeSince';\nimport {IconCalendar} from 'sentry/icons';\nimport space from 'sentry/styles/space';\nimport {generateEventSlug} from 'sentry/utils/discover/urls';\nimport getUrlPathname from 'sentry/utils/getUrlPathname';\nimport useDiscoverQuery from 'sentry/utils/replays/hooks/useDiscoveryQuery';\nimport theme from 'sentry/utils/theme';\nimport useMedia from 'sentry/utils/useMedia';\nimport useOrganization from 'sentry/utils/useOrganization';\nimport useProjects from 'sentry/utils/useProjects';\n\nimport {Replay} from './types';\n\ntype Props = {\n  idKey: string;\n  replayList: Replay[];\n  showProjectColumn?: boolean;\n};\n\ntype ReplayDurationAndErrors = {\n  count_if_event_type_equals_error: number;\n  'equation[0]': number;\n  id: string;\n  max_timestamp: string;\n  min_timestamp: string;\n  replayId: string;\n};\n\nfunction ReplayTable({replayList, idKey, showProjectColumn}: Props) {\n  const organization = useOrganization();\n  const {projects} = useProjects();\n  const isScreenLarge = useMedia(`(min-width: ${theme.breakpoints.small})`);\n\n  const query = replayList.map(item => `replayId:${item[idKey]}`).join(' OR ');\n\n  const discoverQuery = useMemo(\n    () => ({\n      fields: [\n        'replayId',\n        'max(timestamp)',\n        'min(timestamp)',\n        'equation|max(timestamp)-min(timestamp)',\n        'count_if(event.type,equals,error)',\n      ],\n      orderby: '-min_timestamp',\n      query: `(title:\"sentry-replay-event-*\" OR event.type:error) AND (${query})`,\n    }),\n    [query]\n  );\n\n  const {data} = useDiscoverQuery<ReplayDurationAndErrors>({discoverQuery});\n\n  const dataEntries = data\n    ? Object.fromEntries(data.map(item => [item.replayId, item]))\n    : {};\n\n  return (\n    <Fragment>\n      {replayList?.map(replay => (\n        <Fragment key={replay.id}>\n          <UserBadge\n            avatarSize={32}\n            displayName={\n              <Link\n                to={`/organizations/${organization.slug}/replays/${generateEventSlug({\n                  project: replay.project,\n                  id: replay[idKey],\n                })}/`}\n              >\n                {replay['user.display']}\n              </Link>\n            }\n            user={{\n              username: replay['user.username'] ?? '',\n              id: replay['user.id'] ?? '',\n              ip_address: replay['user.ip_address'] ?? '',\n              name: replay['user.name'] ?? '',\n              email: replay['user.email'] ?? '',\n            }}\n            // this is the subheading for the avatar, so displayEmail in this case is a misnomer\n            displayEmail={getUrlPathname(replay.url) ?? ''}\n          />\n          {isScreenLarge && showProjectColumn && (\n            <Item>\n              <ProjectBadge\n                project={\n                  projects.find(p => p.slug === replay.project) || {\n                    slug: replay.project,\n                  }\n                }\n                avatarSize={16}\n              />\n            </Item>\n          )}\n          <Item>\n            <TimeSinceWrapper>\n              {isScreenLarge && <StyledIconCalendarWrapper color=\"gray500\" size=\"sm\" />}\n              <TimeSince date={replay.timestamp} />\n            </TimeSinceWrapper>\n          </Item>\n          {data ? (\n            <React.Fragment>\n              <Item>\n                <Duration\n                  seconds={\n                    Math.floor(\n                      dataEntries[replay[idKey]]\n                        ? dataEntries[replay[idKey]]['equation[0]']\n                        : 0\n                    ) || 1\n                  }\n                  exact\n                  abbreviation\n                />\n              </Item>\n              <Item>\n                {dataEntries[replay[idKey]]\n                  ? dataEntries[replay[idKey]]?.count_if_event_type_equals_error\n                  : 0}\n              </Item>\n            </React.Fragment>\n          ) : (\n            <React.Fragment>\n              <Item>\n                <Placeholder height=\"24px\" />\n              </Item>\n              <Item>\n                <Placeholder height=\"24px\" />\n              </Item>\n            </React.Fragment>\n          )}\n        </Fragment>\n      ))}\n    </Fragment>\n  );\n}\n\nconst Item = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst TimeSinceWrapper = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(2, minmax(auto, max-content));\n  align-items: center;\n  gap: ${space(1)};\n`;\n\nconst StyledIconCalendarWrapper = styled(IconCalendar)`\n  position: relative;\n  top: -1px;\n`;\n\nexport default ReplayTable;\n"],"names":["shouldRefetchData","prevProps","nextProps","transactionName","transactionThreshold","transactionThresholdMetric","DiscoverQuery","props","endpoint","useEvents","afterFetch","data","_","fields","otherMeta","meta","undefined","route","withApi","QueryError","constructor","errorMessage","originalError","this","message","getOriginalError","_GenericDiscoverQuery","Component","isLoading","tableFetchID","error","tableData","pageLinks","thisAPIPayload","getPayload","otherAPIPayload","isAPIPayloadSimilar","limit","cursor","parseError","detail","responseJSON","t","async","api","beforeFetch","didFetch","eventView","orgSlug","setError","isValid","url","Symbol","apiPayload","setState","clear","resp","doDiscoverQuery","state","prevState","getResponseHeader","err","_parseError","componentDidMount","fetchData","componentDidUpdate","refetchCondition","_shouldRefetchData","eventViewValidation","shouldRefetchExternal","noPagination","referrer","payload","getRequestPayload","getEventsAPIPayload","location","per_page","Object","assign","queryExtras","render","childrenProps","children","GenericDiscoverQuery","organizationSlug","useContext","OrganizationContext","slug","performanceEventView","PerformanceEventViewContext","Error","_props","params","requestPromise","method","includeAllArgs","query","getUrlPathname","URL","pathname","PerformanceEventViewProvider","_usePerformanceEventView","createDefinedContext","name","options","strict","Context","createContext","displayName","Provider","context","getQueryParamAsString","Array","isArray","join","INITIAL_STATE","FAKE_LOCATION","useDiscoverQuery","discoverQuery","ignoreCursor","useState","useApi","organization","useOrganization","useEffect","EventView","environment","projects","id","version","runQuery","useLocation","useRouteContext","ReplayTable","replayList","idKey","showProjectColumn","useProjects","isScreenLarge","useMedia","theme","map","item","useMemo","orderby","dataEntries","fromEntries","replayId","Fragment","replay","avatarSize","to","generateEventSlug","project","user","username","ip_address","email","displayEmail","Item","find","p","TimeSinceWrapper","StyledIconCalendarWrapper","color","size","date","timestamp","seconds","Math","floor","exact","abbreviation","count_if_event_type_equals_error","height","space","IconCalendar"],"sourceRoot":""}