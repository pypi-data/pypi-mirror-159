{"version":3,"file":"chunks/app_views_alerts_list_rules_index_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/components/alertBadge.tsx","webpack:///./app/views/alerts/list/rules/row.tsx","webpack:///./app/views/alerts/list/rules/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nimport {\n  IconCheckmark,\n  IconDiamond,\n  IconExclamation,\n  IconFire,\n  IconIssues,\n} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Color} from 'sentry/utils/theme';\nimport {IncidentStatus} from 'sentry/views/alerts/types';\n\ntype Props = {\n  hideText?: boolean;\n  isIssue?: boolean;\n  status?: IncidentStatus;\n};\n\nfunction AlertBadge({status, hideText = false, isIssue}: Props) {\n  let statusText = t('Resolved');\n  let Icon = IconCheckmark;\n  let color: Color = 'green300';\n  if (isIssue) {\n    statusText = t('Issue');\n    Icon = IconIssues;\n    color = 'gray300';\n  } else if (status === IncidentStatus.CRITICAL) {\n    statusText = t('Critical');\n    Icon = IconFire;\n    color = 'red300';\n  } else if (status === IncidentStatus.WARNING) {\n    statusText = t('Warning');\n    Icon = IconExclamation;\n    color = 'yellow300';\n  }\n\n  return (\n    <Wrapper data-test-id=\"alert-badge\">\n      <AlertIconWrapper color={color} icon={Icon}>\n        <AlertIconBackground color={color} />\n        <Icon color=\"white\" />\n      </AlertIconWrapper>\n\n      {!hideText && <IncidentStatusValue color={color}>{statusText}</IncidentStatusValue>}\n    </Wrapper>\n  );\n}\n\nexport default AlertBadge;\n\nconst Wrapper = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst AlertIconWrapper = styled('div')<{color: Color; icon: React.ReactNode}>`\n  width: 36px;\n  height: 36px;\n  position: relative;\n\n  svg:last-child {\n    width: ${p => (p.icon === IconIssues ? '13px' : '16px')};\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    margin: auto;\n  }\n`;\n\nconst AlertIconBackground = styled(IconDiamond)<{color: Color}>`\n  width: 36px;\n  height: 36px;\n`;\n\nconst IncidentStatusValue = styled('div')`\n  margin-left: ${space(1)};\n`;\n","import {useState} from 'react';\nimport styled from '@emotion/styled';\nimport memoize from 'lodash/memoize';\n\nimport Access from 'sentry/components/acl/access';\nimport AlertBadge from 'sentry/components/alertBadge';\nimport ActorAvatar from 'sentry/components/avatar/actorAvatar';\nimport TeamAvatar from 'sentry/components/avatar/teamAvatar';\nimport {openConfirmModal} from 'sentry/components/confirm';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport DropdownBubble from 'sentry/components/dropdownBubble';\nimport DropdownMenuControlV2 from 'sentry/components/dropdownMenuControlV2';\nimport {MenuItemProps} from 'sentry/components/dropdownMenuItemV2';\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport Highlight from 'sentry/components/highlight';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport TextOverflow from 'sentry/components/textOverflow';\nimport TimeSince from 'sentry/components/timeSince';\nimport Tooltip from 'sentry/components/tooltip';\nimport {IconArrow, IconChevron, IconEllipsis, IconUser} from 'sentry/icons';\nimport {t, tct} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Actor, Project} from 'sentry/types';\nimport type {Color} from 'sentry/utils/theme';\nimport {getThresholdUnits} from 'sentry/views/alerts/rules/metric/constants';\nimport {\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n} from 'sentry/views/alerts/rules/metric/types';\n\nimport {CombinedAlertType, CombinedMetricIssueAlerts, IncidentStatus} from '../../types';\nimport {isIssueAlert} from '../../utils';\n\ntype Props = {\n  hasDuplicateAlertRules: boolean;\n  hasEditAccess: boolean;\n  onDelete: (projectId: string, rule: CombinedMetricIssueAlerts) => void;\n  onOwnerChange: (\n    projectId: string,\n    rule: CombinedMetricIssueAlerts,\n    ownerValue: string\n  ) => void;\n  orgId: string;\n  projects: Project[];\n  projectsLoaded: boolean;\n  rule: CombinedMetricIssueAlerts;\n  // Set of team ids that the user belongs to\n  userTeams: Set<string>;\n};\n\n/**\n * Memoized function to find a project from a list of projects\n */\nconst getProject = memoize((slug: string, projects: Project[]) =>\n  projects.find(project => project.slug === slug)\n);\n\nfunction RuleListRow({\n  rule,\n  projectsLoaded,\n  projects,\n  orgId,\n  onDelete,\n  onOwnerChange,\n  userTeams,\n  hasDuplicateAlertRules,\n  hasEditAccess,\n}: Props) {\n  const [assignee, setAssignee] = useState<string>('');\n  const activeIncident =\n    rule.latestIncident?.status !== undefined &&\n    [IncidentStatus.CRITICAL, IncidentStatus.WARNING].includes(\n      rule.latestIncident.status\n    );\n\n  function renderLastIncidentDate(): React.ReactNode {\n    if (isIssueAlert(rule)) {\n      if (!rule.lastTriggered) {\n        return t('Alerts not triggered yet');\n      }\n      return (\n        <div>\n          {t('Triggered ')}\n          <TimeSince date={rule.lastTriggered} />\n        </div>\n      );\n    }\n\n    if (!rule.latestIncident) {\n      return t('Alerts not triggered yet');\n    }\n\n    if (activeIncident) {\n      return (\n        <div>\n          {t('Triggered ')}\n          <TimeSince date={rule.latestIncident.dateCreated} />\n        </div>\n      );\n    }\n\n    return (\n      <div>\n        {t('Resolved ')}\n        <TimeSince date={rule.latestIncident.dateClosed!} />\n      </div>\n    );\n  }\n\n  function renderAlertRuleStatus(): React.ReactNode {\n    if (isIssueAlert(rule)) {\n      return null;\n    }\n\n    const criticalTrigger = rule.triggers.find(\n      ({label}) => label === AlertRuleTriggerType.CRITICAL\n    );\n    const warningTrigger = rule.triggers.find(\n      ({label}) => label === AlertRuleTriggerType.WARNING\n    );\n    const resolvedTrigger = rule.resolveThreshold;\n    const trigger =\n      activeIncident && rule.latestIncident?.status === IncidentStatus.CRITICAL\n        ? criticalTrigger\n        : warningTrigger ?? criticalTrigger;\n\n    let iconColor: Color = 'green300';\n    let iconDirection: 'up' | 'down' | undefined;\n    let thresholdTypeText =\n      activeIncident && rule.thresholdType === AlertRuleThresholdType.ABOVE\n        ? t('Above')\n        : t('Below');\n\n    if (activeIncident) {\n      iconColor =\n        trigger?.label === AlertRuleTriggerType.CRITICAL\n          ? 'red300'\n          : trigger?.label === AlertRuleTriggerType.WARNING\n          ? 'yellow300'\n          : 'green300';\n      iconDirection = rule.thresholdType === AlertRuleThresholdType.ABOVE ? 'up' : 'down';\n    } else {\n      // Use the Resolved threshold type, which is opposite of Critical\n      iconDirection = rule.thresholdType === AlertRuleThresholdType.ABOVE ? 'down' : 'up';\n      thresholdTypeText =\n        rule.thresholdType === AlertRuleThresholdType.ABOVE ? t('Below') : t('Above');\n    }\n\n    return (\n      <FlexCenter>\n        <IconArrow color={iconColor} direction={iconDirection} />\n        <TriggerText>\n          {`${thresholdTypeText} ${\n            rule.latestIncident || (!rule.latestIncident && !resolvedTrigger)\n              ? trigger?.alertThreshold?.toLocaleString()\n              : resolvedTrigger?.toLocaleString()\n          }`}\n          {getThresholdUnits(\n            rule.aggregate,\n            rule.comparisonDelta\n              ? AlertRuleComparisonType.CHANGE\n              : AlertRuleComparisonType.COUNT\n          )}\n        </TriggerText>\n      </FlexCenter>\n    );\n  }\n\n  const slug = rule.projects[0];\n  const editLink = `/organizations/${orgId}/alerts/${\n    isIssueAlert(rule) ? 'rules' : 'metric-rules'\n  }/${slug}/${rule.id}/`;\n\n  const duplicateLink = {\n    pathname: `/organizations/${orgId}/alerts/new/${\n      rule.type === CombinedAlertType.METRIC ? 'metric' : 'issue'\n    }/`,\n    query: {\n      project: slug,\n      duplicateRuleId: rule.id,\n      createFromDuplicate: true,\n      referrer: 'alert_stream',\n    },\n  };\n\n  const detailsLink = `/organizations/${orgId}/alerts/rules/details/${rule.id}/`;\n\n  const ownerId = rule.owner?.split(':')[1];\n  const teamActor = ownerId\n    ? {type: 'team' as Actor['type'], id: ownerId, name: ''}\n    : null;\n\n  const canEdit = ownerId ? userTeams.has(ownerId) : true;\n  const alertLink = isIssueAlert(rule) ? (\n    <Link\n      to={`/organizations/${orgId}/alerts/rules/${rule.projects[0]}/${rule.id}/details/`}\n    >\n      {rule.name}\n    </Link>\n  ) : (\n    <TitleLink to={isIssueAlert(rule) ? editLink : detailsLink}>{rule.name}</TitleLink>\n  );\n\n  const IssueStatusText: Record<IncidentStatus, string> = {\n    [IncidentStatus.CRITICAL]: t('Critical'),\n    [IncidentStatus.WARNING]: t('Warning'),\n    [IncidentStatus.CLOSED]: t('Resolved'),\n    [IncidentStatus.OPENED]: t('Resolved'),\n  };\n\n  const actions: MenuItemProps[] = [\n    {\n      key: 'edit',\n      label: t('Edit'),\n      to: editLink,\n    },\n    {\n      key: 'duplicate',\n      label: t('Duplicate'),\n      to: duplicateLink,\n      hidden: !hasDuplicateAlertRules,\n    },\n    {\n      key: 'delete',\n      label: t('Delete'),\n      priority: 'danger',\n      onAction: () => {\n        openConfirmModal({\n          onConfirm: () => onDelete(slug, rule),\n          header: t('Delete Alert Rule?'),\n          message: tct(\n            \"Are you sure you want to delete [name]? You won't be able to view the history of this alert once it's deleted.\",\n            {name: rule.name}\n          ),\n          confirmText: t('Delete Rule'),\n          priority: 'danger',\n        });\n      },\n    },\n  ];\n\n  function handleOwnerChange({value}: {value: string}) {\n    const ownerValue = value && `team:${value}`;\n    setAssignee(ownerValue);\n    onOwnerChange(slug, rule, ownerValue);\n  }\n\n  const unassignedOption = {\n    value: '',\n    label: () => (\n      <MenuItemWrapper>\n        <StyledIconUser size=\"20px\" />\n        {t('Unassigned')}\n      </MenuItemWrapper>\n    ),\n    searchKey: 'unassigned',\n    actor: '',\n    disabled: false,\n  };\n\n  const projectRow = projects.filter(project => project.slug === slug);\n  const projectRowTeams = projectRow[0].teams;\n  const filteredProjectTeams = projectRowTeams?.filter(projTeam => {\n    return userTeams.has(projTeam.id);\n  });\n  const dropdownTeams = filteredProjectTeams\n    ?.map((team, idx) => ({\n      value: team.id,\n      searchKey: team.slug,\n      label: ({inputValue}) => (\n        <MenuItemWrapper data-test-id=\"assignee-option\" key={idx}>\n          <IconContainer>\n            <TeamAvatar team={team} size={24} />\n          </IconContainer>\n          <Label>\n            <Highlight text={inputValue}>{`#${team.slug}`}</Highlight>\n          </Label>\n        </MenuItemWrapper>\n      ),\n    }))\n    .concat(unassignedOption);\n\n  const teamId = assignee?.split(':')[1];\n  const teamName = filteredProjectTeams?.find(team => team.id === teamId);\n\n  const assigneeTeamActor = assignee && {\n    type: 'team' as Actor['type'],\n    id: teamId,\n    name: '',\n  };\n\n  const avatarElement = assigneeTeamActor ? (\n    <ActorAvatar\n      actor={assigneeTeamActor}\n      className=\"avatar\"\n      size={24}\n      tooltip={\n        <TooltipWrapper>\n          {tct('Assigned to [name]', {\n            name: teamName && `#${teamName.name}`,\n          })}\n        </TooltipWrapper>\n      }\n    />\n  ) : (\n    <Tooltip isHoverable skipWrapper title={t('Unassigned')}>\n      <StyledIconUser size=\"20px\" color=\"gray400\" />\n    </Tooltip>\n  );\n\n  return (\n    <ErrorBoundary>\n      <AlertNameWrapper isIssueAlert={isIssueAlert(rule)}>\n        <FlexCenter>\n          <Tooltip\n            title={\n              isIssueAlert(rule)\n                ? t('Issue Alert')\n                : tct('Metric Alert Status: [status]', {\n                    status:\n                      IssueStatusText[\n                        rule?.latestIncident?.status ?? IncidentStatus.CLOSED\n                      ],\n                  })\n            }\n          >\n            <AlertBadge\n              status={rule?.latestIncident?.status}\n              isIssue={isIssueAlert(rule)}\n              hideText\n            />\n          </Tooltip>\n        </FlexCenter>\n        <AlertNameAndStatus>\n          <AlertName>{alertLink}</AlertName>\n          <AlertIncidentDate>{renderLastIncidentDate()}</AlertIncidentDate>\n        </AlertNameAndStatus>\n      </AlertNameWrapper>\n      <FlexCenter>{renderAlertRuleStatus()}</FlexCenter>\n      <FlexCenter>\n        <ProjectBadgeContainer>\n          <ProjectBadge\n            avatarSize={18}\n            project={!projectsLoaded ? {slug} : getProject(slug, projects)}\n          />\n        </ProjectBadgeContainer>\n      </FlexCenter>\n\n      <FlexCenter>\n        {teamActor ? (\n          <ActorAvatar actor={teamActor} size={24} />\n        ) : (\n          <AssigneeWrapper>\n            {!projectsLoaded && (\n              <LoadingIndicator\n                mini\n                style={{height: '24px', margin: 0, marginRight: 11}}\n              />\n            )}\n            {projectsLoaded && (\n              <DropdownAutoComplete\n                data-test-id=\"alert-row-assignee\"\n                maxHeight={400}\n                onOpen={e => {\n                  e?.stopPropagation();\n                }}\n                items={dropdownTeams}\n                alignMenu=\"right\"\n                onSelect={handleOwnerChange}\n                itemSize=\"small\"\n                searchPlaceholder={t('Filter teams')}\n                disableLabelPadding\n                emptyHidesInput\n                disabled={!hasEditAccess}\n              >\n                {({getActorProps, isOpen}) => (\n                  <DropdownButton {...getActorProps({})}>\n                    {avatarElement}\n                    {hasEditAccess && (\n                      <StyledChevron direction={isOpen ? 'up' : 'down'} size=\"xs\" />\n                    )}\n                  </DropdownButton>\n                )}\n              </DropdownAutoComplete>\n            )}\n          </AssigneeWrapper>\n        )}\n      </FlexCenter>\n      <ActionsRow>\n        <Access access={['alerts:write']}>\n          {({hasAccess}) => (\n            <DropdownMenuControlV2\n              items={actions}\n              placement=\"bottom right\"\n              triggerProps={{\n                'aria-label': t('Show more'),\n                'data-test-id': 'alert-row-actions',\n                size: 'xs',\n                icon: <IconEllipsis size=\"xs\" />,\n                showChevron: false,\n              }}\n              disabledKeys={hasAccess && canEdit ? [] : ['delete']}\n            />\n          )}\n        </Access>\n      </ActionsRow>\n    </ErrorBoundary>\n  );\n}\n\nconst TitleLink = styled(Link)`\n  ${p => p.theme.overflowEllipsis}\n`;\n\nconst FlexCenter = styled('div')`\n  display: flex;\n  align-items: center;\n`;\n\nconst AlertNameWrapper = styled(FlexCenter)<{isIssueAlert?: boolean}>`\n  position: relative;\n  ${p => p.isIssueAlert && `padding: ${space(3)} ${space(2)}; line-height: 2.4;`}\n`;\n\nconst AlertNameAndStatus = styled('div')`\n  ${p => p.theme.overflowEllipsis}\n  margin-left: ${space(2)};\n  line-height: 1.35;\n`;\n\nconst AlertName = styled('div')`\n  ${p => p.theme.overflowEllipsis}\n  font-size: ${p => p.theme.fontSizeLarge};\n\n  @media (max-width: ${p => p.theme.breakpoints.xlarge}) {\n    max-width: 300px;\n  }\n  @media (max-width: ${p => p.theme.breakpoints.large}) {\n    max-width: 165px;\n  }\n  @media (max-width: ${p => p.theme.breakpoints.medium}) {\n    max-width: 100px;\n  }\n`;\n\nconst AlertIncidentDate = styled('div')`\n  color: ${p => p.theme.gray300};\n`;\n\nconst ProjectBadgeContainer = styled('div')`\n  width: 100%;\n`;\n\nconst ProjectBadge = styled(IdBadge)`\n  flex-shrink: 0;\n`;\n\nconst TriggerText = styled('div')`\n  margin-left: ${space(1)};\n  white-space: nowrap;\n  font-variant-numeric: tabular-nums;\n`;\n\nconst ActionsRow = styled(FlexCenter)`\n  justify-content: center;\n  padding: ${space(1)};\n`;\n\nconst AssigneeWrapper = styled('div')`\n  display: flex;\n  justify-content: flex-end;\n\n  /* manually align menu underneath dropdown caret */\n  ${DropdownBubble} {\n    right: -14px;\n  }\n`;\n\nconst DropdownButton = styled('div')`\n  display: flex;\n  align-items: center;\n  font-size: 20px;\n`;\n\nconst StyledChevron = styled(IconChevron)`\n  margin-left: ${space(1)};\n`;\n\nconst TooltipWrapper = styled('div')`\n  text-align: left;\n`;\n\nconst StyledIconUser = styled(IconUser)`\n  /* We need this to center with Avatar */\n  margin-right: 2px;\n`;\n\nconst IconContainer = styled('div')`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 24px;\n  height: 24px;\n  flex-shrink: 0;\n`;\n\nconst MenuItemWrapper = styled('div')`\n  display: flex;\n  align-items: center;\n  font-size: 13px;\n`;\n\nconst Label = styled(TextOverflow)`\n  margin-left: 6px;\n`;\n\nexport default RuleListRow;\n","import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport {addErrorMessage, addMessage} from 'sentry/actionCreators/indicator';\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport HookOrDefault from 'sentry/components/hookOrDefault';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport Link from 'sentry/components/links/link';\nimport PageFiltersContainer from 'sentry/components/organizations/pageFilters/container';\nimport Pagination from 'sentry/components/pagination';\nimport {PanelTable} from 'sentry/components/panels';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {IconArrow} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, PageFilters, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport Projects from 'sentry/utils/projects';\nimport Teams from 'sentry/utils/teams';\nimport withPageFilters from 'sentry/utils/withPageFilters';\n\nimport FilterBar from '../../filterBar';\nimport {AlertRuleType, CombinedMetricIssueAlerts} from '../../types';\nimport {getTeamParams, isIssueAlert} from '../../utils';\nimport AlertHeader from '../header';\n\nimport RuleListRow from './row';\n\ntype Props = RouteComponentProps<{orgId: string}, {}> & {\n  organization: Organization;\n  selection: PageFilters;\n};\n\ntype State = {\n  alertRuleCount?: number;\n  issueRuleCount?: number;\n  ruleList?: CombinedMetricIssueAlerts[];\n  teamFilterSearch?: string;\n};\n\nconst HookHeader = HookOrDefault({hookName: 'component:alerts-header'});\n\nclass AlertRulesList extends AsyncComponent<Props, State & AsyncComponent['state']> {\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    const {params, location} = this.props;\n    const {query} = location;\n\n    query.expand = ['latestIncident', 'lastTriggered'];\n    query.team = getTeamParams(query.team);\n\n    if (!query.sort) {\n      query.sort = ['incident_status', 'date_triggered'];\n    }\n\n    return [\n      [\n        'ruleList',\n        `/organizations/${params && params.orgId}/combined-rules/`,\n        {\n          query,\n        },\n      ],\n    ];\n  }\n\n  onRequestSuccess({stateKey, resp}) {\n    if (stateKey === 'ruleList') {\n      const issueRuleCount = resp.getResponseHeader('X-Sentry-Issue-Rule-Hits');\n      const alertRuleCount = resp.getResponseHeader('X-Sentry-Alert-Rule-Hits');\n      this.setState({\n        issueRuleCount: parseInt(issueRuleCount, 10),\n        alertRuleCount: parseInt(alertRuleCount, 10),\n      });\n    }\n  }\n\n  get projectsFromIncidents() {\n    const {ruleList = []} = this.state;\n\n    return [...new Set(ruleList?.map(({projects}) => projects).flat())];\n  }\n\n  handleChangeFilter = (activeFilters: string[]) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        team: activeFilters.length > 0 ? activeFilters : '',\n      },\n    });\n  };\n\n  handleChangeSearch = (name: string) => {\n    const {router, location} = this.props;\n    const {cursor: _cursor, page: _page, ...currentQuery} = location.query;\n    router.push({\n      pathname: location.pathname,\n      query: {\n        ...currentQuery,\n        name,\n      },\n    });\n  };\n\n  handleOwnerChange = (\n    projectId: string,\n    rule: CombinedMetricIssueAlerts,\n    ownerValue: string\n  ) => {\n    const {orgId} = this.props.params;\n    const alertPath = rule.type === 'alert_rule' ? 'alert-rules' : 'rules';\n    const endpoint = `/projects/${orgId}/${projectId}/${alertPath}/${rule.id}/`;\n    const updatedRule = {...rule, owner: ownerValue};\n\n    this.api.request(endpoint, {\n      method: 'PUT',\n      data: updatedRule,\n      success: () => {\n        addMessage(t('Updated alert rule'), 'success');\n      },\n      error: () => {\n        addMessage(t('Unable to save change'), 'error');\n      },\n    });\n  };\n\n  handleDeleteRule = async (projectId: string, rule: CombinedMetricIssueAlerts) => {\n    const {orgId} = this.props.params;\n    const alertPath = isIssueAlert(rule) ? 'rules' : 'alert-rules';\n\n    try {\n      await this.api.requestPromise(\n        `/projects/${orgId}/${projectId}/${alertPath}/${rule.id}/`,\n        {\n          method: 'DELETE',\n        }\n      );\n      this.reloadData();\n    } catch (_err) {\n      addErrorMessage(t('Error deleting rule'));\n    }\n  };\n\n  renderLoading() {\n    return this.renderBody();\n  }\n\n  renderList() {\n    const {\n      params: {orgId},\n      location,\n      organization,\n      router,\n    } = this.props;\n    const {\n      loading,\n      ruleList = [],\n      ruleListPageLinks,\n      issueRuleCount,\n      alertRuleCount,\n    } = this.state;\n    const {query} = location;\n    const hasEditAccess = organization.access.includes('alerts:write');\n\n    const sort: {\n      asc: boolean;\n      field: 'date_added' | 'name' | ['incident_status', 'date_triggered'];\n    } = {\n      asc: query.asc === '1',\n      field: query.sort || 'date_added',\n    };\n    const {cursor: _cursor, page: _page, ...currentQuery} = query;\n    const isAlertRuleSort =\n      sort.field.includes('incident_status') || sort.field.includes('date_triggered');\n    const sortArrow = (\n      <IconArrow color=\"gray300\" size=\"xs\" direction={sort.asc ? 'up' : 'down'} />\n    );\n\n    return (\n      <Layout.Body>\n        <Layout.Main fullWidth>\n          {issueRuleCount !== undefined &&\n            issueRuleCount > 0 &&\n            alertRuleCount === 0 &&\n            !query.name && <HookHeader organization={organization} />}\n          <FilterBar\n            location={location}\n            onChangeFilter={this.handleChangeFilter}\n            onChangeSearch={this.handleChangeSearch}\n          />\n          <Teams provideUserTeams>\n            {({initiallyLoaded: loadedTeams, teams}) => (\n              <StyledPanelTable\n                headers={[\n                  <StyledSortLink\n                    key=\"name\"\n                    role=\"columnheader\"\n                    aria-sort={\n                      sort.field !== 'name'\n                        ? 'none'\n                        : sort.asc\n                        ? 'ascending'\n                        : 'descending'\n                    }\n                    to={{\n                      pathname: location.pathname,\n                      query: {\n                        ...currentQuery,\n                        // sort by name should start by ascending on first click\n                        asc: sort.field === 'name' && sort.asc ? undefined : '1',\n                        sort: 'name',\n                      },\n                    }}\n                  >\n                    {t('Alert Rule')} {sort.field === 'name' && sortArrow}\n                  </StyledSortLink>,\n\n                  <StyledSortLink\n                    key=\"status\"\n                    role=\"columnheader\"\n                    aria-sort={\n                      !isAlertRuleSort ? 'none' : sort.asc ? 'ascending' : 'descending'\n                    }\n                    to={{\n                      pathname: location.pathname,\n                      query: {\n                        ...currentQuery,\n                        asc: isAlertRuleSort && !sort.asc ? '1' : undefined,\n                        sort: ['incident_status', 'date_triggered'],\n                      },\n                    }}\n                  >\n                    {t('Status')} {isAlertRuleSort && sortArrow}\n                  </StyledSortLink>,\n\n                  t('Project'),\n                  t('Team'),\n                  t('Actions'),\n                ]}\n                isLoading={loading || !loadedTeams}\n                isEmpty={ruleList?.length === 0}\n                emptyMessage={t('No alert rules found for the current query.')}\n              >\n                <Projects orgId={orgId} slugs={this.projectsFromIncidents}>\n                  {({initiallyLoaded, projects}) =>\n                    ruleList.map(rule => (\n                      <RuleListRow\n                        // Metric and issue alerts can have the same id\n                        key={`${\n                          isIssueAlert(rule) ? AlertRuleType.METRIC : AlertRuleType.ISSUE\n                        }-${rule.id}`}\n                        projectsLoaded={initiallyLoaded}\n                        projects={projects as Project[]}\n                        rule={rule}\n                        orgId={orgId}\n                        onOwnerChange={this.handleOwnerChange}\n                        onDelete={this.handleDeleteRule}\n                        userTeams={new Set(teams.map(team => team.id))}\n                        hasDuplicateAlertRules={organization.features.includes(\n                          'duplicate-alert-rule'\n                        )}\n                        hasEditAccess={hasEditAccess}\n                      />\n                    ))\n                  }\n                </Projects>\n              </StyledPanelTable>\n            )}\n          </Teams>\n          <Pagination\n            pageLinks={ruleListPageLinks}\n            onCursor={(cursor, path, _direction) => {\n              let team = currentQuery.team;\n              // Keep team parameter, but empty to remove parameters\n              if (!team || team.length === 0) {\n                team = '';\n              }\n\n              router.push({\n                pathname: path,\n                query: {...currentQuery, team, cursor},\n              });\n            }}\n          />\n        </Layout.Main>\n      </Layout.Body>\n    );\n  }\n\n  renderBody() {\n    const {params, organization, router} = this.props;\n    const {orgId} = params;\n\n    return (\n      <SentryDocumentTitle title={t('Alerts')} orgSlug={orgId}>\n        <PageFiltersContainer>\n          <AlertHeader\n            organization={organization}\n            router={router}\n            activeTab=\"rules\"\n            projectSlugs={this.projectsFromIncidents}\n          />\n          {this.renderList()}\n        </PageFiltersContainer>\n      </SentryDocumentTitle>\n    );\n  }\n}\n\nclass AlertRulesListContainer extends Component<Props> {\n  componentDidMount() {\n    this.trackView();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {location} = this.props;\n    if (prevProps.location.query?.sort !== location.query?.sort) {\n      this.trackView();\n    }\n  }\n\n  trackView() {\n    const {organization, location} = this.props;\n\n    trackAdvancedAnalyticsEvent('alert_rules.viewed', {\n      organization,\n      sort: Array.isArray(location.query.sort)\n        ? location.query.sort.join(',')\n        : location.query.sort,\n    });\n  }\n\n  render() {\n    return <AlertRulesList {...this.props} />;\n  }\n}\n\nexport default withPageFilters(AlertRulesListContainer);\n\nconst StyledSortLink = styled(Link)`\n  color: inherit;\n\n  :hover {\n    color: inherit;\n  }\n`;\n\nconst StyledPanelTable = styled(PanelTable)`\n  position: static;\n  overflow: auto;\n  @media (min-width: ${p => p.theme.breakpoints.small}) {\n    overflow: initial;\n  }\n\n  grid-template-columns: 4fr auto 140px 60px auto;\n  white-space: nowrap;\n  font-size: ${p => p.theme.fontSizeMedium};\n`;\n"],"names":["AlertBadge","status","hideText","isIssue","statusText","t","Icon","IconCheckmark","color","IconIssues","IncidentStatus","IconFire","IconExclamation","Wrapper","AlertIconWrapper","icon","AlertIconBackground","IncidentStatusValue","p","IconDiamond","space","getProject","memoize","slug","projects","find","project","RuleListRow","rule","projectsLoaded","orgId","onDelete","onOwnerChange","userTeams","hasDuplicateAlertRules","hasEditAccess","assignee","setAssignee","useState","activeIncident","undefined","latestIncident","includes","editLink","isIssueAlert","id","duplicateLink","pathname","type","CombinedAlertType","query","duplicateRuleId","createFromDuplicate","referrer","detailsLink","ownerId","owner","split","teamActor","name","canEdit","has","alertLink","to","TitleLink","IssueStatusText","actions","key","label","hidden","priority","onAction","openConfirmModal","onConfirm","header","message","tct","confirmText","unassignedOption","value","MenuItemWrapper","StyledIconUser","size","searchKey","actor","disabled","projectRowTeams","filter","teams","filteredProjectTeams","projTeam","dropdownTeams","map","team","idx","inputValue","IconContainer","Label","text","concat","teamId","teamName","assigneeTeamActor","avatarElement","className","tooltip","TooltipWrapper","isHoverable","skipWrapper","title","AlertNameWrapper","FlexCenter","AlertNameAndStatus","AlertName","AlertIncidentDate","lastTriggered","date","dateCreated","dateClosed","criticalTrigger","triggers","AlertRuleTriggerType","warningTrigger","resolvedTrigger","resolveThreshold","trigger","iconDirection","iconColor","thresholdTypeText","thresholdType","AlertRuleThresholdType","direction","TriggerText","alertThreshold","toLocaleString","getThresholdUnits","aggregate","comparisonDelta","AlertRuleComparisonType","renderAlertRuleStatus","ProjectBadgeContainer","ProjectBadge","avatarSize","AssigneeWrapper","mini","style","height","margin","marginRight","maxHeight","onOpen","e","stopPropagation","items","alignMenu","onSelect","ownerValue","itemSize","searchPlaceholder","disableLabelPadding","emptyHidesInput","getActorProps","isOpen","DropdownButton","StyledChevron","ActionsRow","access","hasAccess","placement","triggerProps","showChevron","disabledKeys","Link","theme","overflowEllipsis","fontSizeLarge","breakpoints","xlarge","large","medium","gray300","IdBadge","DropdownBubble","IconChevron","IconUser","TextOverflow","HookHeader","HookOrDefault","hookName","AlertRulesList","AsyncComponent","activeFilters","router","location","this","props","cursor","_cursor","page","_page","currentQuery","push","length","projectId","params","endpoint","updatedRule","api","request","method","data","success","addMessage","error","async","alertPath","requestPromise","reloadData","_err","addErrorMessage","getEndpoints","expand","getTeamParams","sort","onRequestSuccess","stateKey","resp","issueRuleCount","getResponseHeader","alertRuleCount","setState","parseInt","projectsFromIncidents","ruleList","state","Set","flat","renderLoading","renderBody","renderList","organization","loading","ruleListPageLinks","asc","field","isAlertRuleSort","sortArrow","fullWidth","onChangeFilter","handleChangeFilter","onChangeSearch","handleChangeSearch","provideUserTeams","initiallyLoaded","loadedTeams","StyledPanelTable","headers","StyledSortLink","role","isLoading","isEmpty","emptyMessage","slugs","handleOwnerChange","handleDeleteRule","features","AlertRuleType","pageLinks","onCursor","path","_direction","orgSlug","activeTab","projectSlugs","AlertRulesListContainer","Component","componentDidMount","trackView","componentDidUpdate","prevProps","trackAdvancedAnalyticsEvent","Array","isArray","join","render","withPageFilters","PanelTable","small","fontSizeMedium"],"sourceRoot":""}