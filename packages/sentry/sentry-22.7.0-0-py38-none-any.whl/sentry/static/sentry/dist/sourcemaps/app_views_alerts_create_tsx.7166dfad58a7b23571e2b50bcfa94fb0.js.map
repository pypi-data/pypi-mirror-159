{"version":3,"file":"chunks/app_views_alerts_create_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/rules/metric/create.tsx","webpack:///./app/views/alerts/rules/metric/duplicate.tsx","webpack:///./app/views/alerts/create.tsx"],"sourcesContent":["import {RouteComponentProps} from 'react-router';\n\nimport {Organization, Project} from 'sentry/types';\nimport {metric} from 'sentry/utils/analytics';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {\n  createDefaultRule,\n  createRuleFromEventView,\n  createRuleFromWizardTemplate,\n} from 'sentry/views/alerts/rules/metric/constants';\nimport {WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n  projectId?: string;\n  ruleId?: string;\n};\n\ntype Props = {\n  eventView: EventView | undefined;\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n  sessionId?: string;\n  wizardTemplate?: WizardRuleTemplate;\n} & RouteComponentProps<RouteParams, {}>;\n\n/**\n * Show metric rules form with an empty rule. Redirects to alerts list after creation.\n */\nfunction MetricRulesCreate(props: Props) {\n  function handleSubmitSuccess(data: any) {\n    const {router, project} = props;\n    const {orgId} = props.params;\n    const alertRuleId: string | undefined = data\n      ? (data.id as string | undefined)\n      : undefined;\n\n    metric.endTransaction({name: 'saveAlertRule'});\n    router.push(\n      alertRuleId\n        ? {pathname: `/organizations/${orgId}/alerts/rules/details/${alertRuleId}/`}\n        : {\n            pathname: `/organizations/${orgId}/alerts/rules/`,\n            query: {project: project.id},\n          }\n    );\n  }\n\n  const {project, eventView, wizardTemplate, sessionId, userTeamIds, ...otherProps} =\n    props;\n  const defaultRule = eventView\n    ? createRuleFromEventView(eventView)\n    : wizardTemplate\n    ? createRuleFromWizardTemplate(wizardTemplate)\n    : createDefaultRule();\n\n  const projectTeamIds = new Set(project.teams.map(({id}) => id));\n  const defaultOwnerId = userTeamIds.find(id => projectTeamIds.has(id)) ?? null;\n  defaultRule.owner = defaultOwnerId && `team:${defaultOwnerId}`;\n\n  return (\n    <RuleForm\n      onSubmitSuccess={handleSubmitSuccess}\n      rule={{...defaultRule, projects: [project.slug]}}\n      sessionId={sessionId}\n      project={project}\n      userTeamIds={userTeamIds}\n      {...otherProps}\n    />\n  );\n}\n\nexport default MetricRulesCreate;\n","import {RouteComponentProps} from 'react-router';\nimport pick from 'lodash/pick';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport {Organization, Project} from 'sentry/types';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {uniqueId} from 'sentry/utils/guid';\nimport {\n  DuplicateActionFields,\n  DuplicateMetricFields,\n  DuplicateTriggerFields,\n} from 'sentry/views/alerts/rules/metric/constants';\nimport {MetricRule} from 'sentry/views/alerts/rules/metric/types';\nimport {WizardRuleTemplate} from 'sentry/views/alerts/wizard/options';\nimport AsyncView from 'sentry/views/asyncView';\n\nimport RuleForm from './ruleForm';\n\ntype RouteParams = {\n  orgId: string;\n};\n\ntype Props = {\n  organization: Organization;\n  project: Project;\n  userTeamIds: string[];\n  eventView?: EventView;\n  sessionId?: string;\n  wizardTemplate?: WizardRuleTemplate;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  duplicateTargetRule?: MetricRule;\n} & AsyncView['state'];\n\n/**\n * Show metric rules form with values from an existing rule. Redirects to alerts list after creation.\n */\n\nclass MetricRulesDuplicate extends AsyncView<Props, State> {\n  getEndpoints(): ReturnType<AsyncView['getEndpoints']> {\n    const {\n      params: {orgId},\n      location: {query},\n    } = this.props;\n\n    return [\n      [\n        'duplicateTargetRule',\n        `/organizations/${orgId}/alert-rules/${query.duplicateRuleId}/`,\n      ],\n    ];\n  }\n\n  handleSubmitSuccess = (data: any) => {\n    const {\n      router,\n      project,\n      params: {orgId},\n    } = this.props;\n    const alertRuleId: string | undefined = data\n      ? (data.id as string | undefined)\n      : undefined;\n\n    router.push(\n      alertRuleId\n        ? {pathname: `/organizations/${orgId}/alerts/rules/details/${alertRuleId}/`}\n        : {\n            pathname: `/organizations/${orgId}/alerts/rules/`,\n            query: {project: project.id},\n          }\n    );\n  };\n\n  renderBody() {\n    const {project, sessionId, userTeamIds, ...otherProps} = this.props;\n    const {duplicateTargetRule} = this.state;\n\n    if (!duplicateTargetRule) {\n      return this.renderLoading();\n    }\n\n    return (\n      <Layout.Main>\n        <RuleForm\n          onSubmitSuccess={this.handleSubmitSuccess}\n          rule={\n            {\n              ...pick(duplicateTargetRule, DuplicateMetricFields),\n              triggers: duplicateTargetRule.triggers.map(trigger => ({\n                ...pick(trigger, DuplicateTriggerFields),\n                actions: trigger.actions.map(action => ({\n                  inputChannelId: null,\n                  integrationId: undefined,\n                  options: null,\n                  sentryAppId: undefined,\n                  unsavedId: uniqueId(),\n                  unsavedDateCreated: new Date().toISOString(),\n                  ...pick(action, DuplicateActionFields),\n                })),\n              })),\n              name: duplicateTargetRule.name + ' copy',\n            } as MetricRule\n          }\n          sessionId={sessionId}\n          project={project}\n          userTeamIds={userTeamIds}\n          isDuplicateRule\n          {...otherProps}\n        />\n      </Layout.Main>\n    );\n  }\n}\n\nexport default MetricRulesDuplicate;\n","import {Component, Fragment} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\n\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport trackAdvancedAnalyticsEvent from 'sentry/utils/analytics/trackAdvancedAnalyticsEvent';\nimport EventView from 'sentry/utils/discover/eventView';\nimport {uniqueId} from 'sentry/utils/guid';\nimport Teams from 'sentry/utils/teams';\nimport BuilderBreadCrumbs from 'sentry/views/alerts/builder/builderBreadCrumbs';\nimport IssueRuleEditor from 'sentry/views/alerts/rules/issue';\nimport MetricRulesCreate from 'sentry/views/alerts/rules/metric/create';\nimport MetricRulesDuplicate from 'sentry/views/alerts/rules/metric/duplicate';\nimport {AlertRuleType} from 'sentry/views/alerts/types';\nimport {\n  AlertType as WizardAlertType,\n  AlertWizardAlertNames,\n  DEFAULT_WIZARD_TEMPLATE,\n  WizardRuleTemplate,\n} from 'sentry/views/alerts/wizard/options';\nimport {getAlertTypeFromAggregateDataset} from 'sentry/views/alerts/wizard/utils';\n\ntype RouteParams = {\n  orgId: string;\n  alertType?: AlertRuleType;\n  projectId?: string;\n};\n\ntype Props = RouteComponentProps<RouteParams, {}> & {\n  hasMetricAlerts: boolean;\n  organization: Organization;\n  project: Project;\n};\n\ntype State = {\n  alertType: AlertRuleType;\n};\n\nclass Create extends Component<Props, State> {\n  state = this.getInitialState();\n\n  getInitialState(): State {\n    const {organization, location, project, params, router} = this.props;\n    const {\n      createFromDiscover,\n      createFromWizard,\n      aggregate,\n      dataset,\n      eventTypes,\n      createFromDuplicate,\n    } = location?.query ?? {};\n    let alertType = AlertRuleType.ISSUE;\n\n    const hasAlertWizardV3 = organization.features.includes('alert-wizard-v3');\n\n    // Alerts can only be created via create from discover or alert wizard, until alert-wizard-v3 is fully implemented\n    if (hasAlertWizardV3) {\n      alertType = params.alertType || AlertRuleType.METRIC;\n\n      // TODO(taylangocmen): Remove redirect with aggregate && dataset && eventTypes, init from template\n      if (\n        alertType === AlertRuleType.METRIC &&\n        !(aggregate && dataset && eventTypes) &&\n        !createFromDuplicate\n      ) {\n        router.replace({\n          ...location,\n          pathname: `/organizations/${organization.slug}/alerts/new/${alertType}`,\n          query: {\n            ...location.query,\n            ...DEFAULT_WIZARD_TEMPLATE,\n            project: project.slug,\n          },\n        });\n      }\n    } else if (createFromDiscover) {\n      alertType = AlertRuleType.METRIC;\n    } else if (createFromWizard) {\n      if (aggregate && dataset && eventTypes) {\n        alertType = AlertRuleType.METRIC;\n      } else {\n        // Just to be explicit\n        alertType = AlertRuleType.ISSUE;\n      }\n    } else {\n      router.replace(`/organizations/${organization.slug}/alerts/${project.slug}/wizard`);\n    }\n\n    return {alertType};\n  }\n\n  componentDidMount() {\n    const {organization, project} = this.props;\n\n    const hasAlertWizardV3 = organization.features.includes('alert-wizard-v3');\n\n    trackAdvancedAnalyticsEvent('new_alert_rule.viewed', {\n      organization,\n      project_id: project.id,\n      session_id: this.sessionId,\n      alert_type: this.state.alertType,\n      duplicate_rule: this.isDuplicateRule ? 'true' : 'false',\n      wizard_v3: hasAlertWizardV3 ? 'true' : 'false',\n    });\n  }\n\n  /** Used to track analytics within one visit to the creation page */\n  sessionId = uniqueId();\n\n  get isDuplicateRule(): boolean {\n    const {location, organization} = this.props;\n    const createFromDuplicate = location?.query.createFromDuplicate === 'true';\n    const hasDuplicateAlertRules = organization.features.includes('duplicate-alert-rule');\n    return (\n      hasDuplicateAlertRules && createFromDuplicate && location?.query.duplicateRuleId\n    );\n  }\n\n  render() {\n    const {hasMetricAlerts, organization, project, location, routes} = this.props;\n    const {alertType} = this.state;\n    const {aggregate, dataset, eventTypes, createFromWizard, createFromDiscover} =\n      location?.query ?? {};\n    const wizardTemplate: WizardRuleTemplate = {\n      aggregate: aggregate ?? DEFAULT_WIZARD_TEMPLATE.aggregate,\n      dataset: dataset ?? DEFAULT_WIZARD_TEMPLATE.dataset,\n      eventTypes: eventTypes ?? DEFAULT_WIZARD_TEMPLATE.eventTypes,\n    };\n    const eventView = createFromDiscover ? EventView.fromLocation(location) : undefined;\n\n    let wizardAlertType: undefined | WizardAlertType;\n    if (createFromWizard && alertType === AlertRuleType.METRIC) {\n      wizardAlertType = wizardTemplate\n        ? getAlertTypeFromAggregateDataset(wizardTemplate)\n        : 'issues';\n    }\n\n    const title = t('New Alert Rule');\n\n    return (\n      <Fragment>\n        <SentryDocumentTitle title={title} projectSlug={project.slug} />\n\n        <Layout.Header>\n          <StyledHeaderContent>\n            <BuilderBreadCrumbs\n              organization={organization}\n              alertName={t('Set Conditions')}\n              title={wizardAlertType ? t('Select Alert') : title}\n              projectSlug={project.slug}\n              alertType={alertType}\n              routes={routes}\n              location={location}\n              canChangeProject\n            />\n            <Layout.Title>\n              {wizardAlertType\n                ? `${t('Set Conditions for')} ${AlertWizardAlertNames[wizardAlertType]}`\n                : title}\n            </Layout.Title>\n          </StyledHeaderContent>\n        </Layout.Header>\n        <Body>\n          <Teams provideUserTeams>\n            {({teams, initiallyLoaded}) =>\n              initiallyLoaded ? (\n                <Fragment>\n                  {(!hasMetricAlerts || alertType === AlertRuleType.ISSUE) && (\n                    <IssueRuleEditor\n                      {...this.props}\n                      project={project}\n                      userTeamIds={teams.map(({id}) => id)}\n                    />\n                  )}\n\n                  {hasMetricAlerts &&\n                    alertType === AlertRuleType.METRIC &&\n                    (this.isDuplicateRule ? (\n                      <MetricRulesDuplicate\n                        {...this.props}\n                        eventView={eventView}\n                        wizardTemplate={wizardTemplate}\n                        sessionId={this.sessionId}\n                        project={project}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    ) : (\n                      <MetricRulesCreate\n                        {...this.props}\n                        eventView={eventView}\n                        wizardTemplate={wizardTemplate}\n                        sessionId={this.sessionId}\n                        project={project}\n                        userTeamIds={teams.map(({id}) => id)}\n                      />\n                    ))}\n                </Fragment>\n              ) : (\n                <LoadingIndicator />\n              )\n            }\n          </Teams>\n        </Body>\n      </Fragment>\n    );\n  }\n}\n\nconst StyledHeaderContent = styled(Layout.HeaderContent)`\n  overflow: visible;\n`;\n\nconst Body = styled(Layout.Body)`\n  && {\n    padding: 0;\n    gap: 0;\n  }\n  grid-template-rows: 1fr;\n\n  @media (min-width: ${p => p.theme.breakpoints.large}) {\n    grid-template-columns: minmax(100px, auto) 400px;\n  }\n`;\n\nexport default Create;\n"],"names":["MetricRulesCreate","props","project","eventView","wizardTemplate","sessionId","userTeamIds","otherProps","defaultRule","createRuleFromEventView","createRuleFromWizardTemplate","createDefaultRule","projectTeamIds","Set","teams","map","id","defaultOwnerId","find","has","owner","onSubmitSuccess","data","router","orgId","params","alertRuleId","undefined","metric","name","push","pathname","query","rule","projects","slug","MetricRulesDuplicate","AsyncView","this","getEndpoints","location","duplicateRuleId","renderBody","duplicateTargetRule","state","handleSubmitSuccess","pick","DuplicateMetricFields","triggers","trigger","DuplicateTriggerFields","actions","action","inputChannelId","integrationId","options","sentryAppId","unsavedId","uniqueId","unsavedDateCreated","Date","toISOString","DuplicateActionFields","isDuplicateRule","renderLoading","Create","Component","getInitialState","organization","createFromDiscover","createFromWizard","aggregate","dataset","eventTypes","createFromDuplicate","alertType","AlertRuleType","features","includes","replace","DEFAULT_WIZARD_TEMPLATE","componentDidMount","hasAlertWizardV3","trackAdvancedAnalyticsEvent","project_id","session_id","alert_type","duplicate_rule","wizard_v3","render","hasMetricAlerts","routes","EventView","wizardAlertType","getAlertTypeFromAggregateDataset","title","t","Fragment","projectSlug","StyledHeaderContent","alertName","canChangeProject","AlertWizardAlertNames","Body","provideUserTeams","initiallyLoaded","Layout","p","theme","breakpoints","large"],"sourceRoot":""}