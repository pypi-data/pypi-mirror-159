{"version":3,"file":"chunks/app_utils_performance_histogram_utils_tsx-app_views_performance_transactionSummary_transactio-ef60f1.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/performance/histogram/utils.tsx","webpack:///./app/views/performance/transactionSummary/transactionEvents/utils.tsx","webpack:///../node_modules/lodash/maxBy.js"],"sourcesContent":["import {ColumnType} from 'sentry/utils/discover/fields';\nimport {getDuration} from 'sentry/utils/formatters';\n\nimport {HistogramData} from './types';\n\nexport function getBucketWidth(data: HistogramData) {\n  // We can assume that all buckets are of equal width, use the first two\n  // buckets to get the width. The value of each histogram function indicates\n  // the beginning of the bucket.\n  return data.length >= 2 ? data[1].bin - data[0].bin : 0;\n}\n\nexport function computeBuckets(data: HistogramData) {\n  const width = getBucketWidth(data);\n\n  return data.map(item => {\n    const bucket = item.bin;\n    return {\n      start: bucket,\n      end: bucket + width,\n    };\n  });\n}\n\nexport function formatHistogramData(\n  data: HistogramData,\n  {\n    precision,\n    type,\n    additionalFieldsFn,\n  }: {\n    additionalFieldsFn?: any;\n    precision?: number;\n    type?: ColumnType;\n  } = {}\n) {\n  const formatter = (value: number): string => {\n    switch (type) {\n      case 'duration':\n        const decimalPlaces = precision ?? (value < 1000 ? 0 : 3);\n        return getDuration(value / 1000, decimalPlaces, true);\n      case 'number':\n        // This is trying to avoid some of potential rounding errors that cause bins\n        // have the same label, if the number of bins doesn't visually match what is\n        // expected, check that this rounding is correct. If this issue persists,\n        // consider formatting the bin as a string in the response\n        const factor = 10 ** (precision ?? 0);\n        return (Math.round((value + Number.EPSILON) * factor) / factor).toLocaleString();\n      default:\n        throw new Error(`Unable to format type: ${type}`);\n    }\n  };\n  return data.map(item => {\n    return {\n      value: item.count,\n      name: formatter(item.bin),\n      ...(additionalFieldsFn?.(item.bin) ?? {}),\n    };\n  });\n}\n","import {Location, Query} from 'history';\n\nimport {t} from 'sentry/locale';\nimport {decodeScalar} from 'sentry/utils/queryString';\n\nimport {filterToField, SpanOperationBreakdownFilter} from '../filter';\nimport {TransactionFilterOptions} from '../utils';\n\nexport enum EventsDisplayFilterName {\n  p50 = 'p50',\n  p75 = 'p75',\n  p95 = 'p95',\n  p99 = 'p99',\n  p100 = 'p100',\n}\n\nexport type EventsDisplayFilter = {\n  label: string;\n  name: EventsDisplayFilterName;\n  query?: string[][];\n  sort?: {field: string; kind: 'desc' | 'asc'};\n};\n\nexport type EventsFilterOptions = {\n  [name in EventsDisplayFilterName]: EventsDisplayFilter;\n};\n\nexport type EventsFilterPercentileValues = {\n  [name in Exclude<EventsDisplayFilterName, EventsDisplayFilterName.p100>]: number;\n};\n\nexport function getEventsFilterOptions(\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter,\n  percentileValues?: EventsFilterPercentileValues\n): EventsFilterOptions {\n  const {p99, p95, p75, p50} = percentileValues\n    ? percentileValues\n    : {p99: 0, p95: 0, p75: 0, p50: 0};\n  return {\n    [EventsDisplayFilterName.p50]: {\n      name: EventsDisplayFilterName.p50,\n      query: p50 ? [['transaction.duration', `<=${p50.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p50'),\n    },\n    [EventsDisplayFilterName.p75]: {\n      name: EventsDisplayFilterName.p75,\n      query: p75 ? [['transaction.duration', `<=${p75.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p75'),\n    },\n    [EventsDisplayFilterName.p95]: {\n      name: EventsDisplayFilterName.p95,\n      query: p95 ? [['transaction.duration', `<=${p95.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p95'),\n    },\n    [EventsDisplayFilterName.p99]: {\n      name: EventsDisplayFilterName.p99,\n      query: p99 ? [['transaction.duration', `<=${p99.toFixed(0)}`]] : undefined,\n      sort: {\n        kind: 'desc',\n        field: filterToField(spanOperationBreakdownFilter) || 'transaction.duration',\n      },\n      label: t('p99'),\n    },\n    [EventsDisplayFilterName.p100]: {\n      name: EventsDisplayFilterName.p100,\n      label: t('p100'),\n    },\n  };\n}\n\nexport function eventsRouteWithQuery({\n  orgSlug,\n  transaction,\n  projectID,\n  query,\n}: {\n  orgSlug: string;\n  query: Query;\n  transaction: string;\n  projectID?: string | string[];\n}) {\n  const pathname = `/organizations/${orgSlug}/performance/summary/events/`;\n  return {\n    pathname,\n    query: {\n      transaction,\n      project: projectID,\n      environment: query.environment,\n      statsPeriod: query.statsPeriod,\n      start: query.start,\n      end: query.end,\n      query: query.query,\n    },\n  };\n}\n\nfunction stringToFilter(option: string) {\n  if (\n    Object.values(EventsDisplayFilterName).includes(option as EventsDisplayFilterName)\n  ) {\n    return option as EventsDisplayFilterName;\n  }\n\n  return EventsDisplayFilterName.p100;\n}\nexport function decodeEventsDisplayFilterFromLocation(location: Location) {\n  return stringToFilter(\n    decodeScalar(location.query.showTransactions, EventsDisplayFilterName.p100)\n  );\n}\n\nexport function filterEventsDisplayToLocationQuery(\n  option: EventsDisplayFilterName,\n  spanOperationBreakdownFilter: SpanOperationBreakdownFilter\n) {\n  const eventsFilterOptions = getEventsFilterOptions(spanOperationBreakdownFilter);\n  const kind = eventsFilterOptions[option].sort?.kind;\n  const field = eventsFilterOptions[option].sort?.field;\n\n  const query: {showTransactions: string; sort?: string} = {\n    showTransactions: option,\n  };\n  if (kind && field) {\n    query.sort = `${kind === 'desc' ? '-' : ''}${field}`;\n  }\n  return query;\n}\n\nexport function mapShowTransactionToPercentile(\n  showTransaction\n): EventsDisplayFilterName | undefined {\n  switch (showTransaction) {\n    case TransactionFilterOptions.OUTLIER:\n      return EventsDisplayFilterName.p100;\n    case TransactionFilterOptions.SLOW:\n      return EventsDisplayFilterName.p95;\n    default:\n      return undefined;\n  }\n}\n","var baseExtremum = require('./_baseExtremum'),\n    baseGt = require('./_baseGt'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * This method is like `_.max` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * the value is ranked. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Math\n * @param {Array} array The array to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {*} Returns the maximum value.\n * @example\n *\n * var objects = [{ 'n': 1 }, { 'n': 2 }];\n *\n * _.maxBy(objects, function(o) { return o.n; });\n * // => { 'n': 2 }\n *\n * // The `_.property` iteratee shorthand.\n * _.maxBy(objects, 'n');\n * // => { 'n': 2 }\n */\nfunction maxBy(array, iteratee) {\n  return (array && array.length)\n    ? baseExtremum(array, baseIteratee(iteratee, 2), baseGt)\n    : undefined;\n}\n\nmodule.exports = maxBy;\n"],"names":["getBucketWidth","data","length","bin","computeBuckets","width","map","item","bucket","start","end","formatHistogramData","precision","type","additionalFieldsFn","formatter","value","decimalPlaces","getDuration","factor","Math","round","Number","EPSILON","toLocaleString","Error","count","name","EventsDisplayFilterName","getEventsFilterOptions","spanOperationBreakdownFilter","percentileValues","p99","p95","p75","p50","query","toFixed","undefined","sort","kind","field","filterToField","label","t","p100","eventsRouteWithQuery","orgSlug","transaction","projectID","pathname","project","environment","statsPeriod","decodeEventsDisplayFilterFromLocation","location","option","decodeScalar","showTransactions","Object","values","includes","filterEventsDisplayToLocationQuery","eventsFilterOptions","mapShowTransactionToPercentile","showTransaction","TransactionFilterOptions","baseExtremum","baseGt","baseIteratee","module","exports","array","iteratee"],"sourceRoot":""}