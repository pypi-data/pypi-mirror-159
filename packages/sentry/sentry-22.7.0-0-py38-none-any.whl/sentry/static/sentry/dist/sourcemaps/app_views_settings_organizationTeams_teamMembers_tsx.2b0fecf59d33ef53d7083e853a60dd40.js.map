{"version":3,"file":"chunks/app_views_settings_organizationTeams_teamMembers_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/settings/organizationTeams/teamMembers.tsx"],"sourcesContent":["import {Component} from 'react';\nimport {RouteComponentProps} from 'react-router';\nimport styled from '@emotion/styled';\nimport debounce from 'lodash/debounce';\n\nimport {addErrorMessage, addSuccessMessage} from 'sentry/actionCreators/indicator';\nimport {\n  openInviteMembersModal,\n  openTeamAccessRequestModal,\n} from 'sentry/actionCreators/modal';\nimport {joinTeam, leaveTeam} from 'sentry/actionCreators/teams';\nimport {Client} from 'sentry/api';\nimport UserAvatar from 'sentry/components/avatar/userAvatar';\nimport Button from 'sentry/components/button';\nimport DropdownAutoComplete from 'sentry/components/dropdownAutoComplete';\nimport {Item} from 'sentry/components/dropdownAutoComplete/types';\nimport DropdownButton from 'sentry/components/dropdownButton';\nimport IdBadge from 'sentry/components/idBadge';\nimport Link from 'sentry/components/links/link';\nimport LoadingError from 'sentry/components/loadingError';\nimport LoadingIndicator from 'sentry/components/loadingIndicator';\nimport {Panel, PanelHeader, PanelItem} from 'sentry/components/panels';\nimport {IconSubtract, IconUser} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Config, Member, Organization} from 'sentry/types';\nimport withApi from 'sentry/utils/withApi';\nimport withConfig from 'sentry/utils/withConfig';\nimport withOrganization from 'sentry/utils/withOrganization';\nimport EmptyMessage from 'sentry/views/settings/components/emptyMessage';\n\ntype RouteParams = {\n  orgId: string;\n  teamId: string;\n};\n\ntype Props = {\n  api: Client;\n  config: Config;\n  organization: Organization;\n} & RouteComponentProps<RouteParams, {}>;\n\ntype State = {\n  dropdownBusy: boolean;\n  error: boolean;\n  loading: boolean;\n  orgMemberList: Member[];\n  teamMemberList: Member[];\n};\n\nclass TeamMembers extends Component<Props, State> {\n  state: State = {\n    loading: true,\n    error: false,\n    dropdownBusy: false,\n    teamMemberList: [],\n    orgMemberList: [],\n  };\n\n  componentDidMount() {\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: Props) {\n    const params = this.props.params;\n    if (\n      nextProps.params.teamId !== params.teamId ||\n      nextProps.params.orgId !== params.orgId\n    ) {\n      this.setState(\n        {\n          loading: true,\n          error: false,\n        },\n        this.fetchData\n      );\n    }\n  }\n\n  debouncedFetchMembersRequest = debounce(\n    (query: string) =>\n      this.setState({dropdownBusy: true}, () => this.fetchMembersRequest(query)),\n    200\n  );\n\n  removeMember(member: Member) {\n    const {params} = this.props;\n    leaveTeam(\n      this.props.api,\n      {\n        orgId: params.orgId,\n        teamId: params.teamId,\n        memberId: member.id,\n      },\n      {\n        success: () => {\n          this.setState({\n            teamMemberList: this.state.teamMemberList.filter(m => m.id !== member.id),\n          });\n          addSuccessMessage(t('Successfully removed member from team.'));\n        },\n        error: () =>\n          addErrorMessage(\n            t('There was an error while trying to remove a member from the team.')\n          ),\n      }\n    );\n  }\n\n  fetchMembersRequest = async (query: string) => {\n    const {params, api} = this.props;\n    const {orgId} = params;\n\n    try {\n      const data = await api.requestPromise(`/organizations/${orgId}/members/`, {\n        query: {query},\n      });\n      this.setState({\n        orgMemberList: data,\n        dropdownBusy: false,\n      });\n    } catch (_err) {\n      addErrorMessage(t('Unable to load organization members.'), {\n        duration: 2000,\n      });\n\n      this.setState({\n        dropdownBusy: false,\n      });\n    }\n  };\n\n  fetchData = async () => {\n    const {api, params} = this.props;\n\n    try {\n      const data = await api.requestPromise(\n        `/teams/${params.orgId}/${params.teamId}/members/`\n      );\n      this.setState({\n        teamMemberList: data,\n        loading: false,\n        error: false,\n      });\n    } catch (err) {\n      this.setState({\n        loading: false,\n        error: true,\n      });\n    }\n\n    this.fetchMembersRequest('');\n  };\n\n  addTeamMember = (selection: Item) => {\n    const {params} = this.props;\n\n    this.setState({loading: true});\n\n    // Reset members list after adding member to team\n    this.debouncedFetchMembersRequest('');\n\n    joinTeam(\n      this.props.api,\n      {\n        orgId: params.orgId,\n        teamId: params.teamId,\n        memberId: selection.value,\n      },\n      {\n        success: () => {\n          const orgMember = this.state.orgMemberList.find(\n            member => member.id === selection.value\n          );\n          if (orgMember === undefined) {\n            return;\n          }\n          this.setState({\n            loading: false,\n            error: false,\n            teamMemberList: this.state.teamMemberList.concat([orgMember]),\n          });\n          addSuccessMessage(t('Successfully added member to team.'));\n        },\n        error: () => {\n          this.setState({\n            loading: false,\n          });\n          addErrorMessage(t('Unable to add team member.'));\n        },\n      }\n    );\n  };\n\n  /**\n   * We perform an API request to support orgs with > 100 members (since that's the max API returns)\n   *\n   * @param {Event} e React Event when member filter input changes\n   */\n  handleMemberFilterChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({dropdownBusy: true});\n    this.debouncedFetchMembersRequest(e.target.value);\n  };\n\n  renderDropdown(hasWriteAccess: boolean) {\n    const {organization, params} = this.props;\n    const existingMembers = new Set(this.state.teamMemberList.map(member => member.id));\n\n    // members can add other members to a team if the `Open Membership` setting is enabled\n    // otherwise, `org:write` or `team:admin` permissions are required\n    const hasOpenMembership = !!organization?.openMembership;\n    const canAddMembers = hasOpenMembership || hasWriteAccess;\n\n    const items = (this.state.orgMemberList || [])\n      .filter(m => !existingMembers.has(m.id))\n      .map(m => ({\n        searchKey: `${m.name} ${m.email}`,\n        value: m.id,\n        label: (\n          <StyledUserListElement>\n            <StyledAvatar user={m} size={24} className=\"avatar\" />\n            <StyledNameOrEmail>{m.name || m.email}</StyledNameOrEmail>\n          </StyledUserListElement>\n        ),\n      }));\n\n    const menuHeader = (\n      <StyledMembersLabel>\n        {t('Members')}\n        <StyledCreateMemberLink\n          to=\"\"\n          onClick={() => openInviteMembersModal({source: 'teams'})}\n          data-test-id=\"invite-member\"\n        >\n          {t('Invite Member')}\n        </StyledCreateMemberLink>\n      </StyledMembersLabel>\n    );\n\n    return (\n      <DropdownAutoComplete\n        items={items}\n        alignMenu=\"right\"\n        onSelect={\n          canAddMembers\n            ? this.addTeamMember\n            : selection =>\n                openTeamAccessRequestModal({\n                  teamId: params.teamId,\n                  orgId: params.orgId,\n                  memberId: selection.value,\n                })\n        }\n        menuHeader={menuHeader}\n        emptyMessage={t('No members')}\n        onChange={this.handleMemberFilterChange}\n        busy={this.state.dropdownBusy}\n        onClose={() => this.debouncedFetchMembersRequest('')}\n      >\n        {({isOpen}) => (\n          <DropdownButton isOpen={isOpen} size=\"xs\" data-test-id=\"add-member\">\n            {t('Add Member')}\n          </DropdownButton>\n        )}\n      </DropdownAutoComplete>\n    );\n  }\n\n  removeButton(member: Member) {\n    return (\n      <Button\n        size=\"sm\"\n        icon={<IconSubtract size=\"xs\" isCircled />}\n        onClick={() => this.removeMember(member)}\n        aria-label={t('Remove')}\n      >\n        {t('Remove')}\n      </Button>\n    );\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <LoadingIndicator />;\n    }\n\n    if (this.state.error) {\n      return <LoadingError onRetry={this.fetchData} />;\n    }\n\n    const {params, organization, config} = this.props;\n    const {access} = organization;\n    const hasWriteAccess = access.includes('org:write') || access.includes('team:admin');\n\n    return (\n      <Panel>\n        <PanelHeader hasButtons>\n          <div>{t('Members')}</div>\n          <div style={{textTransform: 'none'}}>{this.renderDropdown(hasWriteAccess)}</div>\n        </PanelHeader>\n        {this.state.teamMemberList.length ? (\n          this.state.teamMemberList.map(member => {\n            const isSelf = member.email === config.user.email;\n            const canRemoveMember = hasWriteAccess || isSelf;\n            return (\n              <StyledMemberContainer key={member.id}>\n                <IdBadge avatarSize={36} member={member} useLink orgId={params.orgId} />\n                {canRemoveMember && this.removeButton(member)}\n              </StyledMemberContainer>\n            );\n          })\n        ) : (\n          <EmptyMessage icon={<IconUser size=\"xl\" />} size=\"large\">\n            {t('This team has no members')}\n          </EmptyMessage>\n        )}\n      </Panel>\n    );\n  }\n}\n\nconst StyledMemberContainer = styled(PanelItem)`\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst StyledUserListElement = styled('div')`\n  display: grid;\n  grid-template-columns: max-content 1fr;\n  gap: ${space(0.5)};\n  align-items: center;\n`;\n\nconst StyledNameOrEmail = styled('div')`\n  font-size: ${p => p.theme.fontSizeSmall};\n  ${p => p.theme.overflowEllipsis};\n`;\n\nconst StyledAvatar = styled(props => <UserAvatar {...props} />)`\n  min-width: 1.75em;\n  min-height: 1.75em;\n  width: 1.5em;\n  height: 1.5em;\n`;\n\nconst StyledMembersLabel = styled('div')`\n  display: grid;\n  grid-template-columns: 1fr max-content;\n  padding: ${space(1)} 0;\n  font-size: ${p => p.theme.fontSizeExtraSmall};\n  text-transform: uppercase;\n`;\n\nconst StyledCreateMemberLink = styled(Link)`\n  text-transform: none;\n`;\n\nexport default withConfig(withApi(withOrganization(TeamMembers)));\n"],"names":["TeamMembers","Component","loading","error","dropdownBusy","teamMemberList","orgMemberList","debounce","query","this","setState","fetchMembersRequest","async","params","api","props","orgId","data","requestPromise","_err","addErrorMessage","t","duration","teamId","err","selection","debouncedFetchMembersRequest","joinTeam","memberId","value","success","orgMember","state","find","member","id","undefined","concat","addSuccessMessage","e","target","componentDidMount","fetchData","UNSAFE_componentWillReceiveProps","nextProps","removeMember","leaveTeam","filter","m","renderDropdown","hasWriteAccess","organization","existingMembers","Set","map","canAddMembers","openMembership","items","has","searchKey","name","email","label","StyledUserListElement","StyledAvatar","user","size","className","StyledNameOrEmail","menuHeader","StyledMembersLabel","StyledCreateMemberLink","to","onClick","openInviteMembersModal","source","alignMenu","onSelect","addTeamMember","openTeamAccessRequestModal","emptyMessage","onChange","handleMemberFilterChange","busy","onClose","isOpen","removeButton","icon","isCircled","render","onRetry","config","access","includes","hasButtons","style","textTransform","length","isSelf","canRemoveMember","StyledMemberContainer","avatarSize","useLink","PanelItem","space","p","theme","fontSizeSmall","overflowEllipsis","fontSizeExtraSmall","Link","withConfig","withApi","withOrganization"],"sourceRoot":""}