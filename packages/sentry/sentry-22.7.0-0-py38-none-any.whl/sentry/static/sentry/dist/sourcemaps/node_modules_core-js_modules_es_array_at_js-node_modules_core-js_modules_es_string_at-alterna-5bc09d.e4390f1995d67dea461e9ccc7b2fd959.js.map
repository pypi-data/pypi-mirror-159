{"version":3,"file":"chunks/node_modules_core-js_modules_es_array_at_js-node_modules_core-js_modules_es_string_at-alterna-5bc09d.xxxxxxxxxxxxxxxxxxxx.js","mappings":"8OACA,IAAIA,EAAI,EAAQ,+CACZC,EAAW,EAAQ,kDACnBC,EAAoB,EAAQ,6DAC5BC,EAAsB,EAAQ,+DAC9BC,EAAmB,EAAQ,2DAI/BJ,EAAE,CAAEK,OAAQ,QAASC,OAAO,GAAQ,CAClCC,GAAI,SAAYC,GACd,IAAIC,EAAIR,EAASS,MACbC,EAAMT,EAAkBO,GACxBG,EAAgBT,EAAoBK,GACpCK,EAAID,GAAiB,EAAIA,EAAgBD,EAAMC,EACnD,OAAQC,EAAI,GAAKA,GAAKF,OAAOG,EAAYL,EAAEI,MAI/CT,EAAiB,O,wEClBjB,IAAIJ,EAAI,EAAQ,+CACZe,EAAc,EAAQ,8DACtBC,EAAyB,EAAQ,iEACjCb,EAAsB,EAAQ,+DAC9Bc,EAAW,EAAQ,kDACnBC,EAAQ,EAAQ,8CAEhBC,EAASJ,EAAY,GAAGI,QAS5BnB,EAAE,CAAEK,OAAQ,SAAUC,OAAO,EAAMc,OAPtBF,GAAM,WAEjB,MAAuB,WAAhB,KAAKX,IAAI,OAKmC,CACnDA,GAAI,SAAYC,GACd,IAAIa,EAAIJ,EAASD,EAAuBN,OACpCC,EAAMU,EAAEC,OACRV,EAAgBT,EAAoBK,GACpCK,EAAID,GAAiB,EAAIA,EAAgBD,EAAMC,EACnD,OAAQC,EAAI,GAAKA,GAAKF,OAAOG,EAAYK,EAAOE,EAAGR","sources":["webpack:///../node_modules/core-js/modules/es.array.at.js","webpack:///../node_modules/core-js/modules/es.string.at-alternative.js"],"sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar addToUnscopables = require('../internals/add-to-unscopables');\n\n// `Array.prototype.at` method\n// https://github.com/tc39/proposal-relative-indexing-method\n$({ target: 'Array', proto: true }, {\n  at: function at(index) {\n    var O = toObject(this);\n    var len = lengthOfArrayLike(O);\n    var relativeIndex = toIntegerOrInfinity(index);\n    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;\n    return (k < 0 || k >= len) ? undefined : O[k];\n  }\n});\n\naddToUnscopables('at');\n","'use strict';\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar toString = require('../internals/to-string');\nvar fails = require('../internals/fails');\n\nvar charAt = uncurryThis(''.charAt);\n\nvar FORCED = fails(function () {\n  // eslint-disable-next-line es-x/no-array-string-prototype-at -- safe\n  return 'ð ®·'.at(-2) !== '\\uD842';\n});\n\n// `String.prototype.at` method\n// https://github.com/tc39/proposal-relative-indexing-method\n$({ target: 'String', proto: true, forced: FORCED }, {\n  at: function at(index) {\n    var S = toString(requireObjectCoercible(this));\n    var len = S.length;\n    var relativeIndex = toIntegerOrInfinity(index);\n    var k = relativeIndex >= 0 ? relativeIndex : len + relativeIndex;\n    return (k < 0 || k >= len) ? undefined : charAt(S, k);\n  }\n});\n"],"names":["$","toObject","lengthOfArrayLike","toIntegerOrInfinity","addToUnscopables","target","proto","at","index","O","this","len","relativeIndex","k","undefined","uncurryThis","requireObjectCoercible","toString","fails","charAt","forced","S","length"],"sourceRoot":""}