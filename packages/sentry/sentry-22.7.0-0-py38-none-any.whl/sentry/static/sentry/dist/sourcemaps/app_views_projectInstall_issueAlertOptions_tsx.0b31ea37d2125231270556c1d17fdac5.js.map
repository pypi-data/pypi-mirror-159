{"version":3,"file":"chunks/app_views_projectInstall_issueAlertOptions_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/views/alerts/rules/metric/presets.tsx","webpack:///./app/components/forms/MultipleCheckboxField.tsx","webpack:///./app/views/projectInstall/issueAlertOptions.tsx"],"sourcesContent":["import {Client} from 'sentry/api';\nimport {IconGraph} from 'sentry/icons';\nimport {t} from 'sentry/locale';\nimport {Organization, Project} from 'sentry/types';\nimport {uniqueId} from 'sentry/utils/guid';\n\nimport {AlertType} from '../../wizard/options';\n\nimport {\n  ActionType,\n  AlertRuleComparisonType,\n  AlertRuleThresholdType,\n  AlertRuleTriggerType,\n  Dataset,\n  EventTypes,\n  TargetType,\n  Trigger,\n} from './types';\n\nexport type PresetContext = {\n  aggregate: string;\n  comparisonType: AlertRuleComparisonType;\n  dataset: Dataset;\n  eventTypes: EventTypes[];\n  name: string;\n  thresholdType: AlertRuleThresholdType;\n\n  triggers: Trigger[];\n  comparisonDelta?: number;\n  query?: string;\n  timeWindow?: number;\n};\nexport type Preset = {\n  Icon: typeof IconGraph;\n  // Will be shown on the corresponding alert type in the wizard.\n  alertType: AlertType;\n  description: string;\n  id: string;\n  makeContext(\n    client: Client,\n    project: Project,\n    organization: Organization\n  ): Promise<PresetContext>;\n  makeUnqueriedContext(project: Project, organization: Organization): PresetContext;\n  title: string;\n};\n\nasync function getHighestVolumeTransaction(\n  client: Client,\n  organizationSlug: string,\n  projectId: string\n): Promise<[string, number] | null> {\n  const result = await client.requestPromise(\n    `/organizations/${organizationSlug}/events/`,\n    {\n      method: 'GET',\n      data: {\n        statsPeriod: '7d',\n        project: projectId,\n        field: ['count()', 'transaction'],\n        sort: '-count',\n        referrer: 'alert.presets.highest-volume',\n        query: 'event.type:transaction',\n        per_page: 1,\n      },\n    }\n  );\n  const transaction = result.data[0];\n  if (transaction) {\n    return [transaction.transaction, transaction['count()']];\n  }\n  return null;\n}\n\nfunction makeTeamCriticalAlert(project: Project, threshold: number = 200) {\n  return {\n    label: AlertRuleTriggerType.CRITICAL,\n    alertThreshold: threshold,\n    actions: project.teams.slice(0, 4).map(team => ({\n      type: ActionType.EMAIL,\n      targetType: TargetType.TEAM,\n      targetIdentifier: team.id,\n      unsavedDateCreated: new Date().toISOString(),\n      inputChannelId: null,\n      options: null,\n      unsavedId: uniqueId(),\n    })),\n  };\n}\nfunction makeTeamWarningAlert(threshold: number = 100) {\n  return {\n    label: AlertRuleTriggerType.WARNING,\n    alertThreshold: threshold,\n    actions: [],\n  };\n}\n\nexport const PRESET_AGGREGATES: readonly Preset[] = [\n  {\n    id: 'p95-highest-volume',\n    title: t('Slow transactions'),\n    description: 'Get notified when important transactions are slower on average',\n    Icon: IconGraph,\n    alertType: 'trans_duration',\n    makeUnqueriedContext(project, _) {\n      return {\n        name: t('p95 Alert for %s', [project.slug]),\n        aggregate: 'p95(transaction.duration)',\n        dataset: Dataset.TRANSACTIONS,\n        eventTypes: [EventTypes.TRANSACTION],\n        timeWindow: 60,\n        comparisonDelta: 1440,\n        comparisonType: AlertRuleComparisonType.CHANGE,\n        thresholdType: AlertRuleThresholdType.ABOVE,\n        triggers: [makeTeamCriticalAlert(project), makeTeamWarningAlert()],\n      };\n    },\n    async makeContext(client, project, organization) {\n      const transaction = (\n        await getHighestVolumeTransaction(client, organization.slug, project.id)\n      )?.[0];\n      return {\n        ...this.makeUnqueriedContext(project, organization),\n        query: 'transaction:' + transaction,\n      };\n    },\n  },\n  {\n    id: 'throughput-highest-volume',\n    title: t('Throttled throughput'),\n    description: 'Send an alert when transaction throughput drops significantly',\n    Icon: IconGraph,\n    alertType: 'throughput',\n    makeUnqueriedContext(project, _) {\n      return {\n        name: t('Throughput Alert for %s', [project.slug]),\n        aggregate: 'count()',\n        dataset: Dataset.TRANSACTIONS,\n        eventTypes: [EventTypes.TRANSACTION],\n        timeWindow: 30,\n        comparisonDelta: 24 * 60 * 7,\n        comparisonType: AlertRuleComparisonType.CHANGE,\n        thresholdType: AlertRuleThresholdType.BELOW,\n        triggers: [makeTeamCriticalAlert(project, 500), makeTeamWarningAlert(300)],\n      };\n    },\n    async makeContext(client, project, organization) {\n      const transaction = (\n        await getHighestVolumeTransaction(client, organization.slug, project.id)\n      )?.[0];\n      return {\n        ...this.makeUnqueriedContext(project, organization),\n        query: 'transaction:' + transaction,\n      };\n    },\n  },\n  {\n    id: 'apdex-highest-volume',\n    title: t('Apdex Score'),\n    description:\n      'Learn when the ratio of satisfactory, tolerable, and frustrated requests drop',\n    Icon: IconGraph,\n    alertType: 'apdex',\n    makeUnqueriedContext(project, _) {\n      return {\n        name: t('Apdex regression for %s', [project.slug]),\n        aggregate: 'apdex(300)',\n        dataset: Dataset.TRANSACTIONS,\n        eventTypes: [EventTypes.TRANSACTION],\n        timeWindow: 30,\n        comparisonDelta: 24 * 60 * 7,\n        comparisonType: AlertRuleComparisonType.CHANGE,\n        thresholdType: AlertRuleThresholdType.BELOW,\n        triggers: [makeTeamCriticalAlert(project), makeTeamWarningAlert()],\n      };\n    },\n    async makeContext(client, project, organization) {\n      const transaction = (\n        await getHighestVolumeTransaction(client, organization.slug, project.id)\n      )?.[0];\n      return {\n        ...this.makeUnqueriedContext(project, organization),\n        query: 'transaction:' + transaction,\n      };\n    },\n  },\n] as const;\n","import {Key} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\nimport CheckboxFancy from '../checkboxFancy/checkboxFancy';\n\ntype CheckboxOption<T> = {\n  title: string;\n  value: T;\n  checked?: boolean;\n  disabled?: boolean;\n  intermediate?: boolean;\n};\n\ntype Props<T> = {\n  choices: CheckboxOption<T>[];\n  className?: string;\n  onClick?(item: T);\n  size?: string;\n};\n\nexport default function MultipleCheckboxField<T extends Key>(props: Props<T>) {\n  return (\n    <div className={props.className}>\n      {props.choices.map(option => (\n        <CheckboxWrapper key={option.value.toString()}>\n          <CheckboxFancy\n            size={props.size}\n            isDisabled={option.disabled}\n            isChecked={option.checked}\n            isIndeterminate={option.intermediate}\n            onClick={() => {\n              props.onClick?.(option.value);\n            }}\n          />\n          <CheckboxText>{option.title}</CheckboxText>\n        </CheckboxWrapper>\n      ))}\n    </div>\n  );\n}\n\nconst CheckboxWrapper = styled('div')`\n  margin-bottom: ${space(2)};\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nconst CheckboxText = styled('span')`\n  margin-left: ${space(1)};\n`;\n","import {Fragment} from 'react';\nimport {css} from '@emotion/react';\nimport styled from '@emotion/styled';\nimport * as Sentry from '@sentry/react';\nimport isEqual from 'lodash/isEqual';\n\nimport AsyncComponent from 'sentry/components/asyncComponent';\nimport Input from 'sentry/components/forms/controls/input';\nimport RadioGroup from 'sentry/components/forms/controls/radioGroup';\nimport MultipleCheckboxField from 'sentry/components/forms/MultipleCheckboxField';\nimport SelectControl from 'sentry/components/forms/selectControl';\nimport PageHeading from 'sentry/components/pageHeading';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Organization} from 'sentry/types';\nimport withOrganization from 'sentry/utils/withOrganization';\n\nimport {PRESET_AGGREGATES} from '../alerts/rules/metric/presets';\n\nenum MetricValues {\n  ERRORS,\n  USERS,\n}\nenum Actions {\n  ALERT_ON_EVERY_ISSUE,\n  CUSTOMIZED_ALERTS,\n  CREATE_ALERT_LATER,\n}\n\nconst UNIQUE_USER_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventUniqueUserFrequencyCondition';\nconst EVENT_FREQUENCY_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyCondition';\nconst NOTIFY_EVENT_ACTION = 'sentry.rules.actions.notify_event.NotifyEventAction';\nexport const EVENT_FREQUENCY_PERCENT_CONDITION =\n  'sentry.rules.conditions.event_frequency.EventFrequencyPercentCondition';\n\nconst METRIC_CONDITION_MAP = {\n  [MetricValues.ERRORS]: EVENT_FREQUENCY_CONDITION,\n  [MetricValues.USERS]: UNIQUE_USER_FREQUENCY_CONDITION,\n} as const;\n\nconst DEFAULT_PLACEHOLDER_VALUE = '10';\n\ntype StateUpdater = (updatedData: RequestDataFragment) => void;\ntype Props = AsyncComponent['props'] & {\n  onChange: StateUpdater;\n  organization: Organization;\n};\n\ntype State = AsyncComponent['state'] & {\n  alertSetting: string;\n  // TODO(ts): When we have alert conditional types, convert this\n  conditions: any;\n  interval: string;\n  intervalChoices: [string, string][] | undefined;\n  metric: MetricValues;\n  metricAlertPresets: Set<string>;\n\n  threshold: string;\n};\n\ntype RequestDataFragment = {\n  actionMatch: string;\n  actions: {id: string}[];\n  conditions: {id: string; interval: string; value: string}[] | undefined;\n  defaultRules: boolean;\n  frequency: number;\n  metricAlertPresets: string[];\n  name: string;\n  shouldCreateCustomRule: boolean;\n};\n\nfunction getConditionFrom(\n  interval: string,\n  metricValue: MetricValues,\n  threshold: string\n): {id: string; interval: string; value: string} {\n  let condition: string;\n  switch (metricValue) {\n    case MetricValues.ERRORS:\n      condition = EVENT_FREQUENCY_CONDITION;\n      break;\n    case MetricValues.USERS:\n      condition = UNIQUE_USER_FREQUENCY_CONDITION;\n      break;\n    default:\n      throw new RangeError('Supplied metric value is not handled');\n  }\n  return {\n    interval,\n    id: condition,\n    value: threshold,\n  };\n}\n\nfunction unpackConditions(conditions: any[]) {\n  const equalityReducer = (acc, curr) => {\n    if (!acc || !curr || !isEqual(acc, curr)) {\n      return null;\n    }\n    return acc;\n  };\n\n  const intervalChoices = conditions\n    .map(condition => condition.formFields?.interval?.choices)\n    .reduce(equalityReducer);\n  return {intervalChoices, interval: intervalChoices?.[0]?.[0]};\n}\n\nclass IssueAlertOptions extends AsyncComponent<Props, State> {\n  getDefaultState(): State {\n    return {\n      ...super.getDefaultState(),\n      conditions: [],\n      intervalChoices: [],\n      alertSetting: Actions.CREATE_ALERT_LATER.toString(),\n      metric: MetricValues.ERRORS,\n      interval: '',\n      threshold: '',\n      metricAlertPresets: new Set(),\n    };\n  }\n\n  getAvailableMetricOptions() {\n    return [\n      {value: MetricValues.ERRORS, label: t('occurrences of')},\n      {value: MetricValues.USERS, label: t('users affected by')},\n    ].filter(({value}) => {\n      return this.state.conditions?.some?.(\n        object => object?.id === METRIC_CONDITION_MAP[value]\n      );\n    });\n  }\n\n  getIssueAlertsChoices(\n    hasProperlyLoadedConditions: boolean\n  ): [string, string | React.ReactElement][] {\n    const options: [string, React.ReactNode][] = [\n      [Actions.CREATE_ALERT_LATER.toString(), t(\"I'll create my own alerts later\")],\n      [Actions.ALERT_ON_EVERY_ISSUE.toString(), t('Alert me on every new issue')],\n    ];\n\n    if (hasProperlyLoadedConditions) {\n      options.push([\n        Actions.CUSTOMIZED_ALERTS.toString(),\n        <CustomizeAlertsGrid\n          key={Actions.CUSTOMIZED_ALERTS}\n          onClick={e => {\n            // XXX(epurkhiser): The `e.preventDefault` here is needed to stop\n            // propagation of the click up to the label, causing it to focus\n            // the radio input and lose focus on the select.\n            e.preventDefault();\n            const alertSetting = Actions.CUSTOMIZED_ALERTS.toString();\n            this.setStateAndUpdateParents({alertSetting});\n          }}\n        >\n          {t('When there are more than')}\n          <InlineInput\n            type=\"number\"\n            min=\"0\"\n            name=\"\"\n            placeholder={DEFAULT_PLACEHOLDER_VALUE}\n            value={this.state.threshold}\n            onChange={threshold =>\n              this.setStateAndUpdateParents({threshold: threshold.target.value})\n            }\n            data-test-id=\"range-input\"\n          />\n          <InlineSelectControl\n            value={this.state.metric}\n            options={this.getAvailableMetricOptions()}\n            onChange={metric => this.setStateAndUpdateParents({metric: metric.value})}\n            data-test-id=\"metric-select-control\"\n          />\n          {t('a unique error in')}\n          <InlineSelectControl\n            value={this.state.interval}\n            options={this.state.intervalChoices?.map(([value, label]) => ({\n              value,\n              label,\n            }))}\n            onChange={interval =>\n              this.setStateAndUpdateParents({interval: interval.value})\n            }\n            data-test-id=\"interval-select-control\"\n          />\n        </CustomizeAlertsGrid>,\n      ]);\n    }\n    return options.map(([choiceValue, node]) => [\n      choiceValue,\n      <RadioItemWrapper key={choiceValue}>{node}</RadioItemWrapper>,\n    ]);\n  }\n\n  getUpdatedData(): RequestDataFragment {\n    let defaultRules: boolean;\n    let shouldCreateCustomRule: boolean;\n    const alertSetting: Actions = parseInt(this.state.alertSetting, 10);\n    switch (alertSetting) {\n      case Actions.ALERT_ON_EVERY_ISSUE:\n        defaultRules = true;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CREATE_ALERT_LATER:\n        defaultRules = false;\n        shouldCreateCustomRule = false;\n        break;\n      case Actions.CUSTOMIZED_ALERTS:\n        defaultRules = false;\n        shouldCreateCustomRule = true;\n        break;\n      default:\n        throw new RangeError('Supplied alert creation action is not handled');\n    }\n\n    return {\n      defaultRules,\n      shouldCreateCustomRule,\n      name: 'Send a notification for new issues',\n      conditions:\n        this.state.interval.length > 0 && this.state.threshold.length > 0\n          ? [\n              getConditionFrom(\n                this.state.interval,\n                this.state.metric,\n                this.state.threshold\n              ),\n            ]\n          : undefined,\n      actions: [{id: NOTIFY_EVENT_ACTION}],\n      actionMatch: 'all',\n      frequency: 5,\n      metricAlertPresets: Array.from(this.state.metricAlertPresets),\n    };\n  }\n\n  setStateAndUpdateParents<K extends keyof State>(\n    state:\n      | ((\n          prevState: Readonly<State>,\n          props: Readonly<Props>\n        ) => Pick<State, K> | State | null)\n      | Pick<State, K>\n      | State\n      | null,\n    callback?: () => void\n  ): void {\n    this.setState(state, () => {\n      callback?.();\n      this.props.onChange(this.getUpdatedData());\n    });\n  }\n\n  getEndpoints(): ReturnType<AsyncComponent['getEndpoints']> {\n    return [['conditions', `/projects/${this.props.organization.slug}/rule-conditions/`]];\n  }\n\n  onLoadAllEndpointsSuccess(): void {\n    const conditions = this.state.conditions?.filter?.(object =>\n      Object.values(METRIC_CONDITION_MAP).includes(object?.id)\n    );\n\n    if (!conditions || conditions.length === 0) {\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    const {intervalChoices, interval} = unpackConditions(conditions);\n    if (!intervalChoices || !interval) {\n      Sentry.withScope(scope => {\n        scope.setExtra('props', this.props);\n        scope.setExtra('state', this.state);\n        Sentry.captureException(\n          new Error('Interval choices or sent from API endpoint is inconsistent or empty')\n        );\n      });\n      this.setStateAndUpdateParents({\n        conditions: undefined,\n      });\n      return;\n    }\n\n    this.setStateAndUpdateParents({\n      conditions,\n      intervalChoices,\n      interval,\n    });\n  }\n\n  renderBody(): React.ReactElement {\n    const issueAlertOptionsChoices = this.getIssueAlertsChoices(\n      this.state.conditions?.length > 0\n    );\n    const showMetricAlertSelections =\n      !!this.props.organization.experiments.MetricAlertOnProjectCreationExperiment;\n    return (\n      <Fragment>\n        <PageHeadingWithTopMargins withMargins>\n          {t('Set your default alert settings')}\n        </PageHeadingWithTopMargins>\n        <Content>\n          {showMetricAlertSelections && <Subheading>{t('Issue Alerts')}</Subheading>}\n          <RadioGroupWithPadding\n            choices={issueAlertOptionsChoices}\n            label={t('Options for creating an alert')}\n            onChange={alertSetting => this.setStateAndUpdateParents({alertSetting})}\n            value={this.state.alertSetting}\n          />\n          {showMetricAlertSelections && (\n            <Fragment>\n              <Subheading>{t('Performance Alerts')}</Subheading>\n              <MultipleCheckboxField\n                size=\"24px\"\n                choices={PRESET_AGGREGATES.map(agg => ({\n                  title: agg.description,\n                  value: agg.id,\n                  checked: this.state.metricAlertPresets.has(agg.id),\n                }))}\n                css={CheckboxFieldStyles}\n                onClick={selectedItem => {\n                  const next = new Set(this.state.metricAlertPresets);\n                  if (next.has(selectedItem)) {\n                    next.delete(selectedItem);\n                  } else {\n                    next.add(selectedItem);\n                  }\n                  this.setStateAndUpdateParents({\n                    metricAlertPresets: next,\n                  });\n                }}\n              />\n            </Fragment>\n          )}\n        </Content>\n      </Fragment>\n    );\n  }\n}\n\nexport default withOrganization(IssueAlertOptions);\n\nconst CheckboxFieldStyles = css`\n  margin-top: ${space(1)};\n`;\n\nconst Content = styled('div')`\n  padding-top: ${space(2)};\n  padding-bottom: ${space(4)};\n`;\n\nconst CustomizeAlertsGrid = styled('div')`\n  display: grid;\n  grid-template-columns: repeat(5, max-content);\n  gap: ${space(1)};\n  align-items: center;\n`;\nconst InlineInput = styled(Input)`\n  width: 80px;\n`;\nconst InlineSelectControl = styled(SelectControl)`\n  width: 160px;\n`;\nconst RadioGroupWithPadding = styled(RadioGroup)`\n  margin-bottom: ${space(2)};\n`;\nconst PageHeadingWithTopMargins = styled(PageHeading)`\n  margin-top: 65px;\n  margin-bottom: 0;\n  padding-bottom: ${space(3)};\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n`;\nconst RadioItemWrapper = styled('div')`\n  min-height: 35px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n`;\nconst Subheading = styled('b')`\n  display: block;\n`;\n"],"names":["async","getHighestVolumeTransaction","client","organizationSlug","projectId","transaction","requestPromise","method","data","statsPeriod","project","field","sort","referrer","query","per_page","makeTeamCriticalAlert","threshold","label","AlertRuleTriggerType","alertThreshold","actions","teams","slice","map","team","type","ActionType","targetType","TargetType","targetIdentifier","id","unsavedDateCreated","Date","toISOString","inputChannelId","options","unsavedId","uniqueId","makeTeamWarningAlert","PRESET_AGGREGATES","title","t","description","Icon","IconGraph","alertType","makeUnqueriedContext","_","name","slug","aggregate","dataset","Dataset","eventTypes","EventTypes","timeWindow","comparisonDelta","comparisonType","AlertRuleComparisonType","thresholdType","AlertRuleThresholdType","triggers","organization","this","MultipleCheckboxField","props","className","choices","option","CheckboxWrapper","size","isDisabled","disabled","isChecked","checked","isIndeterminate","intermediate","onClick","value","CheckboxText","toString","space","MetricValues","Actions","UNIQUE_USER_FREQUENCY_CONDITION","EVENT_FREQUENCY_CONDITION","EVENT_FREQUENCY_PERCENT_CONDITION","METRIC_CONDITION_MAP","ERRORS","USERS","getConditionFrom","interval","metricValue","condition","RangeError","IssueAlertOptions","AsyncComponent","getDefaultState","super","conditions","intervalChoices","alertSetting","CREATE_ALERT_LATER","metric","metricAlertPresets","Set","getAvailableMetricOptions","filter","state","some","object","getIssueAlertsChoices","hasProperlyLoadedConditions","ALERT_ON_EVERY_ISSUE","push","CUSTOMIZED_ALERTS","CustomizeAlertsGrid","e","preventDefault","setStateAndUpdateParents","InlineInput","min","placeholder","onChange","target","InlineSelectControl","choiceValue","node","RadioItemWrapper","getUpdatedData","defaultRules","shouldCreateCustomRule","parseInt","length","undefined","actionMatch","frequency","Array","from","callback","setState","getEndpoints","onLoadAllEndpointsSuccess","Object","values","includes","formFields","reduce","acc","curr","isEqual","unpackConditions","Sentry","scope","setExtra","Error","renderBody","issueAlertOptionsChoices","showMetricAlertSelections","experiments","MetricAlertOnProjectCreationExperiment","Fragment","PageHeadingWithTopMargins","withMargins","Content","Subheading","RadioGroupWithPadding","agg","has","css","CheckboxFieldStyles","selectedItem","next","delete","add","withOrganization","Input","SelectControl","RadioGroup","PageHeading"],"sourceRoot":""}