{"version":3,"file":"chunks/app_views_replays_details_tsx.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./app/utils/getUrlPathname.tsx","webpack:///./app/views/replays/detail/asideTabs.tsx","webpack:///./app/components/replays/keyMetrics.tsx","webpack:///./app/views/replays/detail/detailLayout.tsx","webpack:///./app/views/replays/details.tsx"],"sourcesContent":["export default function getUrlPathname(url: string) {\n  try {\n    return new URL(url).pathname;\n  } catch {\n    return undefined;\n  }\n}\n","import styled from '@emotion/styled';\n\nimport NavTabs from 'sentry/components/navTabs';\nimport Placeholder from 'sentry/components/placeholder';\nimport {t} from 'sentry/locale';\nimport useUrlParams from 'sentry/utils/replays/hooks/useUrlParams';\nimport ReplayReader from 'sentry/utils/replays/replayReader';\n\nimport Breadcrumbs from './breadcrumbs';\nimport TagPanel from './tagPanel';\n\nconst TABS = {\n  breadcrumbs: t('Breadcrumbs'),\n  tags: t('Tags'),\n};\n\ntype Props = {\n  replay: ReplayReader | null;\n};\n\nfunction renderTabContent(key: string, loadedReplay: ReplayReader) {\n  if (key === 'tags') {\n    return <TagPanel replay={loadedReplay} />;\n  }\n\n  return <Breadcrumbs />;\n}\n\nfunction AsideTabs({replay}: Props) {\n  const {getParamValue, setParamValue} = useUrlParams('t_side', 'breadcrumbs');\n  const active = getParamValue();\n\n  return (\n    <Container>\n      <NavTabs underlined>\n        {Object.entries(TABS).map(([tab, label]) => {\n          return (\n            <li key={tab} className={active === tab ? 'active' : ''}>\n              <a onClick={() => setParamValue(tab)}>{label}</a>\n            </li>\n          );\n        })}\n      </NavTabs>\n      {replay ? renderTabContent(active, replay) : <Placeholder height=\"100%\" />}\n    </Container>\n  );\n}\n\n// FYI: Since the Replay Player has dynamic height based\n// on the width of the window,\n// height: 0; will helps us to reset the height\n// min-height: 100%; will helps us to grow at the same height of Player\nconst Container = styled('div')`\n  width: 100%;\n  display: grid;\n  grid-template-rows: auto 1fr;\n  height: 0;\n  min-height: 100%;\n  @media only screen and (max-width: ${p => p.theme.breakpoints.large}) {\n    height: fit-content;\n    max-height: 400px;\n  }\n`;\n\nexport default AsideTabs;\n","import {Fragment} from 'react';\nimport styled from '@emotion/styled';\n\nimport space from 'sentry/styles/space';\n\n/**\n * Very similar to app/components/keyValueTable.tsx\n * TODO(replay): move into app/components\n */\n\ntype Props = {\n  keyName: React.ReactNode;\n  value: React.ReactNode;\n};\n\nexport const KeyMetrics = styled('dl')`\n  margin: 0; /* Reset default dl styles */\n\n  display: grid;\n  grid-template-rows: auto auto;\n  grid-auto-columns: 1fr;\n  grid-auto-flow: column;\n  gap: ${space(0.5)} ${space(2)};\n\n  text-align: right;\n`;\n\nexport const KeyMetricData = ({keyName, value}: Props) => {\n  return (\n    <Fragment>\n      <Key>{keyName}</Key>\n      <Value>{value}</Value>\n    </Fragment>\n  );\n};\n\nconst Key = styled('dt')`\n  color: ${p => p.theme.subText};\n  font-size: 14px;\n  font-weight: bold;\n`;\n\nconst Value = styled('dt')`\n  color: ${p => p.theme.textColor};\n  font-weight: normal;\n`;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport Breadcrumbs from 'sentry/components/breadcrumbs';\nimport Duration from 'sentry/components/duration';\nimport FeatureBadge from 'sentry/components/featureBadge';\nimport {FeatureFeedback} from 'sentry/components/featureFeedback';\nimport UserBadge, {StyledName} from 'sentry/components/idBadge/userBadge';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport Placeholder from 'sentry/components/placeholder';\nimport {KeyMetricData, KeyMetrics} from 'sentry/components/replays/keyMetrics';\nimport {useReplayContext} from 'sentry/components/replays/replayContext';\nimport SentryDocumentTitle from 'sentry/components/sentryDocumentTitle';\nimport TimeSince from 'sentry/components/timeSince';\nimport {t} from 'sentry/locale';\nimport space from 'sentry/styles/space';\nimport {Crumb} from 'sentry/types/breadcrumbs';\nimport {Event} from 'sentry/types/event';\nimport getUrlPathname from 'sentry/utils/getUrlPathname';\n\ntype Props = {\n  children: React.ReactNode;\n  orgId: string;\n};\n\nfunction DetailLayout({children, orgId}: Props) {\n  const {replay} = useReplayContext();\n\n  const event = replay?.getEvent();\n  const crumbs = replay?.getRawCrumbs();\n\n  const title = event ? `${event.id} - Replays - ${orgId}` : `Replays - ${orgId}`;\n\n  return (\n    <SentryDocumentTitle title={title}>\n      <React.Fragment>\n        <Layout.Header>\n          <Layout.HeaderContent>\n            <Breadcrumbs\n              crumbs={[\n                {\n                  to: `/organizations/${orgId}/replays/`,\n                  label: t('Replays'),\n                },\n                {\n                  label: (\n                    <React.Fragment>\n                      {t('Replay Details')}\n                      <FeatureBadge type=\"alpha\" />\n                    </React.Fragment>\n                  ),\n                },\n              ]}\n            />\n          </Layout.HeaderContent>\n          <ButtonActionsWrapper>\n            <FeatureFeedback featureName=\"replay\" />\n          </ButtonActionsWrapper>\n          <React.Fragment>\n            <Layout.HeaderContent>\n              <EventHeader event={event} />\n            </Layout.HeaderContent>\n            <MetaDataColumn>\n              <EventMetaData event={event} crumbs={crumbs} />\n            </MetaDataColumn>\n          </React.Fragment>\n        </Layout.Header>\n        {children}\n      </React.Fragment>\n    </SentryDocumentTitle>\n  );\n}\n\nconst HeaderPlaceholder = styled(function HeaderPlaceholder(\n  props: React.ComponentProps<typeof Placeholder>\n) {\n  return <Placeholder width=\"100%\" height=\"19px\" {...props} />;\n})`\n  background-color: ${p => p.theme.background};\n`;\n\nfunction EventHeader({event}: {event: Event | undefined}) {\n  if (!event) {\n    return <HeaderPlaceholder width=\"500px\" height=\"48px\" />;\n  }\n\n  const urlTag = event.tags.find(({key}) => key === 'url');\n  const pathname = getUrlPathname(urlTag?.value ?? '') ?? '';\n\n  return (\n    <BigNameUserBadge\n      avatarSize={32}\n      user={{\n        username: event.user?.username ?? '',\n        id: event.user?.id ?? '',\n        ip_address: event.user?.ip_address ?? '',\n        name: event.user?.name ?? '',\n        email: event.user?.email ?? '',\n      }}\n      // this is the subheading for the avatar, so displayEmail in this case is a misnomer\n      displayEmail={pathname}\n    />\n  );\n}\n\nconst MetaDataColumn = styled(Layout.HeaderActions)`\n  width: 325px;\n`;\n\nfunction EventMetaData({\n  event,\n  crumbs,\n}: {\n  crumbs: Crumb[] | undefined;\n  event: Event | undefined;\n}) {\n  const {duration} = useReplayContext();\n\n  const errors = crumbs?.filter(crumb => crumb.type === 'error').length;\n\n  return (\n    <KeyMetrics>\n      <KeyMetricData\n        keyName={t('Timestamp')}\n        value={event ? <TimeSince date={event.dateReceived} /> : <HeaderPlaceholder />}\n      />\n      <KeyMetricData\n        keyName={t('Duration')}\n        value={\n          duration !== undefined ? (\n            <Duration\n              seconds={Math.floor(msToSec(duration || 0)) || 1}\n              abbreviation\n              exact\n            />\n          ) : (\n            <HeaderPlaceholder />\n          )\n        }\n      />\n      <KeyMetricData keyName={t('Errors')} value={errors ?? <HeaderPlaceholder />} />\n    </KeyMetrics>\n  );\n}\n\nfunction msToSec(ms: number) {\n  return ms / 1000;\n}\n\nconst BigNameUserBadge = styled(UserBadge)`\n  align-items: flex-start;\n\n  ${StyledName} {\n    font-size: 26px;\n  }\n`;\n\n// TODO(replay); This could make a lot of sense to put inside HeaderActions by default\nconst ButtonActionsWrapper = styled(Layout.HeaderActions)`\n  display: grid;\n  grid-template-columns: repeat(2, max-content);\n  justify-content: flex-end;\n  gap: ${space(1)};\n`;\n\nexport default DetailLayout;\n","import React from 'react';\nimport styled from '@emotion/styled';\n\nimport ErrorBoundary from 'sentry/components/errorBoundary';\nimport DetailedError from 'sentry/components/errors/detailedError';\nimport NotFound from 'sentry/components/errors/notFound';\nimport {HeaderContainer} from 'sentry/components/events/interfaces/spans/header';\nimport * as Layout from 'sentry/components/layouts/thirds';\nimport ReplayTimeline from 'sentry/components/replays/breadcrumbs/replayTimeline';\nimport {Provider as ReplayContextProvider} from 'sentry/components/replays/replayContext';\nimport ReplayView from 'sentry/components/replays/replayView';\nimport {t} from 'sentry/locale';\nimport {PageContent} from 'sentry/styles/organization';\nimport space from 'sentry/styles/space';\nimport useFullscreen from 'sentry/utils/replays/hooks/useFullscreen';\nimport useReplayData from 'sentry/utils/replays/hooks/useReplayData';\nimport {useRouteContext} from 'sentry/utils/useRouteContext';\n\nimport AsideTabs from './detail/asideTabs';\nimport DetailLayout from './detail/detailLayout';\nimport FocusArea from './detail/focusArea';\nimport FocusTabs from './detail/focusTabs';\n\nfunction ReplayDetails() {\n  const {\n    location,\n    params: {eventSlug, orgId},\n  } = useRouteContext();\n\n  const {\n    t: initialTimeOffset, // Time, in seconds, where the video should start\n  } = location.query;\n\n  const {fetchError, fetching, onRetry, replay} = useReplayData({\n    eventSlug,\n    orgId,\n  });\n\n  const {ref: fullscreenRef, isFullscreen, toggle: toggleFullscreen} = useFullscreen();\n\n  if (!fetching && !replay) {\n    // TODO(replay): Give the user more details when errors happen\n    console.log({fetching, fetchError}); // eslint-disable-line no-console\n    return (\n      <DetailLayout orgId={orgId}>\n        <PageContent>\n          <NotFound />\n        </PageContent>\n      </DetailLayout>\n    );\n  }\n\n  if (!fetching && replay && replay.getRRWebEvents().length < 2) {\n    return (\n      <DetailLayout orgId={orgId}>\n        <DetailedError\n          onRetry={onRetry}\n          hideSupportLinks\n          heading={t('Expected two or more replay events')}\n          message={\n            <React.Fragment>\n              <p>{t('This Replay may not have captured any user actions.')}</p>\n              <p>\n                {t(\n                  'Or there may be an issue loading the actions from the server, click to try loading the Replay again.'\n                )}\n              </p>\n            </React.Fragment>\n          }\n        />\n      </DetailLayout>\n    );\n  }\n\n  return (\n    <ReplayContextProvider replay={replay} initialTimeOffset={initialTimeOffset}>\n      <DetailLayout orgId={orgId}>\n        <Layout.Body>\n          <Layout.Main ref={fullscreenRef}>\n            <ReplayView toggleFullscreen={toggleFullscreen} isFullscreen={isFullscreen} />\n          </Layout.Main>\n\n          <Layout.Side>\n            <ErrorBoundary mini>\n              <AsideTabs replay={replay} />\n            </ErrorBoundary>\n          </Layout.Side>\n\n          <StickyMain fullWidth>\n            <ErrorBoundary mini>\n              <ReplayTimeline />\n            </ErrorBoundary>\n            <FocusTabs />\n          </StickyMain>\n\n          <StyledLayoutMain fullWidth>\n            <ErrorBoundary mini>\n              <FocusArea />\n            </ErrorBoundary>\n          </StyledLayoutMain>\n        </Layout.Body>\n      </DetailLayout>\n    </ReplayContextProvider>\n  );\n}\n\nconst StickyMain = styled(Layout.Main)`\n  position: sticky;\n  top: 0;\n  z-index: ${p => p.theme.zIndex.header};\n\n  /* Make this component full-bleed, so the background covers everything underneath it */\n  margin: -${space(1.5)} -${space(4)} -${space(3)};\n  padding: ${space(1.5)} ${space(4)} 0;\n  max-width: none;\n  background: ${p => p.theme.background};\n`;\n\nconst StyledLayoutMain = styled(Layout.Main)`\n  ${HeaderContainer} {\n    position: relative;\n  }\n`;\n\nexport default ReplayDetails;\n"],"names":["getUrlPathname","url","URL","pathname","TABS","breadcrumbs","t","tags","renderTabContent","key","loadedReplay","replay","AsideTabs","getParamValue","setParamValue","useUrlParams","active","Container","underlined","Object","entries","map","tab","label","className","onClick","height","p","theme","breakpoints","large","KeyMetrics","space","KeyMetricData","keyName","value","Fragment","Key","Value","subText","textColor","DetailLayout","children","orgId","useReplayContext","event","getEvent","crumbs","getRawCrumbs","title","id","to","type","ButtonActionsWrapper","featureName","EventHeader","MetaDataColumn","EventMetaData","HeaderPlaceholder","props","width","background","urlTag","find","BigNameUserBadge","avatarSize","user","username","ip_address","name","email","displayEmail","Layout","duration","errors","filter","crumb","length","date","dateReceived","undefined","seconds","Math","floor","ms","abbreviation","exact","UserBadge","StyledName","ReplayDetails","location","params","eventSlug","useRouteContext","initialTimeOffset","query","fetchError","fetching","onRetry","useReplayData","ref","fullscreenRef","isFullscreen","toggle","toggleFullscreen","useFullscreen","getRRWebEvents","hideSupportLinks","heading","message","mini","StickyMain","fullWidth","StyledLayoutMain","console","log","zIndex","header","HeaderContainer"],"sourceRoot":""}