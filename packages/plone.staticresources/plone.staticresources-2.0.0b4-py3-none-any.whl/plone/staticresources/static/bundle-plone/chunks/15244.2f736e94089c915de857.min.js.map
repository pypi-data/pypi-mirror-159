{"version":3,"file":"chunks/15244.2f736e94089c915de857.min.js","mappings":"mcACA,4gGAAAA,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQ,4TAKA,IAAIC,EAAMC,EAAAA,EAAAA,UAAkB,gBACxBC,EAAuB,QAEvBC,EAAWC,EAAAA,EAAAA,OAAY,CACvBC,KAAM,WACNC,QAAS,gBAEHC,KAJiB,WAIV,sHACL,EAAKC,IAAIC,GAAG,EAAKH,SADZ,uBAMDI,EAAS,EAAKF,IAAIC,GAAG,UAAY,EAAKD,IAAIG,MAAQ,EAAKH,IAAII,OAN1D,SAOgB,EAAKC,OAAOH,GAP5B,cAQII,WAAW,EAAKN,KARpB,8CAYPK,OAhBiB,SAgBVD,GAAM,2HACS,sCADT,cACTG,EADS,OAC6BC,SAGnCC,WAAWC,SAAW,WAC3B,MAAO,CACH,CACIC,KAAM,SACNC,OAAQ,SAAUV,GACd,OAAOA,EAAOW,QAAQ,oBAAoB,SAAUC,EAAOC,GACvD,OAAIA,EACO,uEAEA,6CAQzBC,EAAaC,GAAAA,CAAE,UACfC,EAAY,IAAIX,EAASY,UAAU,CACrCC,QAAQ,EACRX,WAAY,CAAC,cAEjBO,EAAWK,KAAKH,EAAUI,SAASlB,IA1BpB,kBA2BRY,GA3BQ,8CA8BbO,mBA9CiB,SA8CEC,EAAKC,GAAM,yHAE5BvB,EAASuB,GACTD,EAAItB,QAAuD,QAA5CwB,EAAS,aAAaC,KAAKH,EAAItB,SAHlB,mBAKb,QADfA,EAAS,EAAK0B,eAAe1B,EAAQwB,EAAO,KAJhB,uBAMxBlC,EAAIqC,KAAK,2BAA6BL,EAAItB,OAAS,QAAUsB,EAAIM,KANzC,kBAOjBb,GAAAA,CAAE,UAAUc,KAAK,WAAYP,EAAIM,MAPhB,OAS5B5B,GAAU,KATkB,uBAWT,EAAKG,OAAOH,GAXH,cAW1B8B,EAX0B,yBAYzBA,EAASD,KAAK,WAAYP,EAAItB,OAASsB,EAAIM,IAAMN,EAAItB,OAASsB,EAAIM,MAZzC,+CAepCF,eA7DuB,SA6DRxB,EAAMsB,GACjB,IAAIO,EAASC,EACbR,EAASS,EAAAA,EAAAA,aAAmBT,GAC5B,IAAIU,EAAU,IAAIC,OACV,kDAAkDxB,QAC9C,UACAa,GAEJ,KAEJZ,EAAQsB,EAAQT,KAAKvB,GACzB,GAAc,OAAVU,EACA,OAAO,KACJ,GAAIA,EAAM,GAEboB,EAAQpB,EAAM,GAAGwB,OAGjBL,GAFAA,EACI,gFACcpB,QAAQ,WAAYqB,OACnC,KAAIpB,EAAM,GAUb,OADAtB,EAAI+C,MAAM,kCAAmCzB,GACtC,KAPHmB,EADa,MAAbnB,EAAM,GAEF,qEAGA,wEAWZ,OANAmB,EAAUA,EAAQpB,QAAQ,UAAWa,GAGvB,QADdZ,GADAsB,EAAU,IAAIC,OAAOJ,EAAS,MACdN,KAAKvB,KAEjBZ,EAAI+C,MAAM,qDAEG,OAAVzB,EAAiBA,EAAM,GAAK,QAI3CG,GAAAA,CAAEuB,UAAUC,OAAM,WACdxB,GAAAA,CAAEuB,SAASE,MAAMC,GACb,yCACA,gBACA,WAIe1B,GAAAA,CAAE2B,MAAMnB,KAAK,cACnBoB,SAAQ,SAAUrB,GACf9B,EAAqBoD,KAAKtB,EAAIM,OAC9BN,EAAIuB,SAAW,qBAOnCC,EAAAA,EAAAA,oBAA2B,WAAY,CAC7BC,QAD6B,SACrBC,EAAMzB,GAAM,iHACT0B,QAAQC,IACjBF,EAAKG,IAAL,6BAAS,WAAgB7B,GAAhB,gFACD8B,EAAM3D,EAASI,KAAKyB,EAAI+B,SADvB,SAEkBD,EAAI/B,mBAAmBC,EAAKC,GAF9C,cAECO,EAFD,yBAGEA,GAHF,2CAAT,wDAFkB,wFAW9B","sources":["webpack://plone.staticresources/./node_modules/@patternslib/patternslib/src/pat/markdown/markdown.js"],"sourcesContent":["import $ from \"jquery\";\nimport logging from \"../../core/logging\";\nimport utils from \"../../core/utils\";\nimport Base from \"../../core/base\";\nimport inject from \"../inject/inject\";\n\nvar log = logging.getLogger(\"pat.markdown\");\nvar is_markdown_resource = /\\.md$/;\n\nvar Markdown = Base.extend({\n    name: \"markdown\",\n    trigger: \".pat-markdown\",\n\n    async init() {\n        if (this.$el.is(this.trigger)) {\n            /* This pattern can either be used standalone or as an enhancement\n             * to pat-inject. The following only applies to standalone, when\n             * $el is explicitly configured with the pat-markdown trigger.\n             */\n            var source = this.$el.is(\":input\") ? this.$el.val() : this.$el.text();\n            let rendered = await this.render(source);\n            rendered.replaceAll(this.$el);\n        }\n    },\n\n    async render(text) {\n        const Showdown = (await import(\"showdown\")).default;\n\n        // Add support for syntax highlighting via pat-syntax-highlight\n        Showdown.extensions.prettify = function () {\n            return [\n                {\n                    type: \"output\",\n                    filter: function (source) {\n                        return source.replace(/(<pre>)?<code>/gi, function (match, pre) {\n                            if (pre) {\n                                return '<pre class=\"pat-syntax-highlight\" tabIndex=\"0\"><code data-inner=\"1\">';\n                            } else {\n                                return '<code class=\"pat-syntax-highlight\">';\n                            }\n                        });\n                    },\n                },\n            ];\n        };\n\n        const $rendering = $(\"<div/>\");\n        const converter = new Showdown.Converter({\n            tables: true,\n            extensions: [\"prettify\"],\n        });\n        $rendering.html(converter.makeHtml(text));\n        return $rendering;\n    },\n\n    async renderForInjection(cfg, data) {\n        var header,\n            source = data;\n        if (cfg.source && (header = /^#+\\s*(.*)/.exec(cfg.source)) !== null) {\n            source = this.extractSection(source, header[1]);\n            if (source === null) {\n                log.warn('Could not find section \"' + cfg.source + '\" in ' + cfg.url);\n                return $(\"<div/>\").attr(\"data-src\", cfg.url);\n            }\n            source += \"\\n\"; // Needed for some markdown syntax\n        }\n        const rendered = await this.render(source);\n        return rendered.attr(\"data-src\", cfg.source ? cfg.url + cfg.source : cfg.url);\n    },\n\n    extractSection(text, header) {\n        var pattern, level;\n        header = utils.escapeRegExp(header);\n        var matcher = new RegExp(\n                \"^((#+)\\\\s*@TEXT@\\\\s*|@TEXT@\\\\s*\\\\n([=-])+\\\\s*)$\".replace(\n                    /@TEXT@/g,\n                    header\n                ),\n                \"m\"\n            ),\n            match = matcher.exec(text);\n        if (match === null) {\n            return null;\n        } else if (match[2]) {\n            // We have a ##-style header.\n            level = match[2].length;\n            pattern =\n                \"^#{@LEVEL@}\\\\s*@TEXT@\\\\s*$\\\\n+((?:.|\\\\n)*?(?=^#{1,@LEVEL@}\\\\s)|.*(?:.|\\\\n)*)\";\n            pattern = pattern.replace(/@LEVEL@/g, level);\n        } else if (match[3]) {\n            // We have an underscore-style header.\n            if (match[3] === \"=\")\n                pattern =\n                    \"^@TEXT@\\\\s*\\\\n=+\\\\s*\\\\n+((?:.|\\\\n)*?(?=^.*?\\\\n=+\\\\s*$)|(?:.|\\\\n)*)\";\n            else\n                pattern =\n                    \"^@TEXT@\\\\s*\\\\n-+\\\\s*\\\\n+((?:.|\\\\n)*?(?=^.*?\\\\n[-=]+\\\\s*$)|(?:.|\\\\n)*)\";\n        } else {\n            log.error(\"Unexpected section match result\", match);\n            return null;\n        }\n        pattern = pattern.replace(/@TEXT@/g, header);\n        matcher = new RegExp(pattern, \"m\");\n        match = matcher.exec(text);\n        if (match === null) {\n            log.error(\"Failed to find section with known present header?\");\n        }\n        return match !== null ? match[0] : null;\n    },\n});\n\n$(document).ready(function () {\n    $(document.body).on(\n        \"patterns-inject-triggered.pat-markdown\",\n        \"a.pat-inject\",\n        function identifyMarkdownURLs() {\n            /* Identify injected URLs which point to markdown files and set their\n             * datatype so that we can register a type handler for them.\n             */\n            var cfgs = $(this).data(\"pat-inject\");\n            cfgs.forEach(function (cfg) {\n                if (is_markdown_resource.test(cfg.url)) {\n                    cfg.dataType = \"markdown\";\n                }\n            });\n        }\n    );\n});\n\ninject.registerTypeHandler(\"markdown\", {\n    async sources(cfgs, data) {\n        return await Promise.all(\n            cfgs.map(async function (cfg) {\n                var pat = Markdown.init(cfg.$target);\n                const rendered = await pat.renderForInjection(cfg, data);\n                return rendered;\n            })\n        );\n    },\n});\n\nexport default Markdown;\n"],"names":["i","log","logging","is_markdown_resource","Markdown","Base","name","trigger","init","$el","is","source","val","text","render","replaceAll","Showdown","default","extensions","prettify","type","filter","replace","match","pre","$rendering","$","converter","Converter","tables","html","makeHtml","renderForInjection","cfg","data","header","exec","extractSection","warn","url","attr","rendered","pattern","level","utils","matcher","RegExp","length","error","document","ready","body","on","this","forEach","test","dataType","inject","sources","cfgs","Promise","all","map","pat","$target"],"sourceRoot":""}