{"version":3,"file":"chunks/64038.cfdd973031b4543c5bc4.min.js","mappings":"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","sources":["webpack://plone.staticresources/./node_modules/datatables.net-rowreorder/js/dataTables.rowReorder.js"],"sourcesContent":["/*! RowReorder 1.2.8\n * 2015-2020 SpryMedia Ltd - datatables.net/license\n */\n\n/**\n * @summary     RowReorder\n * @description Row reordering extension for DataTables\n * @version     1.2.8\n * @file        dataTables.rowReorder.js\n * @author      SpryMedia Ltd (www.sprymedia.co.uk)\n * @contact     www.sprymedia.co.uk/contact\n * @copyright   Copyright 2015-2020 SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n(function( factory ){\n\tif ( typeof define === 'function' && define.amd ) {\n\t\t// AMD\n\t\tdefine( ['jquery', 'datatables.net'], function ( $ ) {\n\t\t\treturn factory( $, window, document );\n\t\t} );\n\t}\n\telse if ( typeof exports === 'object' ) {\n\t\t// CommonJS\n\t\tmodule.exports = function (root, $) {\n\t\t\tif ( ! root ) {\n\t\t\t\troot = window;\n\t\t\t}\n\n\t\t\tif ( ! $ || ! $.fn.dataTable ) {\n\t\t\t\t$ = require('datatables.net')(root, $).$;\n\t\t\t}\n\n\t\t\treturn factory( $, root, root.document );\n\t\t};\n\t}\n\telse {\n\t\t// Browser\n\t\tfactory( jQuery, window, document );\n\t}\n}(function( $, window, document, undefined ) {\n'use strict';\nvar DataTable = $.fn.dataTable;\n\n\n/**\n * RowReorder provides the ability in DataTables to click and drag rows to\n * reorder them. When a row is dropped the data for the rows effected will be\n * updated to reflect the change. Normally this data point should also be the\n * column being sorted upon in the DataTable but this does not need to be the\n * case. RowReorder implements a \"data swap\" method - so the rows being\n * reordered take the value of the data point from the row that used to occupy\n * the row's new position.\n *\n * Initialisation is done by either:\n *\n * * `rowReorder` parameter in the DataTable initialisation object\n * * `new $.fn.dataTable.RowReorder( table, opts )` after DataTables\n *   initialisation.\n * \n *  @class\n *  @param {object} settings DataTables settings object for the host table\n *  @param {object} [opts] Configuration options\n *  @requires jQuery 1.7+\n *  @requires DataTables 1.10.7+\n */\nvar RowReorder = function ( dt, opts ) {\n\t// Sanity check that we are using DataTables 1.10 or newer\n\tif ( ! DataTable.versionCheck || ! DataTable.versionCheck( '1.10.8' ) ) {\n\t\tthrow 'DataTables RowReorder requires DataTables 1.10.8 or newer';\n\t}\n\n\t// User and defaults configuration object\n\tthis.c = $.extend( true, {},\n\t\tDataTable.defaults.rowReorder,\n\t\tRowReorder.defaults,\n\t\topts\n\t);\n\n\t// Internal settings\n\tthis.s = {\n\t\t/** @type {integer} Scroll body top cache */\n\t\tbodyTop: null,\n\n\t\t/** @type {DataTable.Api} DataTables' API instance */\n\t\tdt: new DataTable.Api( dt ),\n\n\t\t/** @type {function} Data fetch function */\n\t\tgetDataFn: DataTable.ext.oApi._fnGetObjectDataFn( this.c.dataSrc ),\n\n\t\t/** @type {array} Pixel positions for row insertion calculation */\n\t\tmiddles: null,\n\n\t\t/** @type {Object} Cached dimension information for use in the mouse move event handler */\n\t\tscroll: {},\n\n\t\t/** @type {integer} Interval object used for smooth scrolling */\n\t\tscrollInterval: null,\n\n\t\t/** @type {function} Data set function */\n\t\tsetDataFn: DataTable.ext.oApi._fnSetObjectDataFn( this.c.dataSrc ),\n\n\t\t/** @type {Object} Mouse down information */\n\t\tstart: {\n\t\t\ttop: 0,\n\t\t\tleft: 0,\n\t\t\toffsetTop: 0,\n\t\t\toffsetLeft: 0,\n\t\t\tnodes: []\n\t\t},\n\n\t\t/** @type {integer} Window height cached value */\n\t\twindowHeight: 0,\n\n\t\t/** @type {integer} Document outer height cached value */\n\t\tdocumentOuterHeight: 0,\n\n\t\t/** @type {integer} DOM clone outer height cached value */\n\t\tdomCloneOuterHeight: 0\n\t};\n\n\t// DOM items\n\tthis.dom = {\n\t\t/** @type {jQuery} Cloned row being moved around */\n\t\tclone: null,\n\n\t\t/** @type {jQuery} DataTables scrolling container */\n\t\tdtScroll: $('div.dataTables_scrollBody', this.s.dt.table().container())\n\t};\n\n\t// Check if row reorder has already been initialised on this table\n\tvar settings = this.s.dt.settings()[0];\n\tvar exisiting = settings.rowreorder;\n\n\tif ( exisiting ) {\n\t\treturn exisiting;\n\t}\n\n\tif ( !this.dom.dtScroll.length ) {\n\t\tthis.dom.dtScroll = $(this.s.dt.table().container(), 'tbody')\n\t}\n\n\tsettings.rowreorder = this;\n\tthis._constructor();\n};\n\n\n$.extend( RowReorder.prototype, {\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Constructor\n\t */\n\n\t/**\n\t * Initialise the RowReorder instance\n\t *\n\t * @private\n\t */\n\t_constructor: function ()\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\t\tvar table = $( dt.table().node() );\n\n\t\t// Need to be able to calculate the row positions relative to the table\n\t\tif ( table.css('position') === 'static' ) {\n\t\t\ttable.css( 'position', 'relative' );\n\t\t}\n\n\t\t// listen for mouse down on the target column - we have to implement\n\t\t// this rather than using HTML5 drag and drop as drag and drop doesn't\n\t\t// appear to work on table rows at this time. Also mobile browsers are\n\t\t// not supported.\n\t\t// Use `table().container()` rather than just the table node for IE8 -\n\t\t// otherwise it only works once...\n\t\t$(dt.table().container()).on( 'mousedown.rowReorder touchstart.rowReorder', this.c.selector, function (e) {\n\t\t\tif ( ! that.c.enable ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Ignore excluded children of the selector\n\t\t\tif ( $(e.target).is(that.c.excludedChildren) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar tr = $(this).closest('tr');\n\t\t\tvar row = dt.row( tr );\n\n\t\t\t// Double check that it is a DataTable row\n\t\t\tif ( row.any() ) {\n\t\t\t\tthat._emitEvent( 'pre-row-reorder', {\n\t\t\t\t\tnode: row.node(),\n\t\t\t\t\tindex: row.index()\n\t\t\t\t} );\n\n\t\t\t\tthat._mouseDown( e, tr );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} );\n\n\t\tdt.on( 'destroy.rowReorder', function () {\n\t\t\t$(dt.table().container()).off( '.rowReorder' );\n\t\t\tdt.off( '.rowReorder' );\n\t\t} );\n\t},\n\n\n\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\t * Private methods\n\t */\n\t\n\t/**\n\t * Cache the measurements that RowReorder needs in the mouse move handler\n\t * to attempt to speed things up, rather than reading from the DOM.\n\t *\n\t * @private\n\t */\n\t_cachePositions: function ()\n\t{\n\t\tvar dt = this.s.dt;\n\n\t\t// Frustratingly, if we add `position:relative` to the tbody, the\n\t\t// position is still relatively to the parent. So we need to adjust\n\t\t// for that\n\t\tvar headerHeight = $( dt.table().node() ).find('thead').outerHeight();\n\n\t\t// Need to pass the nodes through jQuery to get them in document order,\n\t\t// not what DataTables thinks it is, since we have been altering the\n\t\t// order\n\t\tvar nodes = $.unique( dt.rows( { page: 'current' } ).nodes().toArray() );\n\t\tvar middles = $.map( nodes, function ( node, i ) {\n\t\t\tvar top = $(node).position().top - headerHeight;\n\n\t\t\treturn (top + top + $(node).outerHeight() ) / 2;\n\t\t} );\n\n\t\tthis.s.middles = middles;\n\t\tthis.s.bodyTop = $( dt.table().body() ).offset().top;\n\t\tthis.s.windowHeight = $(window).height();\n\t\tthis.s.documentOuterHeight = $(document).outerHeight();\n\t},\n\n\n\t/**\n\t * Clone a row so it can be floated around the screen\n\t *\n\t * @param  {jQuery} target Node to be cloned\n\t * @private\n\t */\n\t_clone: function ( target )\n\t{\n\t\tvar dt = this.s.dt;\n\t\tvar clone = $( dt.table().node().cloneNode(false) )\n\t\t\t.addClass( 'dt-rowReorder-float' )\n\t\t\t.append('<tbody/>')\n\t\t\t.append( target.clone( false ) );\n\n\t\t// Match the table and column widths - read all sizes before setting\n\t\t// to reduce reflows\n\t\tvar tableWidth = target.outerWidth();\n\t\tvar tableHeight = target.outerHeight();\n\t\tvar sizes = target.children().map( function () {\n\t\t\treturn $(this).width();\n\t\t} );\n\n\t\tclone\n\t\t\t.width( tableWidth )\n\t\t\t.height( tableHeight )\n\t\t\t.find('tr').children().each( function (i) {\n\t\t\t\tthis.style.width = sizes[i]+'px';\n\t\t\t} );\n\n\t\t// Insert into the document to have it floating around\n\t\tclone.appendTo( 'body' );\n\n\t\tthis.dom.clone = clone;\n\t\tthis.s.domCloneOuterHeight = clone.outerHeight();\n\t},\n\n\n\t/**\n\t * Update the cloned item's position in the document\n\t *\n\t * @param  {object} e Event giving the mouse's position\n\t * @private\n\t */\n\t_clonePosition: function ( e )\n\t{\n\t\tvar start = this.s.start;\n\t\tvar topDiff = this._eventToPage( e, 'Y' ) - start.top;\n\t\tvar leftDiff = this._eventToPage( e, 'X' ) - start.left;\n\t\tvar snap = this.c.snapX;\n\t\tvar left;\n\t\tvar top = topDiff + start.offsetTop;\n\n\t\tif ( snap === true ) {\n\t\t\tleft = start.offsetLeft;\n\t\t}\n\t\telse if ( typeof snap === 'number' ) {\n\t\t\tleft = start.offsetLeft + snap;\n\t\t}\n\t\telse {\n\t\t\tleft = leftDiff + start.offsetLeft;\n\t\t}\n\n\t\tif(top < 0) {\n\t\t\ttop = 0\n\t\t}\n\t\telse if(top + this.s.domCloneOuterHeight > this.s.documentOuterHeight) {\n\t\t\ttop = this.s.documentOuterHeight - this.s.domCloneOuterHeight;\n\t\t}\n\n\t\tthis.dom.clone.css( {\n\t\t\ttop: top,\n\t\t\tleft: left\n\t\t} );\n\t},\n\n\n\t/**\n\t * Emit an event on the DataTable for listeners\n\t *\n\t * @param  {string} name Event name\n\t * @param  {array} args Event arguments\n\t * @private\n\t */\n\t_emitEvent: function ( name, args )\n\t{\n\t\tthis.s.dt.iterator( 'table', function ( ctx, i ) {\n\t\t\t$(ctx.nTable).triggerHandler( name+'.dt', args );\n\t\t} );\n\t},\n\n\n\t/**\n\t * Get pageX/Y position from an event, regardless of if it is a mouse or\n\t * touch event.\n\t *\n\t * @param  {object} e Event\n\t * @param  {string} pos X or Y (must be a capital)\n\t * @private\n\t */\n\t_eventToPage: function ( e, pos )\n\t{\n\t\tif ( e.type.indexOf( 'touch' ) !== -1 ) {\n\t\t\treturn e.originalEvent.touches[0][ 'page'+pos ];\n\t\t}\n\n\t\treturn e[ 'page'+pos ];\n\t},\n\n\n\t/**\n\t * Mouse down event handler. Read initial positions and add event handlers\n\t * for the move.\n\t *\n\t * @param  {object} e      Mouse event\n\t * @param  {jQuery} target TR element that is to be moved\n\t * @private\n\t */\n\t_mouseDown: function ( e, target )\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\t\tvar start = this.s.start;\n\n\t\tvar offset = target.offset();\n\t\tstart.top = this._eventToPage( e, 'Y' );\n\t\tstart.left = this._eventToPage( e, 'X' );\n\t\tstart.offsetTop = offset.top;\n\t\tstart.offsetLeft = offset.left;\n\t\tstart.nodes = $.unique( dt.rows( { page: 'current' } ).nodes().toArray() );\n\n\t\tthis._cachePositions();\n\t\tthis._clone( target );\n\t\tthis._clonePosition( e );\n\n\t\tthis.dom.target = target;\n\t\ttarget.addClass( 'dt-rowReorder-moving' );\n\n\t\t$( document )\n\t\t\t.on( 'mouseup.rowReorder touchend.rowReorder', function (e) {\n\t\t\t\tthat._mouseUp(e);\n\t\t\t} )\n\t\t\t.on( 'mousemove.rowReorder touchmove.rowReorder', function (e) {\n\t\t\t\tthat._mouseMove(e);\n\t\t\t} );\n\n\t\t// Check if window is x-scrolling - if not, disable it for the duration\n\t\t// of the drag\n\t\tif ( $(window).width() === $(document).width() ) {\n\t\t\t$(document.body).addClass( 'dt-rowReorder-noOverflow' );\n\t\t}\n\n\t\t// Cache scrolling information so mouse move doesn't need to read.\n\t\t// This assumes that the window and DT scroller will not change size\n\t\t// during an row drag, which I think is a fair assumption\n\t\tvar scrollWrapper = this.dom.dtScroll;\n\t\tthis.s.scroll = {\n\t\t\twindowHeight: $(window).height(),\n\t\t\twindowWidth:  $(window).width(),\n\t\t\tdtTop:        scrollWrapper.length ? scrollWrapper.offset().top : null,\n\t\t\tdtLeft:       scrollWrapper.length ? scrollWrapper.offset().left : null,\n\t\t\tdtHeight:     scrollWrapper.length ? scrollWrapper.outerHeight() : null,\n\t\t\tdtWidth:      scrollWrapper.length ? scrollWrapper.outerWidth() : null\n\t\t};\n\t},\n\n\n\t/**\n\t * Mouse move event handler - move the cloned row and shuffle the table's\n\t * rows if required.\n\t *\n\t * @param  {object} e Mouse event\n\t * @private\n\t */\n\t_mouseMove: function ( e )\n\t{\n\t\tthis._clonePosition( e );\n\n\t\t// Transform the mouse position into a position in the table's body\n\t\tvar bodyY = this._eventToPage( e, 'Y' ) - this.s.bodyTop;\n\t\tvar middles = this.s.middles;\n\t\tvar insertPoint = null;\n\t\tvar dt = this.s.dt;\n\n\t\t// Determine where the row should be inserted based on the mouse\n\t\t// position\n\t\tfor ( var i=0, ien=middles.length ; i<ien ; i++ ) {\n\t\t\tif ( bodyY < middles[i] ) {\n\t\t\t\tinsertPoint = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ( insertPoint === null ) {\n\t\t\tinsertPoint = middles.length;\n\t\t}\n\n\t\t// Perform the DOM shuffle if it has changed from last time\n\t\tif ( this.s.lastInsert === null || this.s.lastInsert !== insertPoint ) {\n\t\t\tvar nodes = $.unique( dt.rows( { page: 'current' } ).nodes().toArray() );\n\n\t\t\tif ( insertPoint > this.s.lastInsert ) {\n\t\t\t\tthis.dom.target.insertAfter( nodes[ insertPoint-1 ] );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.dom.target.insertBefore( nodes[ insertPoint ] );\n\t\t\t}\n\n\t\t\tthis._cachePositions();\n\n\t\t\tthis.s.lastInsert = insertPoint;\n\t\t}\n\n\t\tthis._shiftScroll( e );\n\t},\n\n\n\t/**\n\t * Mouse up event handler - release the event handlers and perform the\n\t * table updates\n\t *\n\t * @param  {object} e Mouse event\n\t * @private\n\t */\n\t_mouseUp: function ( e )\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\t\tvar i, ien;\n\t\tvar dataSrc = this.c.dataSrc;\n\n\t\tthis.dom.clone.remove();\n\t\tthis.dom.clone = null;\n\n\t\tthis.dom.target.removeClass( 'dt-rowReorder-moving' );\n\t\t//this.dom.target = null;\n\n\t\t$(document).off( '.rowReorder' );\n\t\t$(document.body).removeClass( 'dt-rowReorder-noOverflow' );\n\n\t\tclearInterval( this.s.scrollInterval );\n\t\tthis.s.scrollInterval = null;\n\n\t\t// Calculate the difference\n\t\tvar startNodes = this.s.start.nodes;\n\t\tvar endNodes = $.unique( dt.rows( { page: 'current' } ).nodes().toArray() );\n\t\tvar idDiff = {};\n\t\tvar fullDiff = [];\n\t\tvar diffNodes = [];\n\t\tvar getDataFn = this.s.getDataFn;\n\t\tvar setDataFn = this.s.setDataFn;\n\n\t\tfor ( i=0, ien=startNodes.length ; i<ien ; i++ ) {\n\t\t\tif ( startNodes[i] !== endNodes[i] ) {\n\t\t\t\tvar id = dt.row( endNodes[i] ).id();\n\t\t\t\tvar endRowData = dt.row( endNodes[i] ).data();\n\t\t\t\tvar startRowData = dt.row( startNodes[i] ).data();\n\n\t\t\t\tif ( id ) {\n\t\t\t\t\tidDiff[ id ] = getDataFn( startRowData );\n\t\t\t\t}\n\n\t\t\t\tfullDiff.push( {\n\t\t\t\t\tnode: endNodes[i],\n\t\t\t\t\toldData: getDataFn( endRowData ),\n\t\t\t\t\tnewData: getDataFn( startRowData ),\n\t\t\t\t\tnewPosition: i,\n\t\t\t\t\toldPosition: $.inArray( endNodes[i], startNodes )\n\t\t\t\t} );\n\n\t\t\t\tdiffNodes.push( endNodes[i] );\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Create event args\n\t\tvar eventArgs = [ fullDiff, {\n\t\t\tdataSrc:       dataSrc,\n\t\t\tnodes:         diffNodes,\n\t\t\tvalues:        idDiff,\n\t\t\ttriggerRow:    dt.row( this.dom.target ),\n\t\t\toriginalEvent: e\n\t\t} ];\n\t\t\n\t\t// Emit event\n\t\tthis._emitEvent( 'row-reorder', eventArgs );\n\n\t\tvar update = function () {\n\t\t\tif ( that.c.update ) {\n\t\t\t\tfor ( i=0, ien=fullDiff.length ; i<ien ; i++ ) {\n\t\t\t\t\tvar row = dt.row( fullDiff[i].node );\n\t\t\t\t\tvar rowData = row.data();\n\n\t\t\t\t\tsetDataFn( rowData, fullDiff[i].newData );\n\n\t\t\t\t\t// Invalidate the cell that has the same data source as the dataSrc\n\t\t\t\t\tdt.columns().every( function () {\n\t\t\t\t\t\tif ( this.dataSrc() === dataSrc ) {\n\t\t\t\t\t\t\tdt.cell( fullDiff[i].node, this.index() ).invalidate( 'data' );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// Trigger row reordered event\n\t\t\t\tthat._emitEvent( 'row-reordered', eventArgs );\n\n\t\t\t\tdt.draw( false );\n\t\t\t}\n\t\t};\n\n\t\t// Editor interface\n\t\tif ( this.c.editor ) {\n\t\t\t// Disable user interaction while Editor is submitting\n\t\t\tthis.c.enable = false;\n\n\t\t\tthis.c.editor\n\t\t\t\t.edit(\n\t\t\t\t\tdiffNodes,\n\t\t\t\t\tfalse,\n\t\t\t\t\t$.extend( {submit: 'changed'}, this.c.formOptions )\n\t\t\t\t)\n\t\t\t\t.multiSet( dataSrc, idDiff )\n\t\t\t\t.one( 'preSubmitCancelled.rowReorder', function () {\n\t\t\t\t\tthat.c.enable = true;\n\t\t\t\t\tthat.c.editor.off( '.rowReorder' );\n\t\t\t\t\tdt.draw( false );\n\t\t\t\t} )\n\t\t\t\t.one( 'submitUnsuccessful.rowReorder', function () {\n\t\t\t\t\tdt.draw( false );\n\t\t\t\t} )\n\t\t\t\t.one( 'submitSuccess.rowReorder', function () {\n\t\t\t\t\tupdate();\n\t\t\t\t} )\n\t\t\t\t.one( 'submitComplete', function () {\n\t\t\t\t\tthat.c.enable = true;\n\t\t\t\t\tthat.c.editor.off( '.rowReorder' );\n\t\t\t\t} )\n\t\t\t\t.submit();\n\t\t}\n\t\telse {\n\t\t\tupdate();\n\t\t}\n\t},\n\n\n\t/**\n\t * Move the window and DataTables scrolling during a drag to scroll new\n\t * content into view.\n\t *\n\t * This matches the `_shiftScroll` method used in AutoFill, but only\n\t * horizontal scrolling is considered here.\n\t *\n\t * @param  {object} e Mouse move event object\n\t * @private\n\t */\n\t_shiftScroll: function ( e )\n\t{\n\t\tvar that = this;\n\t\tvar dt = this.s.dt;\n\t\tvar scroll = this.s.scroll;\n\t\tvar runInterval = false;\n\t\tvar scrollSpeed = 5;\n\t\tvar buffer = 65;\n\t\tvar\n\t\t\twindowY = e.pageY - document.body.scrollTop,\n\t\t\twindowVert,\n\t\t\tdtVert;\n\n\t\t// Window calculations - based on the mouse position in the window,\n\t\t// regardless of scrolling\n\t\tif ( windowY < $(window).scrollTop() + buffer ) {\n\t\t\twindowVert = scrollSpeed * -1;\n\t\t}\n\t\telse if ( windowY > scroll.windowHeight + $(window).scrollTop() - buffer ) {\n\t\t\twindowVert = scrollSpeed;\n\t\t}\n\n\t\t// DataTables scrolling calculations - based on the table's position in\n\t\t// the document and the mouse position on the page\n\t\tif ( scroll.dtTop !== null && e.pageY < scroll.dtTop + buffer ) {\n\t\t\tdtVert = scrollSpeed * -1;\n\t\t}\n\t\telse if ( scroll.dtTop !== null && e.pageY > scroll.dtTop + scroll.dtHeight - buffer ) {\n\t\t\tdtVert = scrollSpeed;\n\t\t}\n\n\t\t// This is where it gets interesting. We want to continue scrolling\n\t\t// without requiring a mouse move, so we need an interval to be\n\t\t// triggered. The interval should continue until it is no longer needed,\n\t\t// but it must also use the latest scroll commands (for example consider\n\t\t// that the mouse might move from scrolling up to scrolling left, all\n\t\t// with the same interval running. We use the `scroll` object to \"pass\"\n\t\t// this information to the interval. Can't use local variables as they\n\t\t// wouldn't be the ones that are used by an already existing interval!\n\t\tif ( windowVert || dtVert ) {\n\t\t\tscroll.windowVert = windowVert;\n\t\t\tscroll.dtVert = dtVert;\n\t\t\trunInterval = true;\n\t\t}\n\t\telse if ( this.s.scrollInterval ) {\n\t\t\t// Don't need to scroll - remove any existing timer\n\t\t\tclearInterval( this.s.scrollInterval );\n\t\t\tthis.s.scrollInterval = null;\n\t\t}\n\n\t\t// If we need to run the interval to scroll and there is no existing\n\t\t// interval (if there is an existing one, it will continue to run)\n\t\tif ( ! this.s.scrollInterval && runInterval ) {\n\t\t\tthis.s.scrollInterval = setInterval( function () {\n\t\t\t\t// Don't need to worry about setting scroll <0 or beyond the\n\t\t\t\t// scroll bound as the browser will just reject that.\n\t\t\t\tif ( scroll.windowVert ) {\n\t\t\t\t\tvar top = $(document).scrollTop();\n\t\t\t\t\t$(document).scrollTop(top + scroll.windowVert);\n\n\t\t\t\t\tif ( top !== $(document).scrollTop() ) {\n\t\t\t\t\t\tvar move = parseFloat(that.dom.clone.css(\"top\"));\n\t\t\t\t\t\tthat.dom.clone.css(\"top\", move + scroll.windowVert);\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// DataTables scrolling\n\t\t\t\tif ( scroll.dtVert ) {\n\t\t\t\t\tvar scroller = that.dom.dtScroll[0];\n\n\t\t\t\t\tif ( scroll.dtVert ) {\n\t\t\t\t\t\tscroller.scrollTop += scroll.dtVert;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 20 );\n\t\t}\n\t}\n} );\n\n\n\n/**\n * RowReorder default settings for initialisation\n *\n * @namespace\n * @name RowReorder.defaults\n * @static\n */\nRowReorder.defaults = {\n\t/**\n\t * Data point in the host row's data source object for where to get and set\n\t * the data to reorder. This will normally also be the sorting column.\n\t *\n\t * @type {Number}\n\t */\n\tdataSrc: 0,\n\n\t/**\n\t * Editor instance that will be used to perform the update\n\t *\n\t * @type {DataTable.Editor}\n\t */\n\teditor: null,\n\n\t/**\n\t * Enable / disable RowReorder's user interaction\n\t * @type {Boolean}\n\t */\n\tenable: true,\n\n\t/**\n\t * Form options to pass to Editor when submitting a change in the row order.\n\t * See the Editor `from-options` object for details of the options\n\t * available.\n\t * @type {Object}\n\t */\n\tformOptions: {},\n\n\t/**\n\t * Drag handle selector. This defines the element that when dragged will\n\t * reorder a row.\n\t *\n\t * @type {String}\n\t */\n\tselector: 'td:first-child',\n\n\t/**\n\t * Optionally lock the dragged row's x-position. This can be `true` to\n\t * fix the position match the host table's, `false` to allow free movement\n\t * of the row, or a number to define an offset from the host table.\n\t *\n\t * @type {Boolean|number}\n\t */\n\tsnapX: false,\n\n\t/**\n\t * Update the table's data on drop\n\t *\n\t * @type {Boolean}\n\t */\n\tupdate: true,\n\n\t/**\n\t * Selector for children of the drag handle selector that mouseDown events\n\t * will be passed through to and drag will not activate\n\t *\n\t * @type {String}\n\t */\n\texcludedChildren: 'a'\n};\n\n\n/*\n * API\n */\nvar Api = $.fn.dataTable.Api;\n\n// Doesn't do anything - work around for a bug in DT... Not documented\nApi.register( 'rowReorder()', function () {\n\treturn this;\n} );\n\nApi.register( 'rowReorder.enable()', function ( toggle ) {\n\tif ( toggle === undefined ) {\n\t\ttoggle = true;\n\t}\n\n\treturn this.iterator( 'table', function ( ctx ) {\n\t\tif ( ctx.rowreorder ) {\n\t\t\tctx.rowreorder.c.enable = toggle;\n\t\t}\n\t} );\n} );\n\nApi.register( 'rowReorder.disable()', function () {\n\treturn this.iterator( 'table', function ( ctx ) {\n\t\tif ( ctx.rowreorder ) {\n\t\t\tctx.rowreorder.c.enable = false;\n\t\t}\n\t} );\n} );\n\n\n/**\n * Version information\n *\n * @name RowReorder.version\n * @static\n */\nRowReorder.version = '1.2.8';\n\n\n$.fn.dataTable.RowReorder = RowReorder;\n$.fn.DataTable.RowReorder = RowReorder;\n\n// Attach a listener to the document which listens for DataTables initialisation\n// events so we can automatically initialise\n$(document).on( 'init.dt.dtr', function (e, settings, json) {\n\tif ( e.namespace !== 'dt' ) {\n\t\treturn;\n\t}\n\n\tvar init = settings.oInit.rowReorder;\n\tvar defaults = DataTable.defaults.rowReorder;\n\n\tif ( init || defaults ) {\n\t\tvar opts = $.extend( {}, init, defaults );\n\n\t\tif ( init !== false ) {\n\t\t\tnew RowReorder( settings, opts  );\n\t\t}\n\t}\n} );\n\n\nreturn RowReorder;\n}));\n"],"names":["$","window","document","undefined","DataTable","fn","dataTable","RowReorder","dt","opts","versionCheck","this","c","extend","defaults","rowReorder","s","bodyTop","Api","getDataFn","ext","oApi","_fnGetObjectDataFn","dataSrc","middles","scroll","scrollInterval","setDataFn","_fnSetObjectDataFn","start","top","left","offsetTop","offsetLeft","nodes","windowHeight","documentOuterHeight","domCloneOuterHeight","dom","clone","dtScroll","table","container","settings","exisiting","rowreorder","length","_constructor","prototype","that","node","css","on","selector","e","enable","target","is","excludedChildren","tr","closest","row","any","_emitEvent","index","_mouseDown","off","_cachePositions","headerHeight","find","outerHeight","unique","rows","page","toArray","map","i","position","body","offset","height","_clone","cloneNode","addClass","append","tableWidth","outerWidth","tableHeight","sizes","children","width","each","style","appendTo","_clonePosition","topDiff","_eventToPage","leftDiff","snap","snapX","name","args","iterator","ctx","nTable","triggerHandler","pos","type","indexOf","originalEvent","touches","_mouseUp","_mouseMove","scrollWrapper","windowWidth","dtTop","dtLeft","dtHeight","dtWidth","bodyY","insertPoint","ien","lastInsert","insertAfter","insertBefore","_shiftScroll","remove","removeClass","clearInterval","startNodes","endNodes","idDiff","fullDiff","diffNodes","id","endRowData","data","startRowData","push","oldData","newData","newPosition","oldPosition","inArray","eventArgs","values","triggerRow","update","rowData","columns","every","cell","invalidate","draw","editor","edit","submit","formOptions","multiSet","one","windowVert","dtVert","runInterval","scrollSpeed","buffer","windowY","pageY","scrollTop","setInterval","move","parseFloat","scroller","register","toggle","version","json","namespace","init","oInit","factory"],"sourceRoot":""}