{"version":3,"file":"chunks/93520.c916e9ad3e5e1e99cc9b.min.js","mappings":"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","sources":["webpack://plone.staticresources/./node_modules/@patternslib/patternslib/src/pat/date-picker/date-picker.js"],"sourcesContent":["/* pat-date-picker  - Polyfill for input type=date */\nimport $ from \"jquery\";\nimport Base from \"../../core/base\";\nimport Parser from \"../../core/parser\";\nimport dom from \"../../core/dom\";\nimport events from \"../../core/events\";\nimport utils from \"../../core/utils\";\n\nexport const parser = new Parser(\"date-picker\");\nparser.addArgument(\"behavior\", \"styled\", [\"native\", \"styled\"]);\nparser.addArgument(\"week-numbers\", [], [\"show\", \"hide\"]);\nparser.addArgument(\"i18n\"); // URL pointing to JSON resource with i18n values\nparser.addArgument(\"first-day\", 0);\nparser.addArgument(\"after\");\nparser.addArgument(\"offset-days\", 0);\n\nparser.add_argument(\"output-format\", null);\nparser.add_argument(\"locale\", null);\n\nparser.addAlias(\"behaviour\", \"behavior\");\n\n/* JSON format for i18n\n * { \"previousMonth\": \"Previous Month\",\n *   \"nextMonth\"    : \"Next Month\",\n *   \"months\"       : [\"January\",\"February\",\"March\",\"April\",\"May\",\"June\",\"July\",\"August\",\"September\",\"October\",\"November\",\"December\"],\n *   \"weekdays\"     : [\"Sunday\",\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\"],\n *   \"weekdaysShort\": [\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\"]\n * } */\n\nexport default Base.extend({\n    name: \"date-picker\",\n    trigger: \".pat-date-picker\",\n    parser: parser,\n    format: \"YYYY-MM-DD\",\n\n    async init() {\n        const el = this.el;\n        const disabled = this.el.disabled;\n\n        //TODO: make parser with options extend missing options.\n        //this.options = parser.parse(el, opts);\n        this.options = $.extend(parser.parse(el), this.options);\n\n        if (!disabled && this.options.after) {\n            // Set the date depending on another date which must be ``offset-days``\n            // BEFORE this date. Only set it, if the other date is AFTER this\n            // date.\n            const befores = document.querySelectorAll(this.options.after);\n            for (const b_el of befores) {\n                b_el.addEventListener(\"change\", (e) => {\n                    let b_date = e.target.value; // the \"before-date\"\n                    b_date = b_date ? new Date(b_date) : null;\n                    if (!b_date) {\n                        return;\n                    }\n                    let a_date = this.el.value; // the \"after-date\"\n                    a_date = a_date ? new Date(a_date) : null;\n                    if (!a_date || a_date < b_date) {\n                        const offset = this.options.offsetDays || 0;\n                        b_date.setDate(b_date.getDate() + offset);\n                        this.el.value = b_date.toISOString().substring(0, 10);\n                        this.dispatch_change_event();\n                    }\n                });\n            }\n        }\n\n        let display_el;\n        if (this.options.behavior === \"styled\") {\n            dom.hide(el); // hide input, but keep active (e.g. for validation)\n\n            display_el = document.createElement(\"time\");\n            display_el.setAttribute(\"class\", \"output-field\");\n            display_el.setAttribute(\"datetime\", el.value);\n            if (disabled) {\n                display_el.classList.add(\"disabled\");\n            }\n            el.insertAdjacentElement(\"beforebegin\", display_el);\n\n            // Disable click on label, as this invokes a click on the invisible\n            // input field which opens the calendar in Firefox and masks a\n            // click on display_el on Chrome.\n            const label = display_el.closest(\"label\");\n            if (label) {\n                events.add_event_listener(\n                    label,\n                    \"click\",\n                    \"pat-date-picker--label\",\n                    (e) => {\n                        e.preventDefault();\n                    }\n                );\n            }\n\n            let display_el_pat;\n            if (this.options.outputFormat) {\n                const PatDisplayTime = (await import(\"../display-time/display-time\")).default; // prettier-ignore\n                const display_time_config = { format: this.format };\n                if (this.options.outputFormat) {\n                    display_time_config[\"output-format\"] = this.options.outputFormat;\n                }\n                if (this.options.locale) {\n                    display_time_config.locale = this.options.locale;\n                }\n                display_el_pat = new PatDisplayTime(display_el, display_time_config);\n            } else {\n                display_el.textContent = el.value;\n            }\n\n            $(display_el).on(\"init.display-time.patterns\", () =>\n                this.add_clear_button(display_el)\n            );\n\n            this.el.addEventListener(\"change\", () => {\n                display_el.setAttribute(\"datetime\", this.el.value);\n                if (display_el_pat) {\n                    display_el_pat.format();\n                } else {\n                    display_el.textContent = this.el.value;\n                }\n                this.add_clear_button(display_el);\n            });\n\n            if (disabled) {\n                // nothing else to do here...\n                return;\n            }\n        } else if (disabled) {\n            return;\n        } else if (utils.checkInputSupport(\"date\", \"invalid date\")) {\n            // behavior native with native support.\n            return;\n        } else if (el.getAttribute(\"type\") === \"date\") {\n            // behavior native but no native support.\n            // Fallback JS date picker with a text input field.\n            el.setAttribute(\"type\", \"text\");\n        }\n\n        if (window.__patternslib_import_styles) {\n            import(\"./_date-picker.scss\");\n        }\n        const Pikaday = (await import(\"pikaday\")).default;\n\n        const config = {\n            field: el,\n            trigger: display_el || el,\n            format: this.format,\n            firstDay: this.options.firstDay,\n            showWeekNumber: this.options.weekNumbers === \"show\",\n            onSelect: () => this.dispatch_change_event(),\n        };\n\n        if (el.getAttribute(\"min\")) {\n            config.minDate = new Date(el.getAttribute(\"min\"));\n        }\n        if (el.getAttribute(\"max\")) {\n            config.maxDate = new Date(el.getAttribute(\"max\"));\n        }\n\n        if (this.options.i18n) {\n            try {\n                const response = await fetch(this.options.i18n);\n                config.i18n = await response.json();\n            } catch {\n                console.error(\n                    `date-picker could not load i18n for ${this.options.i18n}`\n                );\n            }\n        }\n        this.pikaday = new Pikaday(config);\n    },\n\n    add_clear_button(el_append_to) {\n        if (!this.el.disabled && !this.el.required && this.el.value) {\n            // Add clear button\n            const clear_button = document.createElement(\"span\");\n            clear_button.setAttribute(\"class\", \"cancel-button\");\n            clear_button.addEventListener(\"click\", (e) => {\n                e.stopPropagation();\n                this.el.value = null;\n                this.dispatch_change_event();\n            });\n            el_append_to.appendChild(clear_button);\n        }\n    },\n\n    dispatch_change_event() {\n        const event = new Event(\"change\", {\n            bubbles: true,\n            cancelable: true,\n        });\n        // Set ``firedBy` to prevent pikaday to call it's own handler and land\n        // in an infinite loop.\n        event.firedBy = this.pikaday;\n        this.el.dispatchEvent(event);\n\n        // Also trigger input-change\n        $(this.el).trigger(\"input-change\");\n        $(this.el.form).trigger(\"input-change\");\n    },\n});\n"],"names":["i","parser","Parser","addArgument","add_argument","addAlias","Base","name","trigger","format","init","el","disabled","options","$","parse","after","befores","document","querySelectorAll","addEventListener","e","b_date","target","value","Date","a_date","offset","offsetDays","setDate","getDate","toISOString","substring","dispatch_change_event","behavior","dom","display_el","createElement","setAttribute","classList","add","insertAdjacentElement","label","closest","events","preventDefault","outputFormat","PatDisplayTime","default","display_time_config","locale","display_el_pat","textContent","on","add_clear_button","utils","getAttribute","window","__patternslib_import_styles","Pikaday","config","field","firstDay","showWeekNumber","weekNumbers","onSelect","minDate","maxDate","i18n","fetch","response","json","console","error","pikaday","el_append_to","this","required","clear_button","stopPropagation","appendChild","event","Event","bubbles","cancelable","firedBy","dispatchEvent","form"],"sourceRoot":""}