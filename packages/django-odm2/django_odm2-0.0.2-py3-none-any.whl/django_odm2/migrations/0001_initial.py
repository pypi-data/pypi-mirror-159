# Generated by Django 4.0.5 on 2022-06-03 13:22

import uuid

from django.db import migrations, models
from django.db.models import deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name='Action',
            fields=[
                (
                    'action_id',
                    models.AutoField(
                        db_column='actionid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'begin_datetime',
                    models.DateTimeField(db_column='begindatetime'),
                ),
                (
                    'begin_datetime_utc_offset',
                    models.IntegerField(db_column='begindatetimeutcoffset'),
                ),
                (
                    'end_datetime',
                    models.DateTimeField(
                        blank=True, db_column='enddatetime', null=True
                    ),
                ),
                (
                    'end_datetime_utc_offset',
                    models.IntegerField(
                        blank=True, db_column='enddatetimeutcoffset', null=True
                    ),
                ),
                (
                    'action_description',
                    models.TextField(
                        blank=True, db_column='actiondescription'
                    ),
                ),
                (
                    'action_file_link',
                    models.FileField(
                        blank=True, db_column='actionfilelink', upload_to=''
                    ),
                ),
            ],
            options={
                'db_table': 'actions',
            },
        ),
        migrations.CreateModel(
            name='ActionType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_actiontype',
            },
        ),
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                (
                    'affiliation_id',
                    models.AutoField(
                        db_column='affiliationid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'is_primary_organization_contact',
                    models.BooleanField(
                        db_column='isprimaryorganizationcontact',
                        default=None,
                        null=True,
                    ),
                ),
                (
                    'affiliation_start_date',
                    models.DateField(db_column='affiliationstartdate'),
                ),
                (
                    'affiliation_end_date',
                    models.DateField(
                        blank=True, db_column='affiliationenddate', null=True
                    ),
                ),
                (
                    'primary_phone',
                    models.CharField(
                        blank=True, db_column='primaryphone', max_length=50
                    ),
                ),
                (
                    'primary_email',
                    models.CharField(db_column='primaryemail', max_length=255),
                ),
                (
                    'primary_address',
                    models.CharField(
                        blank=True, db_column='primaryaddress', max_length=255
                    ),
                ),
                (
                    'person_link',
                    models.CharField(
                        blank=True, db_column='personlink', max_length=255
                    ),
                ),
            ],
            options={
                'db_table': 'affiliations',
                'ordering': [
                    'person__person_first_name',
                    'person__person_last_name',
                ],
            },
        ),
        migrations.CreateModel(
            name='AggregationStatistic',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_aggregationstatistic',
            },
        ),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                (
                    'annotation_id',
                    models.AutoField(
                        db_column='annotationid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'annotation_code',
                    models.CharField(
                        blank=True, db_column='annotationcode', max_length=50
                    ),
                ),
                (
                    'annotation_text',
                    models.CharField(
                        db_column='annotationtext', max_length=500
                    ),
                ),
                (
                    'annotation_datetime',
                    models.DateTimeField(
                        blank=True, db_column='annotationdatetime', null=True
                    ),
                ),
                (
                    'annotation_utc_offset',
                    models.IntegerField(
                        blank=True, db_column='annotationutcoffset', null=True
                    ),
                ),
                (
                    'annotation_link',
                    models.CharField(
                        blank=True, db_column='annotationlink', max_length=255
                    ),
                ),
            ],
            options={
                'db_table': 'annotations',
            },
        ),
        migrations.CreateModel(
            name='AnnotationType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_annotationtype',
            },
        ),
        migrations.CreateModel(
            name='AuthorList',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                ('author_order', models.IntegerField(db_column='authororder')),
            ],
            options={
                'db_table': 'authorlists',
            },
        ),
        migrations.CreateModel(
            name='CategoricalResultValue',
            fields=[
                (
                    'value_id',
                    models.BigAutoField(
                        db_column='valueid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'value_datetime',
                    models.DateTimeField(db_column='valuedatetime'),
                ),
                (
                    'value_datetime_utc_offset',
                    models.IntegerField(db_column='valuedatetimeutcoffset'),
                ),
                (
                    'data_value',
                    models.CharField(db_column='datavalue', max_length=255),
                ),
            ],
            options={
                'db_table': 'categoricalresultvalues',
            },
        ),
        migrations.CreateModel(
            name='CensorCode',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_censorcode',
            },
        ),
        migrations.CreateModel(
            name='Citation',
            fields=[
                (
                    'citation_id',
                    models.AutoField(
                        db_column='citationid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ('title', models.CharField(db_column='title', max_length=255)),
                (
                    'publisher',
                    models.CharField(db_column='publisher', max_length=255),
                ),
                (
                    'publication_year',
                    models.IntegerField(db_column='publicationyear'),
                ),
                (
                    'citation_link',
                    models.CharField(
                        blank=True, db_column='citationlink', max_length=255
                    ),
                ),
            ],
            options={
                'db_table': 'citations',
            },
        ),
        migrations.CreateModel(
            name='DataLoggerFile',
            fields=[
                (
                    'data_logger_file_id',
                    models.AutoField(
                        db_column='dataloggerfileid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'data_logger_file_name',
                    models.CharField(
                        db_column='dataloggerfilename', max_length=255
                    ),
                ),
                (
                    'data_logger_file_description',
                    models.CharField(
                        blank=True,
                        db_column='dataloggerfiledescription',
                        max_length=500,
                    ),
                ),
                (
                    'data_logger_file_link',
                    models.FileField(
                        blank=True,
                        db_column='dataloggerfilelink',
                        upload_to='',
                    ),
                ),
            ],
            options={
                'db_table': 'dataloggerfiles',
            },
        ),
        migrations.CreateModel(
            name='DataQuality',
            fields=[
                (
                    'data_quality_id',
                    models.AutoField(
                        db_column='dataqualityid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'data_quality_code',
                    models.CharField(
                        db_column='dataqualitycode', max_length=255
                    ),
                ),
                (
                    'data_quality_value',
                    models.FloatField(
                        blank=True, db_column='dataqualityvalue', null=True
                    ),
                ),
                (
                    'data_quality_description',
                    models.CharField(
                        blank=True,
                        db_column='dataqualitydescription',
                        max_length=500,
                    ),
                ),
                (
                    'data_quality_link',
                    models.CharField(
                        blank=True, db_column='dataqualitylink', max_length=255
                    ),
                ),
            ],
            options={
                'db_table': 'dataquality',
            },
        ),
        migrations.CreateModel(
            name='DataQualityType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_dataqualitytype',
            },
        ),
        migrations.CreateModel(
            name='DataSet',
            fields=[
                (
                    'data_set_id',
                    models.AutoField(
                        db_column='datasetid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'data_set_uuid',
                    models.UUIDField(
                        db_column='datasetuuid',
                        default=uuid.uuid4,
                        editable=False,
                    ),
                ),
                (
                    'data_set_code',
                    models.CharField(db_column='datasetcode', max_length=50),
                ),
                (
                    'data_set_title',
                    models.CharField(db_column='datasettitle', max_length=255),
                ),
                (
                    'data_set_abstract',
                    models.CharField(
                        db_column='datasetabstract', max_length=500
                    ),
                ),
            ],
            options={
                'db_table': 'datasets',
            },
        ),
        migrations.CreateModel(
            name='DataSetResult',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'data_set',
                    models.ForeignKey(
                        db_column='datasetid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.dataset',
                    ),
                ),
            ],
            options={
                'db_table': 'datasetsresults',
            },
        ),
        migrations.CreateModel(
            name='DataSetType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_datasettype',
            },
        ),
        migrations.CreateModel(
            name='DeploymentType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_deploymenttype',
            },
        ),
        migrations.CreateModel(
            name='DerivationEquation',
            fields=[
                (
                    'derivation_equation_id',
                    models.AutoField(
                        db_column='derivationequationid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'derivation_equation',
                    models.CharField(
                        db_column='derivationequation', max_length=255
                    ),
                ),
            ],
            options={
                'db_table': 'derivationequations',
            },
        ),
        migrations.CreateModel(
            name='DirectiveType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_directivetype',
            },
        ),
        migrations.CreateModel(
            name='ElevationDatum',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_elevationdatum',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                (
                    'equipment_id',
                    models.AutoField(
                        db_column='equipmentid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'equipment_code',
                    models.CharField(db_column='equipmentcode', max_length=50),
                ),
                (
                    'equipment_name',
                    models.CharField(
                        db_column='equipmentname', max_length=255
                    ),
                ),
                (
                    'equipment_serial_number',
                    models.CharField(
                        db_column='equipmentserialnumber', max_length=50
                    ),
                ),
                (
                    'equipment_purchase_date',
                    models.DateTimeField(db_column='equipmentpurchasedate'),
                ),
                (
                    'equipment_purchase_order_number',
                    models.CharField(
                        blank=True,
                        db_column='equipmentpurchaseordernumber',
                        max_length=50,
                    ),
                ),
                (
                    'equipment_description',
                    models.CharField(
                        blank=True,
                        db_column='equipmentdescription',
                        max_length=500,
                    ),
                ),
                (
                    'equipment_documentation_link',
                    models.FileField(
                        blank=True,
                        db_column='equipmentdocumentationlink',
                        upload_to='',
                    ),
                ),
            ],
            options={
                'db_table': 'equipment',
            },
        ),
        migrations.CreateModel(
            name='EquipmentModel',
            fields=[
                (
                    'equipment_model_id',
                    models.AutoField(
                        db_column='equipmentmodelid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'model_part_number',
                    models.CharField(
                        blank=True, db_column='modelpartnumber', max_length=50
                    ),
                ),
                (
                    'model_name',
                    models.CharField(db_column='modelname', max_length=255),
                ),
                (
                    'model_description',
                    models.CharField(
                        blank=True,
                        db_column='modeldescription',
                        max_length=500,
                    ),
                ),
                (
                    'is_instrument',
                    models.BooleanField(
                        db_column='isinstrument', default=None
                    ),
                ),
                (
                    'model_specifications_file_link',
                    models.FileField(
                        blank=True,
                        db_column='modelspecificationsfilelink',
                        upload_to='',
                    ),
                ),
                (
                    'model_link',
                    models.CharField(
                        blank=True, db_column='modellink', max_length=255
                    ),
                ),
            ],
            options={
                'db_table': 'equipmentmodels',
                'ordering': ['model_manufacturer', 'model_name'],
            },
        ),
        migrations.CreateModel(
            name='EquipmentType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_equipmenttype',
            },
        ),
        migrations.CreateModel(
            name='ExtensionProperty',
            fields=[
                (
                    'property_id',
                    models.AutoField(
                        db_column='propertyid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'property_name',
                    models.CharField(db_column='propertyname', max_length=255),
                ),
                (
                    'property_description',
                    models.CharField(
                        blank=True,
                        db_column='propertydescription',
                        max_length=500,
                    ),
                ),
            ],
            options={
                'db_table': 'extensionproperties',
            },
        ),
        migrations.CreateModel(
            name='ExternalIdentifierSystem',
            fields=[
                (
                    'external_identifier_system_id',
                    models.AutoField(
                        db_column='externalidentifiersystemid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'external_identifier_system_name',
                    models.CharField(
                        db_column='externalidentifiersystemname',
                        max_length=255,
                    ),
                ),
                (
                    'external_identifier_system_description',
                    models.CharField(
                        blank=True,
                        db_column='externalidentifiersystemdescription',
                        max_length=500,
                    ),
                ),
                (
                    'external_identifier_system_url',
                    models.CharField(
                        blank=True,
                        db_column='externalidentifiersystemurl',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'externalidentifiersystems',
            },
        ),
        migrations.CreateModel(
            name='FeatureAction',
            fields=[
                (
                    'feature_action_id',
                    models.AutoField(
                        db_column='featureactionid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'action',
                    models.ForeignKey(
                        db_column='actionid',
                        on_delete=deletion.CASCADE,
                        related_name='feature_actions',
                        to='django_odm2.action',
                    ),
                ),
            ],
            options={
                'db_table': 'featureactions',
            },
        ),
        migrations.CreateModel(
            name='MeasurementResultValue',
            fields=[
                (
                    'value_id',
                    models.BigAutoField(
                        db_column='valueid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'value_datetime',
                    models.DateTimeField(db_column='valuedatetime'),
                ),
                (
                    'value_datetime_utc_offset',
                    models.IntegerField(db_column='valuedatetimeutcoffset'),
                ),
                ('data_value', models.FloatField(db_column='datavalue')),
            ],
            options={
                'db_table': 'measurementresultvalues',
            },
        ),
        migrations.CreateModel(
            name='Medium',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_medium',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Method',
            fields=[
                (
                    'method_id',
                    models.AutoField(
                        db_column='methodid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'method_code',
                    models.CharField(db_column='methodcode', max_length=50),
                ),
                (
                    'method_name',
                    models.CharField(db_column='methodname', max_length=255),
                ),
                (
                    'method_description',
                    models.CharField(
                        blank=True,
                        db_column='methoddescription',
                        max_length=500,
                    ),
                ),
                (
                    'method_link',
                    models.CharField(
                        blank=True, db_column='methodlink', max_length=255
                    ),
                ),
            ],
            options={
                'db_table': 'methods',
            },
        ),
        migrations.CreateModel(
            name='MethodType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_methodtype',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Model',
            fields=[
                (
                    'model_id',
                    models.AutoField(
                        db_column='modelid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'model_code',
                    models.CharField(db_column='modelcode', max_length=255),
                ),
                (
                    'model_name',
                    models.CharField(db_column='modelname', max_length=255),
                ),
                (
                    'model_description',
                    models.CharField(
                        blank=True,
                        db_column='modeldescription',
                        max_length=500,
                    ),
                ),
                (
                    'version',
                    models.CharField(
                        blank=True, db_column='version', max_length=255
                    ),
                ),
                (
                    'model_link',
                    models.CharField(
                        blank=True, db_column='modellink', max_length=255
                    ),
                ),
            ],
            options={
                'db_table': 'models',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                (
                    'organization_id',
                    models.AutoField(
                        db_column='organizationid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'organization_code',
                    models.CharField(
                        db_column='organizationcode',
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    'organization_name',
                    models.CharField(
                        db_column='organizationname', max_length=255
                    ),
                ),
                (
                    'organization_description',
                    models.CharField(
                        blank=True,
                        db_column='organizationdescription',
                        max_length=500,
                    ),
                ),
                (
                    'organization_link',
                    models.CharField(
                        blank=True,
                        db_column='organizationlink',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'organizations',
                'ordering': ['organization_code'],
            },
        ),
        migrations.CreateModel(
            name='OrganizationType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_organizationtype',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='People',
            fields=[
                (
                    'person_id',
                    models.AutoField(
                        db_column='personid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'person_first_name',
                    models.CharField(
                        db_column='personfirstname', max_length=255
                    ),
                ),
                (
                    'person_middle_name',
                    models.CharField(
                        blank=True,
                        db_column='personmiddlename',
                        max_length=255,
                    ),
                ),
                (
                    'person_last_name',
                    models.CharField(
                        db_column='personlastname', max_length=255
                    ),
                ),
                (
                    'citations',
                    models.ManyToManyField(
                        related_name='cited_authors',
                        through='django_odm2.AuthorList',
                        to='django_odm2.citation',
                    ),
                ),
            ],
            options={
                'db_table': 'people',
                'ordering': ['person_first_name', 'person_last_name'],
            },
        ),
        migrations.CreateModel(
            name='PointCoverageResultValue',
            fields=[
                (
                    'value_id',
                    models.BigAutoField(
                        db_column='valueid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'value_datetime',
                    models.DateTimeField(db_column='valuedatetime'),
                ),
                (
                    'value_datetime_utc_offset',
                    models.IntegerField(db_column='valuedatetimeutcoffset'),
                ),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('data_value', models.BigIntegerField(db_column='datavalue')),
            ],
            options={
                'db_table': 'pointcoverageresultvalues',
            },
        ),
        migrations.CreateModel(
            name='ProcessingLevel',
            fields=[
                (
                    'processing_level_id',
                    models.AutoField(
                        db_column='processinglevelid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'processing_level_code',
                    models.CharField(
                        db_column='processinglevelcode', max_length=50
                    ),
                ),
                (
                    'definition',
                    models.CharField(
                        blank=True, db_column='definition', max_length=500
                    ),
                ),
                (
                    'explanation',
                    models.CharField(
                        blank=True, db_column='explanation', max_length=500
                    ),
                ),
            ],
            options={
                'db_table': 'processinglevels',
            },
        ),
        migrations.CreateModel(
            name='ProfileResultValue',
            fields=[
                (
                    'value_id',
                    models.BigAutoField(
                        db_column='valueid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'value_datetime',
                    models.DateTimeField(db_column='valuedatetime'),
                ),
                (
                    'value_datetime_utc_offset',
                    models.IntegerField(db_column='valuedatetimeutcoffset'),
                ),
                (
                    'time_aggregation_interval',
                    models.FloatField(db_column='timeaggregationinterval'),
                ),
                ('z_location', models.FloatField(db_column='zlocation')),
                ('data_value', models.FloatField(db_column='datavalue')),
                (
                    'z_aggregation_interval',
                    models.FloatField(db_column='zaggregationinterval'),
                ),
            ],
            options={
                'db_table': 'profileresultvalues',
            },
        ),
        migrations.CreateModel(
            name='PropertyDataType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_propertydatatype',
            },
        ),
        migrations.CreateModel(
            name='QualityCode',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_qualitycode',
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterial',
            fields=[
                (
                    'reference_material_id',
                    models.AutoField(
                        db_column='referencematerialid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'reference_material_code',
                    models.CharField(
                        db_column='referencematerialcode', max_length=50
                    ),
                ),
                (
                    'reference_material_lot_code',
                    models.CharField(
                        blank=True,
                        db_column='referencemateriallotcode',
                        max_length=255,
                    ),
                ),
                (
                    'reference_material_purchase_date',
                    models.DateTimeField(
                        blank=True,
                        db_column='referencematerialpurchasedate',
                        null=True,
                    ),
                ),
                (
                    'reference_material_expiration_date',
                    models.DateTimeField(
                        blank=True,
                        db_column='referencematerialexpirationdate',
                        null=True,
                    ),
                ),
                (
                    'reference_material_certificate_link',
                    models.FileField(
                        blank=True,
                        db_column='referencematerialcertificatelink',
                        upload_to='',
                    ),
                ),
            ],
            options={
                'db_table': 'referencematerials',
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterialMedium',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_referencematerialmedium',
            },
        ),
        migrations.CreateModel(
            name='RelationshipType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_relationshiptype',
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                (
                    'result_id',
                    models.AutoField(
                        db_column='resultid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'result_uuid',
                    models.UUIDField(
                        db_column='resultuuid',
                        default=uuid.uuid4,
                        editable=False,
                    ),
                ),
                (
                    'result_datetime',
                    models.DateTimeField(
                        blank=True, db_column='resultdatetime', null=True
                    ),
                ),
                (
                    'result_datetime_utc_offset',
                    models.BigIntegerField(
                        blank=True,
                        db_column='resultdatetimeutcoffset',
                        null=True,
                    ),
                ),
                (
                    'valid_datetime',
                    models.DateTimeField(
                        blank=True, db_column='validdatetime', null=True
                    ),
                ),
                (
                    'valid_datetime_utc_offset',
                    models.BigIntegerField(
                        blank=True,
                        db_column='validdatetimeutcoffset',
                        null=True,
                    ),
                ),
                (
                    'value_count',
                    models.IntegerField(db_column='valuecount', default=0),
                ),
            ],
            options={
                'db_table': 'results',
            },
        ),
        migrations.CreateModel(
            name='ResultType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_resulttype',
            },
        ),
        migrations.CreateModel(
            name='SamplingFeature',
            fields=[
                (
                    'sampling_feature_id',
                    models.AutoField(
                        db_column='samplingfeatureid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'sampling_feature_uuid',
                    models.UUIDField(
                        db_column='samplingfeatureuuid',
                        default=uuid.uuid4,
                        editable=False,
                    ),
                ),
                (
                    'sampling_feature_code',
                    models.CharField(
                        db_column='samplingfeaturecode',
                        max_length=50,
                        unique=True,
                    ),
                ),
                (
                    'sampling_feature_name',
                    models.CharField(
                        blank=True,
                        db_column='samplingfeaturename',
                        max_length=255,
                    ),
                ),
                (
                    'sampling_feature_description',
                    models.CharField(
                        blank=True,
                        db_column='samplingfeaturedescription',
                        max_length=500,
                    ),
                ),
                (
                    'elevation_m',
                    models.FloatField(
                        blank=True, db_column='elevation_m', null=True
                    ),
                ),
                (
                    'feature_geometry',
                    models.BinaryField(
                        blank=True, db_column='featuregeometry', null=True
                    ),
                ),
                (
                    'actions',
                    models.ManyToManyField(
                        related_name='sampling_features',
                        through='django_odm2.FeatureAction',
                        to='django_odm2.action',
                    ),
                ),
            ],
            options={
                'db_table': 'samplingfeatures',
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureGeoType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_samplingfeaturegeotype',
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_samplingfeaturetype',
            },
        ),
        migrations.CreateModel(
            name='SectionResultValue',
            fields=[
                (
                    'value_id',
                    models.BigAutoField(
                        db_column='valueid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'value_datetime',
                    models.DateTimeField(db_column='valuedatetime'),
                ),
                (
                    'value_datetime_utc_offset',
                    models.IntegerField(db_column='valuedatetimeutcoffset'),
                ),
                (
                    'time_aggregation_interval',
                    models.FloatField(db_column='timeaggregationinterval'),
                ),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('z_location', models.FloatField(db_column='zlocation')),
                ('data_value', models.FloatField(db_column='datavalue')),
                (
                    'x_aggregation_interval',
                    models.FloatField(db_column='xaggregationinterval'),
                ),
                (
                    'z_aggregation_interval',
                    models.FloatField(db_column='zaggregationinterval'),
                ),
                (
                    'aggregation_statistic',
                    models.ForeignKey(
                        db_column='aggregationstatisticcv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.aggregationstatistic',
                    ),
                ),
            ],
            options={
                'db_table': 'sectionresultvalues',
            },
        ),
        migrations.CreateModel(
            name='SiteType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_sitetype',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SpatialOffsetType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_spatialoffsettype',
            },
        ),
        migrations.CreateModel(
            name='SpatialReference',
            fields=[
                (
                    'spatial_reference_id',
                    models.AutoField(
                        db_column='spatialreferenceid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'srs_code',
                    models.CharField(
                        blank=True, db_column='srscode', max_length=50
                    ),
                ),
                (
                    'srs_name',
                    models.CharField(db_column='srsname', max_length=255),
                ),
                (
                    'srs_description',
                    models.CharField(
                        blank=True, db_column='srsdescription', max_length=500
                    ),
                ),
                (
                    'srs_link',
                    models.CharField(
                        blank=True, db_column='srslink', max_length=255
                    ),
                ),
            ],
            options={
                'db_table': 'spatialreferences',
            },
        ),
        migrations.CreateModel(
            name='Speciation',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_speciation',
            },
        ),
        migrations.CreateModel(
            name='SpecimenType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_specimentype',
            },
        ),
        migrations.CreateModel(
            name='SpectraResultValue',
            fields=[
                (
                    'value_id',
                    models.BigAutoField(
                        db_column='valueid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'value_datetime',
                    models.DateTimeField(db_column='valuedatetime'),
                ),
                (
                    'value_datetime_utc_offset',
                    models.IntegerField(db_column='valuedatetimeutcoffset'),
                ),
                (
                    'time_aggregation_interval',
                    models.FloatField(db_column='timeaggregationinterval'),
                ),
                ('data_value', models.FloatField(db_column='datavalue')),
                (
                    'excitation_wavelength',
                    models.FloatField(db_column='excitationwavelength'),
                ),
                (
                    'emission_wavelength',
                    models.FloatField(db_column='emissionwavelength'),
                ),
            ],
            options={
                'db_table': 'spectraresultvalues',
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_status',
            },
        ),
        migrations.CreateModel(
            name='TaxonomicClassifier',
            fields=[
                (
                    'taxonomic_classifier_id',
                    models.AutoField(
                        db_column='taxonomicclassifierid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'taxonomic_classifier_name',
                    models.CharField(
                        db_column='taxonomicclassifiername', max_length=255
                    ),
                ),
                (
                    'taxonomic_classifier_common_name',
                    models.CharField(
                        blank=True,
                        db_column='taxonomicclassifiercommonname',
                        max_length=255,
                    ),
                ),
                (
                    'taxonomic_classifier_description',
                    models.CharField(
                        blank=True,
                        db_column='taxonomicclassifierdescription',
                        max_length=500,
                    ),
                ),
            ],
            options={
                'db_table': 'taxonomicclassifiers',
            },
        ),
        migrations.CreateModel(
            name='TaxonomicClassifierType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_taxonomicclassifiertype',
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesResultValue',
            fields=[
                (
                    'value_id',
                    models.BigAutoField(
                        db_column='valueid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'value_datetime',
                    models.DateTimeField(db_column='valuedatetime'),
                ),
                (
                    'value_datetime_utc_offset',
                    models.IntegerField(db_column='valuedatetimeutcoffset'),
                ),
                (
                    'time_aggregation_interval',
                    models.FloatField(db_column='timeaggregationinterval'),
                ),
                ('data_value', models.FloatField(db_column='datavalue')),
            ],
            options={
                'db_table': 'timeseriesresultvalues',
                'ordering': ('value_datetime',),
            },
        ),
        migrations.CreateModel(
            name='TrajectoryResultValue',
            fields=[
                (
                    'value_id',
                    models.BigAutoField(
                        db_column='valueid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'value_datetime',
                    models.DateTimeField(db_column='valuedatetime'),
                ),
                (
                    'value_datetime_utc_offset',
                    models.IntegerField(db_column='valuedatetimeutcoffset'),
                ),
                (
                    'time_aggregation_interval',
                    models.FloatField(db_column='timeaggregationinterval'),
                ),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('z_location', models.FloatField(db_column='zlocation')),
                ('data_value', models.FloatField(db_column='datavalue')),
                (
                    'trajectory_distance',
                    models.FloatField(db_column='trajectorydistance'),
                ),
                (
                    'trajectory_distance_aggregation_interval',
                    models.FloatField(
                        db_column='trajectorydistanceaggregationinterval'
                    ),
                ),
            ],
            options={
                'db_table': 'trajectoryresultvalues',
            },
        ),
        migrations.CreateModel(
            name='TransectResultValue',
            fields=[
                (
                    'value_id',
                    models.BigAutoField(
                        db_column='valueid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'value_datetime',
                    models.DateTimeField(db_column='valuedatetime'),
                ),
                (
                    'value_datetime_utc_offset',
                    models.IntegerField(db_column='valuedatetimeutcoffset'),
                ),
                (
                    'time_aggregation_interval',
                    models.FloatField(db_column='timeaggregationinterval'),
                ),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('data_value', models.FloatField(db_column='datavalue')),
                (
                    'transect_distance',
                    models.FloatField(db_column='transectdistance'),
                ),
                (
                    'transect_distance_aggregation_interval',
                    models.FloatField(
                        db_column='transectdistanceaggregationinterval'
                    ),
                ),
                (
                    'aggregation_statistic',
                    models.ForeignKey(
                        db_column='aggregationstatisticcv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.aggregationstatistic',
                    ),
                ),
            ],
            options={
                'db_table': 'transectresultvalues',
            },
        ),
        migrations.CreateModel(
            name='UnitsType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_unitstype',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                (
                    'variable_id',
                    models.AutoField(
                        db_column='variableid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'variable_code',
                    models.CharField(db_column='variablecode', max_length=50),
                ),
                (
                    'variable_definition',
                    models.CharField(
                        blank=True,
                        db_column='variabledefinition',
                        max_length=500,
                    ),
                ),
                ('no_data_value', models.FloatField(db_column='nodatavalue')),
            ],
            options={
                'db_table': 'variables',
                'ordering': ['variable_code'],
            },
        ),
        migrations.CreateModel(
            name='VariableName',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_variablename',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='VariableType',
            fields=[
                ('term', models.CharField(db_column='term', max_length=255)),
                (
                    'name',
                    models.CharField(
                        db_column='name',
                        max_length=255,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'definition',
                    models.TextField(blank=True, db_column='definition'),
                ),
                (
                    'category',
                    models.CharField(
                        blank=True, db_column='category', max_length=255
                    ),
                ),
                (
                    'source_vocabulary_uri',
                    models.CharField(
                        blank=True,
                        db_column='sourcevocabularyuri',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'cv_variabletype',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CalibrationAction',
            fields=[
                (
                    'action',
                    models.OneToOneField(
                        db_column='actionid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        related_name='calibration',
                        serialize=False,
                        to='django_odm2.action',
                    ),
                ),
                (
                    'calibration_check_value',
                    models.FloatField(
                        blank=True,
                        db_column='calibrationcheckvalue',
                        null=True,
                    ),
                ),
                (
                    'calibration_equation',
                    models.CharField(
                        blank=True,
                        db_column='calibrationequation',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'calibrationactions',
            },
        ),
        migrations.CreateModel(
            name='CategoricalResult',
            fields=[
                (
                    'result',
                    models.OneToOneField(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to='django_odm2.result',
                    ),
                ),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('z_location', models.FloatField(db_column='zlocation')),
                (
                    'quality_code',
                    models.ForeignKey(
                        db_column='qualitycodecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.qualitycode',
                    ),
                ),
            ],
            options={
                'db_table': 'categoricalresults',
            },
        ),
        migrations.CreateModel(
            name='MaintenanceAction',
            fields=[
                (
                    'action',
                    models.OneToOneField(
                        db_column='actionid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        related_name='maintenance',
                        serialize=False,
                        to='django_odm2.action',
                    ),
                ),
                (
                    'is_factory_service',
                    models.BooleanField(
                        db_column='isfactoryservice', default=None
                    ),
                ),
                (
                    'maintenance_code',
                    models.CharField(
                        blank=True, db_column='maintenancecode', max_length=50
                    ),
                ),
                (
                    'maintenance_reason',
                    models.CharField(
                        blank=True,
                        db_column='maintenancereason',
                        max_length=500,
                    ),
                ),
            ],
            options={
                'db_table': 'maintenanceactions',
            },
        ),
        migrations.CreateModel(
            name='MeasurementResult',
            fields=[
                (
                    'result',
                    models.OneToOneField(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to='django_odm2.result',
                    ),
                ),
                (
                    'time_aggregation_interval',
                    models.FloatField(db_column='timeaggregationinterval'),
                ),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('z_location', models.FloatField(db_column='zlocation')),
                (
                    'aggregation_statistic',
                    models.ForeignKey(
                        db_column='aggregationstatisticcv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.aggregationstatistic',
                    ),
                ),
                (
                    'censor_code',
                    models.ForeignKey(
                        db_column='censorcodecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.censorcode',
                    ),
                ),
                (
                    'quality_code',
                    models.ForeignKey(
                        db_column='qualitycodecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.qualitycode',
                    ),
                ),
            ],
            options={
                'db_table': 'measurementresults',
            },
        ),
        migrations.CreateModel(
            name='PointCoverageResult',
            fields=[
                (
                    'result',
                    models.OneToOneField(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to='django_odm2.result',
                    ),
                ),
                (
                    'time_aggregation_interval',
                    models.FloatField(db_column='timeaggregationinterval'),
                ),
                ('z_location', models.FloatField(db_column='zlocation')),
                (
                    'intended_x_spacing',
                    models.FloatField(db_column='intendedxspacing'),
                ),
                (
                    'intended_y_spacing',
                    models.FloatField(
                        blank=True, db_column='intendedyspacing', null=True
                    ),
                ),
                (
                    'aggregation_statistic',
                    models.ForeignKey(
                        db_column='aggregationstatisticcv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.aggregationstatistic',
                    ),
                ),
            ],
            options={
                'db_table': 'pointcoverageresults',
            },
        ),
        migrations.CreateModel(
            name='ProfileResult',
            fields=[
                (
                    'result',
                    models.OneToOneField(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to='django_odm2.result',
                    ),
                ),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                (
                    'intended_z_spacing',
                    models.FloatField(
                        blank=True, db_column='intendedzspacing', null=True
                    ),
                ),
                (
                    'intended_time_spacing',
                    models.FloatField(
                        blank=True, db_column='intendedtimespacing', null=True
                    ),
                ),
                (
                    'aggregation_statistic',
                    models.ForeignKey(
                        db_column='aggregationstatisticcv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.aggregationstatistic',
                    ),
                ),
            ],
            options={
                'db_table': 'profileresults',
            },
        ),
        migrations.CreateModel(
            name='SectionResult',
            fields=[
                (
                    'result',
                    models.OneToOneField(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to='django_odm2.result',
                    ),
                ),
                ('y_location', models.FloatField(db_column='ylocation')),
                (
                    'intended_x_spacing',
                    models.FloatField(db_column='intendedxspacing'),
                ),
                (
                    'intended_z_spacing',
                    models.FloatField(
                        blank=True, db_column='intendedzspacing', null=True
                    ),
                ),
                (
                    'intended_time_spacing',
                    models.FloatField(
                        blank=True, db_column='intendedtimespacing', null=True
                    ),
                ),
                (
                    'aggregation_statistic',
                    models.ForeignKey(
                        db_column='aggregationstatisticcv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.aggregationstatistic',
                    ),
                ),
            ],
            options={
                'db_table': 'sectionresults',
            },
        ),
        migrations.CreateModel(
            name='Specimen',
            fields=[
                (
                    'sampling_feature',
                    models.OneToOneField(
                        db_column='samplingfeatureid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to='django_odm2.samplingfeature',
                    ),
                ),
                (
                    'is_field_specimen',
                    models.BooleanField(
                        db_column='isfieldspecimen', default=None
                    ),
                ),
                (
                    'specimen_medium',
                    models.ForeignKey(
                        db_column='specimenmediumcv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.medium',
                    ),
                ),
                (
                    'specimen_type',
                    models.ForeignKey(
                        db_column='specimentypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.specimentype',
                    ),
                ),
            ],
            options={
                'db_table': 'specimens',
            },
        ),
        migrations.CreateModel(
            name='SpecimenBatchPosition',
            fields=[
                (
                    'feature_action',
                    models.OneToOneField(
                        db_column='featureactionid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to='django_odm2.featureaction',
                    ),
                ),
                (
                    'batch_position_number',
                    models.IntegerField(db_column='batchpositionnumber'),
                ),
                (
                    'batch_position_label',
                    models.CharField(
                        blank=True,
                        db_column='batchpositionlabel',
                        max_length=255,
                    ),
                ),
            ],
            options={
                'db_table': 'specimenbatchpostions',
            },
        ),
        migrations.CreateModel(
            name='SpectraResult',
            fields=[
                (
                    'result',
                    models.OneToOneField(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to='django_odm2.result',
                    ),
                ),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('z_location', models.FloatField(db_column='zlocation')),
                (
                    'intended_wavelength_spacing',
                    models.FloatField(db_column='intendedwavelengthspacing'),
                ),
                (
                    'aggregation_statistic',
                    models.ForeignKey(
                        db_column='aggregationstatisticcv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.aggregationstatistic',
                    ),
                ),
            ],
            options={
                'db_table': 'spectraresults',
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesResult',
            fields=[
                (
                    'result',
                    models.OneToOneField(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to='django_odm2.result',
                    ),
                ),
                ('x_location', models.FloatField(db_column='xlocation')),
                ('y_location', models.FloatField(db_column='ylocation')),
                ('z_location', models.FloatField(db_column='zlocation')),
                (
                    'intended_time_spacing',
                    models.FloatField(
                        blank=True, db_column='intendedtimespacing', null=True
                    ),
                ),
                (
                    'aggregation_statistic',
                    models.ForeignKey(
                        db_column='aggregationstatisticcv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.aggregationstatistic',
                    ),
                ),
            ],
            options={
                'db_table': 'timeseriesresults',
            },
        ),
        migrations.CreateModel(
            name='TrajectoryResult',
            fields=[
                (
                    'result',
                    models.OneToOneField(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to='django_odm2.result',
                    ),
                ),
                (
                    'intended_time_spacing',
                    models.FloatField(
                        blank=True, db_column='intendedtimespacing', null=True
                    ),
                ),
                (
                    'intended_trajectory_spacing',
                    models.FloatField(db_column='intendedtrajectoryspacing'),
                ),
                (
                    'aggregation_statistic',
                    models.ForeignKey(
                        db_column='aggregationstatisticcv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.aggregationstatistic',
                    ),
                ),
            ],
            options={
                'db_table': 'trajectoryresults',
            },
        ),
        migrations.CreateModel(
            name='TransectResult',
            fields=[
                (
                    'result',
                    models.OneToOneField(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to='django_odm2.result',
                    ),
                ),
                ('z_location', models.FloatField(db_column='zlocation')),
                (
                    'intended_time_spacing',
                    models.FloatField(
                        blank=True, db_column='intendedtimespacing', null=True
                    ),
                ),
                (
                    'intended_transect_spacing',
                    models.FloatField(db_column='intendedtransectspacing'),
                ),
                (
                    'aggregation_statistic',
                    models.ForeignKey(
                        db_column='aggregationstatisticcv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.aggregationstatistic',
                    ),
                ),
            ],
            options={
                'db_table': 'transectresults',
            },
        ),
        migrations.CreateModel(
            name='VariableExternalIdentifier',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'variable_external_identifier',
                    models.CharField(
                        db_column='variableexternalidentifer', max_length=255
                    ),
                ),
                (
                    'variable_external_identifier_uri',
                    models.CharField(
                        blank=True,
                        db_column='variableexternalidentifieruri',
                        max_length=255,
                    ),
                ),
                (
                    'external_identifier_system',
                    models.ForeignKey(
                        db_column='externalidentifiersystemid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.externalidentifiersystem',
                    ),
                ),
                (
                    'variable',
                    models.ForeignKey(
                        db_column='variableid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.variable',
                    ),
                ),
            ],
            options={
                'db_table': 'variableexternalidentifiers',
            },
        ),
        migrations.CreateModel(
            name='VariableExtensionPropertyValue',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'property_value',
                    models.CharField(
                        db_column='propertyvalue', max_length=255
                    ),
                ),
                (
                    'property',
                    models.ForeignKey(
                        db_column='propertyid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.extensionproperty',
                    ),
                ),
                (
                    'variable',
                    models.ForeignKey(
                        db_column='variableid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.variable',
                    ),
                ),
            ],
            options={
                'db_table': 'variableextensionpropertyvalues',
            },
        ),
        migrations.AddField(
            model_name='variable',
            name='extension_property_values',
            field=models.ManyToManyField(
                related_name='variables',
                through='django_odm2.VariableExtensionPropertyValue',
                to='django_odm2.extensionproperty',
            ),
        ),
        migrations.AddField(
            model_name='variable',
            name='external_identifiers',
            field=models.ManyToManyField(
                related_name='variables',
                through='django_odm2.VariableExternalIdentifier',
                to='django_odm2.externalidentifiersystem',
            ),
        ),
        migrations.AddField(
            model_name='variable',
            name='speciation',
            field=models.ForeignKey(
                blank=True,
                db_column='speciationcv',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.speciation',
            ),
        ),
        migrations.AddField(
            model_name='variable',
            name='variable_name',
            field=models.ForeignKey(
                db_column='variablenamecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.variablename',
            ),
        ),
        migrations.AddField(
            model_name='variable',
            name='variable_type',
            field=models.ForeignKey(
                db_column='variabletypecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.variabletype',
            ),
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                (
                    'unit_id',
                    models.AutoField(
                        db_column='unitsid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'unit_abbreviation',
                    models.CharField(
                        db_column='unitsabbreviation', max_length=255
                    ),
                ),
                (
                    'unit_name',
                    models.CharField(db_column='unitsname', max_length=255),
                ),
                (
                    'unit_link',
                    models.CharField(
                        blank=True, db_column='unitslink', max_length=255
                    ),
                ),
                (
                    'unit_type',
                    models.ForeignKey(
                        db_column='unitstypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.unitstype',
                    ),
                ),
            ],
            options={
                'db_table': 'units',
                'ordering': ['unit_name', 'unit_type_id'],
            },
        ),
        migrations.CreateModel(
            name='TransectResultValueAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'value',
                    models.ForeignKey(
                        db_column='valueid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.transectresultvalue',
                    ),
                ),
            ],
            options={
                'db_table': 'transectresultvalueannotations',
            },
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_transect_values',
                through='django_odm2.TransectResultValueAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='censor_code',
            field=models.ForeignKey(
                db_column='censorcodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.censorcode',
            ),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='quality_code',
            field=models.ForeignKey(
                db_column='qualitycodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.qualitycode',
            ),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='timeaggregationintervalunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='transect_distance_unit',
            field=models.ForeignKey(
                db_column='transectdistanceunitsid',
                on_delete=deletion.CASCADE,
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='x_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='xlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='y_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='ylocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.CreateModel(
            name='TrajectoryResultValueAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'value',
                    models.ForeignKey(
                        db_column='valueid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.trajectoryresultvalue',
                    ),
                ),
            ],
            options={
                'db_table': 'trajectoryresultvalueannotations',
            },
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_Trajectory_values',
                through='django_odm2.TrajectoryResultValueAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='censor_code',
            field=models.ForeignKey(
                db_column='censorcodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.censorcode',
            ),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='quality_code',
            field=models.ForeignKey(
                db_column='qualitycodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.qualitycode',
            ),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='timeaggregationintervalunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='trajectory_distance_unit',
            field=models.ForeignKey(
                db_column='trajectorydistanceunitsid',
                on_delete=deletion.CASCADE,
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='x_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='xlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='y_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='ylocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='z_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='zlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.CreateModel(
            name='TimeSeriesResultValueAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'value',
                    models.ForeignKey(
                        db_column='valueid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.timeseriesresultvalue',
                    ),
                ),
            ],
            options={
                'db_table': 'timeseriesresultvalueannotations',
            },
        ),
        migrations.AddField(
            model_name='timeseriesresultvalue',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_time_series_values',
                through='django_odm2.TimeSeriesResultValueAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.AddField(
            model_name='timeseriesresultvalue',
            name='censor_code',
            field=models.ForeignKey(
                db_column='censorcodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.censorcode',
            ),
        ),
        migrations.AddField(
            model_name='timeseriesresultvalue',
            name='quality_code',
            field=models.ForeignKey(
                db_column='qualitycodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.qualitycode',
            ),
        ),
        migrations.AddField(
            model_name='timeseriesresultvalue',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='timeaggregationintervalunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.CreateModel(
            name='TaxonomicClassifierExternalIdentifier',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'taxonomic_classifier_external_identifier',
                    models.CharField(
                        db_column='taxonomicclassifierexternalidentifier',
                        max_length=255,
                    ),
                ),
                (
                    'taxonomic_classifier_external_identifier_uri',
                    models.CharField(
                        blank=True,
                        db_column='taxonomicclassifierexternalidentifieruri',
                        max_length=255,
                    ),
                ),
                (
                    'external_identifier_system',
                    models.ForeignKey(
                        db_column='externalidentifiersystemid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.externalidentifiersystem',
                    ),
                ),
                (
                    'taxonomic_classifier',
                    models.ForeignKey(
                        db_column='taxonomicclassifierid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.taxonomicclassifier',
                    ),
                ),
            ],
            options={
                'db_table': 'taxonomicclassifierexternalidentifiers',
            },
        ),
        migrations.AddField(
            model_name='taxonomicclassifier',
            name='external_identifiers',
            field=models.ManyToManyField(
                related_name='taxonomic_classifier',
                through='django_odm2.TaxonomicClassifierExternalIdentifier',
                to='django_odm2.externalidentifiersystem',
            ),
        ),
        migrations.AddField(
            model_name='taxonomicclassifier',
            name='parent_taxonomic_classifier',
            field=models.ForeignKey(
                blank=True,
                db_column='parenttaxonomicclassifierid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.taxonomicclassifier',
            ),
        ),
        migrations.AddField(
            model_name='taxonomicclassifier',
            name='taxonomic_classifier_type',
            field=models.ForeignKey(
                db_column='taxonomicclassifiertypecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.taxonomicclassifiertype',
            ),
        ),
        migrations.CreateModel(
            name='SpectraResultValueAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'value',
                    models.ForeignKey(
                        db_column='valueid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.spectraresultvalue',
                    ),
                ),
            ],
            options={
                'db_table': 'spectraresultvalueannotations',
            },
        ),
        migrations.AddField(
            model_name='spectraresultvalue',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_spectra_values',
                through='django_odm2.SpectraResultValueAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.AddField(
            model_name='spectraresultvalue',
            name='censor_code',
            field=models.ForeignKey(
                db_column='censorcodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.censorcode',
            ),
        ),
        migrations.AddField(
            model_name='spectraresultvalue',
            name='quality_code',
            field=models.ForeignKey(
                db_column='qualitycodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.qualitycode',
            ),
        ),
        migrations.AddField(
            model_name='spectraresultvalue',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='timeaggregationintervalunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='spectraresultvalue',
            name='wavelength_unit',
            field=models.ForeignKey(
                db_column='wavelengthunitsid',
                on_delete=deletion.CASCADE,
                to='django_odm2.unit',
            ),
        ),
        migrations.CreateModel(
            name='SpatialReferenceExternalIdentifier',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'spatial_reference_external_identifier',
                    models.CharField(
                        db_column='spatialreferenceexternalidentifier',
                        max_length=255,
                    ),
                ),
                (
                    'spatial_reference_external_identifier_uri',
                    models.CharField(
                        blank=True,
                        db_column='spatialreferenceexternalidentifieruri',
                        max_length=255,
                    ),
                ),
                (
                    'external_identifier_system',
                    models.ForeignKey(
                        db_column='externalidentifiersystemid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.externalidentifiersystem',
                    ),
                ),
                (
                    'spatial_reference',
                    models.ForeignKey(
                        db_column='spatialreferenceid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.spatialreference',
                    ),
                ),
            ],
            options={
                'db_table': 'spatialreferenceexternalidentifiers',
            },
        ),
        migrations.AddField(
            model_name='spatialreference',
            name='external_identifiers',
            field=models.ManyToManyField(
                related_name='spatial_references',
                through='django_odm2.SpatialReferenceExternalIdentifier',
                to='django_odm2.externalidentifiersystem',
            ),
        ),
        migrations.CreateModel(
            name='SpatialOffset',
            fields=[
                (
                    'spatial_offset_id',
                    models.AutoField(
                        db_column='spatialoffsetid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'offset_1_value',
                    models.FloatField(db_column='offset1value'),
                ),
                (
                    'offset_2_value',
                    models.FloatField(
                        blank=True, db_column='offset2value', null=True
                    ),
                ),
                (
                    'offset_3_value',
                    models.FloatField(
                        blank=True, db_column='offset3value', null=True
                    ),
                ),
                (
                    'offset_1_unit',
                    models.ForeignKey(
                        db_column='offset1unitid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.unit',
                    ),
                ),
                (
                    'offset_2_unit',
                    models.ForeignKey(
                        blank=True,
                        db_column='offset2unitid',
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.unit',
                    ),
                ),
                (
                    'offset_3_unit',
                    models.ForeignKey(
                        blank=True,
                        db_column='offset3unitid',
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.unit',
                    ),
                ),
                (
                    'spatial_offset_type',
                    models.ForeignKey(
                        db_column='spatialoffsettypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.spatialoffsettype',
                    ),
                ),
            ],
            options={
                'db_table': 'spatialoffsets',
            },
        ),
        migrations.CreateModel(
            name='Simulation',
            fields=[
                (
                    'simulation_id',
                    models.AutoField(
                        db_column='simulationid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'simulation_name',
                    models.CharField(
                        db_column='simulationname', max_length=255
                    ),
                ),
                (
                    'simulation_description',
                    models.CharField(
                        blank=True,
                        db_column='simulationdescription',
                        max_length=500,
                    ),
                ),
                (
                    'simulation_start_datetime',
                    models.DateTimeField(db_column='simulationstartdatetime'),
                ),
                (
                    'simulation_start_datetime_utc_offset',
                    models.IntegerField(
                        db_column='simulationstartdatetimeutcoffset'
                    ),
                ),
                (
                    'simulation_end_datetime',
                    models.DateTimeField(db_column='simulationenddatetime'),
                ),
                (
                    'simulation_end_datetime_utc_offset',
                    models.IntegerField(
                        db_column='simulationenddatetimeutcoffset'
                    ),
                ),
                (
                    'time_step_value',
                    models.FloatField(db_column='timestepvalue'),
                ),
                (
                    'action',
                    models.ForeignKey(
                        db_column='actionid',
                        on_delete=deletion.CASCADE,
                        related_name='simulations',
                        to='django_odm2.action',
                    ),
                ),
                (
                    'input_data_set',
                    models.ForeignKey(
                        blank=True,
                        db_column='inputdatasetid',
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='simulations',
                        to='django_odm2.dataset',
                    ),
                ),
                (
                    'model',
                    models.ForeignKey(
                        db_column='modelid',
                        on_delete=deletion.CASCADE,
                        related_name='simulations',
                        to='django_odm2.model',
                    ),
                ),
                (
                    'time_step_unit',
                    models.ForeignKey(
                        db_column='timestepunitsid',
                        on_delete=deletion.CASCADE,
                        related_name='simulations',
                        to='django_odm2.unit',
                    ),
                ),
            ],
            options={
                'db_table': 'simulations',
            },
        ),
        migrations.CreateModel(
            name='SectionResultValueAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'value',
                    models.ForeignKey(
                        db_column='valueid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.sectionresultvalue',
                    ),
                ),
            ],
            options={
                'db_table': 'sectionresultvalueannotations',
            },
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_section_values',
                through='django_odm2.SectionResultValueAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='censor_code',
            field=models.ForeignKey(
                db_column='censorcodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.censorcode',
            ),
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='quality_code',
            field=models.ForeignKey(
                db_column='qualitycodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.qualitycode',
            ),
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='timeaggregationintervalunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='x_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='xlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='z_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='zlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.CreateModel(
            name='SamplingFeatureExternalIdentifier',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'sampling_feature_external_identifier',
                    models.CharField(
                        db_column='samplingfeatureexternalidentifier',
                        max_length=255,
                    ),
                ),
                (
                    'sampling_feature_external_identifier_uri',
                    models.CharField(
                        blank=True,
                        db_column='samplingfeatureexternalidentifieruri',
                        max_length=255,
                    ),
                ),
                (
                    'external_identifier_system',
                    models.ForeignKey(
                        db_column='externalidentifiersystemid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.externalidentifiersystem',
                    ),
                ),
                (
                    'sampling_feature',
                    models.ForeignKey(
                        db_column='samplingfeatureid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.samplingfeature',
                    ),
                ),
            ],
            options={
                'db_table': 'samplingfeatureexternalidentifiers',
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureExtensionPropertyValue',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'property_value',
                    models.CharField(
                        db_column='propertyvalue', max_length=255
                    ),
                ),
                (
                    'property',
                    models.ForeignKey(
                        db_column='propertyid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.extensionproperty',
                    ),
                ),
                (
                    'sampling_feature',
                    models.ForeignKey(
                        db_column='samplingfeatureid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.samplingfeature',
                    ),
                ),
            ],
            options={
                'db_table': 'samplingfeatureextensionpropertyvalues',
            },
        ),
        migrations.CreateModel(
            name='SamplingFeatureAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'sampling_feature',
                    models.ForeignKey(
                        db_column='samplingfeatureid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.samplingfeature',
                    ),
                ),
            ],
            options={
                'db_table': 'samplingfeatureannotations',
            },
        ),
        migrations.AddField(
            model_name='samplingfeature',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_sampling_features',
                through='django_odm2.SamplingFeatureAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.AddField(
            model_name='samplingfeature',
            name='elevation_datum',
            field=models.ForeignKey(
                blank=True,
                db_column='elevationdatumcv',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.elevationdatum',
            ),
        ),
        migrations.AddField(
            model_name='samplingfeature',
            name='extension_property_values',
            field=models.ManyToManyField(
                related_name='sampling_features',
                through='django_odm2.SamplingFeatureExtensionPropertyValue',
                to='django_odm2.extensionproperty',
            ),
        ),
        migrations.AddField(
            model_name='samplingfeature',
            name='external_identifiers',
            field=models.ManyToManyField(
                related_name='sampling_features',
                through='django_odm2.SamplingFeatureExternalIdentifier',
                to='django_odm2.externalidentifiersystem',
            ),
        ),
        migrations.AddField(
            model_name='samplingfeature',
            name='sampling_feature_geo_type',
            field=models.ForeignKey(
                blank=True,
                db_column='samplingfeaturegeotypecv',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.samplingfeaturegeotype',
            ),
        ),
        migrations.AddField(
            model_name='samplingfeature',
            name='sampling_feature_type',
            field=models.ForeignKey(
                db_column='samplingfeaturetypecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.samplingfeaturetype',
            ),
        ),
        migrations.CreateModel(
            name='ResultExtensionPropertyValue',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'property_value',
                    models.CharField(
                        db_column='propertyvalue', max_length=255
                    ),
                ),
                (
                    'property',
                    models.ForeignKey(
                        db_column='propertyid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.extensionproperty',
                    ),
                ),
                (
                    'result',
                    models.ForeignKey(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.result',
                    ),
                ),
            ],
            options={
                'db_table': 'resultextensionpropertyvalues',
            },
        ),
        migrations.CreateModel(
            name='ResultDataQuality',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'data_quality',
                    models.ForeignKey(
                        db_column='dataqualityid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.dataquality',
                    ),
                ),
                (
                    'result',
                    models.ForeignKey(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.result',
                    ),
                ),
            ],
            options={
                'db_table': 'resultsdataquality',
            },
        ),
        migrations.CreateModel(
            name='ResultAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'begin_datetime',
                    models.DateTimeField(db_column='begindatetime'),
                ),
                (
                    'end_datetime',
                    models.DateTimeField(db_column='enddatetime'),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'result',
                    models.ForeignKey(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        related_name='dated_annotations',
                        to='django_odm2.result',
                    ),
                ),
            ],
            options={
                'db_table': 'resultannotations',
            },
        ),
        migrations.AddField(
            model_name='result',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_results',
                through='django_odm2.ResultAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.AddField(
            model_name='result',
            name='data_quality_values',
            field=models.ManyToManyField(
                related_name='results',
                through='django_odm2.ResultDataQuality',
                to='django_odm2.dataquality',
            ),
        ),
        migrations.AddField(
            model_name='result',
            name='data_sets',
            field=models.ManyToManyField(
                related_name='results',
                through='django_odm2.DataSetResult',
                to='django_odm2.dataset',
            ),
        ),
        migrations.AddField(
            model_name='result',
            name='extension_property_values',
            field=models.ManyToManyField(
                related_name='results',
                through='django_odm2.ResultExtensionPropertyValue',
                to='django_odm2.extensionproperty',
            ),
        ),
        migrations.AddField(
            model_name='result',
            name='feature_action',
            field=models.ForeignKey(
                db_column='featureactionid',
                on_delete=deletion.CASCADE,
                related_name='results',
                to='django_odm2.featureaction',
            ),
        ),
        migrations.AddField(
            model_name='result',
            name='processing_level',
            field=models.ForeignKey(
                db_column='processinglevelid',
                on_delete=deletion.CASCADE,
                to='django_odm2.processinglevel',
            ),
        ),
        migrations.AddField(
            model_name='result',
            name='result_type',
            field=models.ForeignKey(
                db_column='resulttypecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.resulttype',
            ),
        ),
        migrations.AddField(
            model_name='result',
            name='sampled_medium',
            field=models.ForeignKey(
                db_column='sampledmediumcv',
                on_delete=deletion.CASCADE,
                to='django_odm2.medium',
            ),
        ),
        migrations.AddField(
            model_name='result',
            name='status',
            field=models.ForeignKey(
                blank=True,
                db_column='statuscv',
                on_delete=deletion.CASCADE,
                to='django_odm2.status',
            ),
        ),
        migrations.AddField(
            model_name='result',
            name='taxonomic_classifier',
            field=models.ForeignKey(
                blank=True,
                db_column='taxonomicclassifierid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.taxonomicclassifier',
            ),
        ),
        migrations.AddField(
            model_name='result',
            name='unit',
            field=models.ForeignKey(
                db_column='unitsid', on_delete=deletion.CASCADE, to='django_odm2.unit'
            ),
        ),
        migrations.AddField(
            model_name='result',
            name='variable',
            field=models.ForeignKey(
                db_column='variableid',
                on_delete=deletion.CASCADE,
                to='django_odm2.variable',
            ),
        ),
        migrations.CreateModel(
            name='RelatedResult',
            fields=[
                (
                    'relation_id',
                    models.AutoField(
                        db_column='relationid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'version_code',
                    models.CharField(
                        blank=True, db_column='versioncode', max_length=50
                    ),
                ),
                (
                    'related_result_sequence_number',
                    models.IntegerField(
                        blank=True,
                        db_column='relatedresultsequencenumber',
                        null=True,
                    ),
                ),
                (
                    'related_result',
                    models.ForeignKey(
                        db_column='relatedresultid',
                        on_delete=deletion.CASCADE,
                        related_name='related_result_related_result',
                        to='django_odm2.result',
                    ),
                ),
                (
                    'relationship_type',
                    models.ForeignKey(
                        db_column='relationshiptypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.relationshiptype',
                    ),
                ),
                (
                    'result',
                    models.ForeignKey(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.result',
                    ),
                ),
            ],
            options={
                'db_table': 'relatedresults',
            },
        ),
        migrations.CreateModel(
            name='RelatedModel',
            fields=[
                (
                    'relation_id',
                    models.AutoField(
                        db_column='relationid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'model',
                    models.ForeignKey(
                        db_column='modelid',
                        on_delete=deletion.CASCADE,
                        related_name='related_model_model',
                        to='django_odm2.model',
                    ),
                ),
                (
                    'related_model',
                    models.ForeignKey(
                        db_column='relatedmodelid',
                        on_delete=deletion.CASCADE,
                        related_name='related_model_related_model',
                        to='django_odm2.model',
                    ),
                ),
                (
                    'relationship_type',
                    models.ForeignKey(
                        db_column='relationshiptypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.relationshiptype',
                    ),
                ),
            ],
            options={
                'db_table': 'relatedmodels',
            },
        ),
        migrations.CreateModel(
            name='RelatedFeature',
            fields=[
                (
                    'relation_id',
                    models.AutoField(
                        db_column='relationid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'related_feature',
                    models.ForeignKey(
                        db_column='relatedfeatureid',
                        on_delete=deletion.CASCADE,
                        related_name='related_features_related_feature',
                        to='django_odm2.samplingfeature',
                    ),
                ),
                (
                    'relationship_type',
                    models.ForeignKey(
                        db_column='relationshiptypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.relationshiptype',
                    ),
                ),
                (
                    'sampling_feature',
                    models.ForeignKey(
                        db_column='samplingfeatureid',
                        on_delete=deletion.CASCADE,
                        related_name='related_features_sampling_feature',
                        to='django_odm2.samplingfeature',
                    ),
                ),
                (
                    'spatial_offset',
                    models.ForeignKey(
                        blank=True,
                        db_column='spatialoffsetid',
                        null=True,
                        on_delete=deletion.CASCADE,
                        to='django_odm2.spatialoffset',
                    ),
                ),
            ],
            options={
                'db_table': 'relatedfeatures',
            },
        ),
        migrations.CreateModel(
            name='RelatedEquipment',
            fields=[
                (
                    'relation_id',
                    models.AutoField(
                        db_column='relationid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'relationship_start_datetime',
                    models.DateTimeField(
                        db_column='relationshipstartdatetime'
                    ),
                ),
                (
                    'relationship_start_datetime_utc_offset',
                    models.IntegerField(
                        db_column='relationshipstartdatetimeutcoffset'
                    ),
                ),
                (
                    'relationship_end_datetime',
                    models.DateTimeField(
                        blank=True,
                        db_column='relationshipenddatetime',
                        null=True,
                    ),
                ),
                (
                    'relationship_end_datetime_utc_offset',
                    models.IntegerField(
                        blank=True,
                        db_column='relationshipenddatetimeutcoffset',
                        null=True,
                    ),
                ),
                (
                    'equipment',
                    models.ForeignKey(
                        db_column='equipmentid',
                        on_delete=deletion.CASCADE,
                        related_name='related_equipment',
                        to='django_odm2.equipment',
                    ),
                ),
                (
                    'related_equipment',
                    models.ForeignKey(
                        db_column='relatedequipmentid',
                        on_delete=deletion.CASCADE,
                        related_name='reverse_related_equipment',
                        to='django_odm2.equipment',
                    ),
                ),
                (
                    'relationship_type',
                    models.ForeignKey(
                        db_column='relationshiptypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.relationshiptype',
                    ),
                ),
            ],
            options={
                'db_table': 'relatedequipment',
            },
        ),
        migrations.CreateModel(
            name='RelatedDataSet',
            fields=[
                (
                    'relation_id',
                    models.AutoField(
                        db_column='relationid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'version_code',
                    models.CharField(
                        blank=True, db_column='versioncode', max_length=50
                    ),
                ),
                (
                    'data_set',
                    models.ForeignKey(
                        db_column='datasetid',
                        on_delete=deletion.CASCADE,
                        related_name='related_dataset_dataset',
                        to='django_odm2.dataset',
                    ),
                ),
                (
                    'related_data_set',
                    models.ForeignKey(
                        db_column='relateddatasetid',
                        on_delete=deletion.CASCADE,
                        related_name='related_dataset_related_dataset',
                        to='django_odm2.dataset',
                    ),
                ),
                (
                    'relationship_type',
                    models.ForeignKey(
                        db_column='relationshiptypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.relationshiptype',
                    ),
                ),
            ],
            options={
                'db_table': 'relateddatasets',
            },
        ),
        migrations.CreateModel(
            name='RelatedAnnotation',
            fields=[
                (
                    'relation_id',
                    models.AutoField(
                        db_column='relationid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        related_name='related_annonation_annotation',
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'related_annotation',
                    models.ForeignKey(
                        db_column='relatedannotationid',
                        on_delete=deletion.CASCADE,
                        related_name='related_annotation_related_annontation',
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'relationship_type',
                    models.ForeignKey(
                        db_column='relationshiptypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.relationshiptype',
                    ),
                ),
            ],
            options={
                'db_table': 'relatedannotations',
            },
        ),
        migrations.CreateModel(
            name='RelatedAction',
            fields=[
                (
                    'relation_id',
                    models.AutoField(
                        db_column='relationid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'action',
                    models.ForeignKey(
                        db_column='actionid',
                        on_delete=deletion.CASCADE,
                        related_name='related_actions',
                        to='django_odm2.action',
                    ),
                ),
                (
                    'related_action',
                    models.ForeignKey(
                        db_column='relatedactionid',
                        on_delete=deletion.CASCADE,
                        related_name='reverse_related_actions',
                        to='django_odm2.action',
                    ),
                ),
                (
                    'relationship_type',
                    models.ForeignKey(
                        db_column='relationshiptypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.relationshiptype',
                    ),
                ),
            ],
            options={
                'db_table': 'relatedactions',
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterialValue',
            fields=[
                (
                    'reference_material_value_id',
                    models.AutoField(
                        db_column='referencematerialvalueid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'reference_material_value',
                    models.FloatField(db_column='referencematerialvalue'),
                ),
                (
                    'reference_material_accuracy',
                    models.FloatField(
                        blank=True,
                        db_column='referencematerialaccuracy',
                        null=True,
                    ),
                ),
                (
                    'citation',
                    models.ForeignKey(
                        blank=True,
                        db_column='citationid',
                        null=True,
                        on_delete=deletion.CASCADE,
                        to='django_odm2.citation',
                    ),
                ),
                (
                    'reference_material',
                    models.ForeignKey(
                        db_column='referencematerialid',
                        on_delete=deletion.CASCADE,
                        related_name='referencematerialvalue',
                        to='django_odm2.referencematerial',
                    ),
                ),
                (
                    'unit',
                    models.ForeignKey(
                        db_column='unitsid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.unit',
                    ),
                ),
                (
                    'variable',
                    models.ForeignKey(
                        db_column='variableid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.variable',
                    ),
                ),
            ],
            options={
                'db_table': 'referencematerialvalues',
            },
        ),
        migrations.CreateModel(
            name='ReferenceMaterialExternalIdentifier',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'reference_material_external_identifier',
                    models.CharField(
                        db_column='referencematerialexternalidentifier',
                        max_length=255,
                    ),
                ),
                (
                    'reference_material_external_identifier_uri',
                    models.CharField(
                        blank=True,
                        db_column='referencematerialexternalidentifieruri',
                        max_length=255,
                    ),
                ),
                (
                    'external_identifier_system',
                    models.ForeignKey(
                        db_column='externalidentifiersystemid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.externalidentifiersystem',
                    ),
                ),
                (
                    'reference_material',
                    models.ForeignKey(
                        db_column='referencematerialid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.referencematerial',
                    ),
                ),
            ],
            options={
                'db_table': 'referencematerialexternalidentifiers',
            },
        ),
        migrations.AddField(
            model_name='referencematerial',
            name='external_identifiers',
            field=models.ManyToManyField(
                related_name='reference_materials',
                through='django_odm2.ReferenceMaterialExternalIdentifier',
                to='django_odm2.externalidentifiersystem',
            ),
        ),
        migrations.AddField(
            model_name='referencematerial',
            name='reference_material_medium',
            field=models.ForeignKey(
                db_column='referencematerialmediumcv',
                on_delete=deletion.CASCADE,
                to='django_odm2.medium',
            ),
        ),
        migrations.AddField(
            model_name='referencematerial',
            name='reference_material_organization',
            field=models.ForeignKey(
                db_column='referencematerialorganizationid',
                on_delete=deletion.CASCADE,
                to='django_odm2.organization',
            ),
        ),
        migrations.AddField(
            model_name='referencematerial',
            name='sampling_feature',
            field=models.ForeignKey(
                blank=True,
                db_column='samplingfeatureid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.samplingfeature',
            ),
        ),
        migrations.CreateModel(
            name='ProfileResultValueAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'value',
                    models.ForeignKey(
                        db_column='valueid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.profileresultvalue',
                    ),
                ),
            ],
            options={
                'db_table': 'profileresultvalueannotations',
            },
        ),
        migrations.AddField(
            model_name='profileresultvalue',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_profile_values',
                through='django_odm2.ProfileResultValueAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.AddField(
            model_name='profileresultvalue',
            name='censor_code',
            field=models.ForeignKey(
                db_column='censorcodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.censorcode',
            ),
        ),
        migrations.AddField(
            model_name='profileresultvalue',
            name='quality_code',
            field=models.ForeignKey(
                db_column='qualitycodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.qualitycode',
            ),
        ),
        migrations.AddField(
            model_name='profileresultvalue',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='timeaggregationintervalunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='profileresultvalue',
            name='z_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='zlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.CreateModel(
            name='PointCoverageResultValueAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'value',
                    models.ForeignKey(
                        db_column='valueid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.pointcoverageresultvalue',
                    ),
                ),
            ],
            options={
                'db_table': 'pointcoverageresultvalueannotations',
            },
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalue',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_point_coverage_values',
                through='django_odm2.PointCoverageResultValueAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalue',
            name='censor_code',
            field=models.ForeignKey(
                db_column='censorcodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.censorcode',
            ),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalue',
            name='quality_code',
            field=models.ForeignKey(
                db_column='qualitycodecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.qualitycode',
            ),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalue',
            name='x_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='xlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalue',
            name='y_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='ylocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.CreateModel(
            name='PersonExternalIdentifier',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'person_external_identifier',
                    models.CharField(
                        db_column='personexternalidentifier', max_length=255
                    ),
                ),
                (
                    'person_external_identifier_uri',
                    models.CharField(
                        blank=True,
                        db_column='personexternalidentifieruri',
                        max_length=255,
                    ),
                ),
                (
                    'external_identifier_system',
                    models.ForeignKey(
                        db_column='externalidentifiersystemid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.externalidentifiersystem',
                    ),
                ),
                (
                    'person',
                    models.ForeignKey(
                        db_column='personid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.people',
                    ),
                ),
            ],
            options={
                'db_table': 'personexternalidentifiers',
            },
        ),
        migrations.AddField(
            model_name='people',
            name='external_identifiers',
            field=models.ManyToManyField(
                related_name='people',
                through='django_odm2.PersonExternalIdentifier',
                to='django_odm2.externalidentifiersystem',
            ),
        ),
        migrations.AddField(
            model_name='organization',
            name='organization_type',
            field=models.ForeignKey(
                db_column='organizationtypecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.organizationtype',
            ),
        ),
        migrations.AddField(
            model_name='organization',
            name='parent_organization',
            field=models.ForeignKey(
                blank=True,
                db_column='parentorganizationid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.organization',
            ),
        ),
        migrations.AddField(
            model_name='organization',
            name='people',
            field=models.ManyToManyField(
                through='django_odm2.Affiliation', to='django_odm2.people'
            ),
        ),
        migrations.CreateModel(
            name='MethodExternalIdentifier',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'method_external_identifier',
                    models.CharField(
                        db_column='methodexternalidentifier', max_length=255
                    ),
                ),
                (
                    'method_external_identifier_uri',
                    models.CharField(
                        blank=True,
                        db_column='methodexternalidentifieruri',
                        max_length=255,
                    ),
                ),
                (
                    'external_identifier_system',
                    models.ForeignKey(
                        db_column='externalidentifiersystemid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.externalidentifiersystem',
                    ),
                ),
                (
                    'method',
                    models.ForeignKey(
                        db_column='methodid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.method',
                    ),
                ),
            ],
            options={
                'db_table': 'methodexternalidentifiers',
            },
        ),
        migrations.CreateModel(
            name='MethodExtensionPropertyValue',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'property_value',
                    models.CharField(
                        db_column='propertyvalue', max_length=255
                    ),
                ),
                (
                    'method',
                    models.ForeignKey(
                        db_column='methodid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.method',
                    ),
                ),
                (
                    'property',
                    models.ForeignKey(
                        db_column='propertyid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.extensionproperty',
                    ),
                ),
            ],
            options={
                'db_table': 'methodextensionpropertyvalues',
            },
        ),
        migrations.CreateModel(
            name='MethodCitation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'citation',
                    models.ForeignKey(
                        db_column='citationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.citation',
                    ),
                ),
                (
                    'method',
                    models.ForeignKey(
                        db_column='methodid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.method',
                    ),
                ),
                (
                    'relationship_type',
                    models.ForeignKey(
                        db_column='relationshiptypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.relationshiptype',
                    ),
                ),
            ],
            options={
                'db_table': 'methodcitations',
            },
        ),
        migrations.CreateModel(
            name='MethodAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'method',
                    models.ForeignKey(
                        db_column='methodid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.method',
                    ),
                ),
            ],
            options={
                'db_table': 'methodannotations',
            },
        ),
        migrations.AddField(
            model_name='method',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_methods',
                through='django_odm2.MethodAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.AddField(
            model_name='method',
            name='extension_property_values',
            field=models.ManyToManyField(
                related_name='methods',
                through='django_odm2.MethodExtensionPropertyValue',
                to='django_odm2.extensionproperty',
            ),
        ),
        migrations.AddField(
            model_name='method',
            name='external_identifiers',
            field=models.ManyToManyField(
                related_name='methods',
                through='django_odm2.MethodExternalIdentifier',
                to='django_odm2.externalidentifiersystem',
            ),
        ),
        migrations.AddField(
            model_name='method',
            name='method_type',
            field=models.ForeignKey(
                db_column='methodtypecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.methodtype',
            ),
        ),
        migrations.AddField(
            model_name='method',
            name='organization',
            field=models.ForeignKey(
                blank=True,
                db_column='organizationid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.organization',
            ),
        ),
        migrations.CreateModel(
            name='MeasurementResultValueAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'value',
                    models.ForeignKey(
                        db_column='valueid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.measurementresultvalue',
                    ),
                ),
            ],
            options={
                'db_table': 'measurementresultvalueannotations',
            },
        ),
        migrations.AddField(
            model_name='measurementresultvalue',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_measurement_values',
                through='django_odm2.MeasurementResultValueAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.CreateModel(
            name='InstrumentOutputVariable',
            fields=[
                (
                    'instrument_output_variable_id',
                    models.AutoField(
                        db_column='instrumentoutputvariableid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'instrument_resolution',
                    models.CharField(
                        blank=True,
                        db_column='instrumentresolution',
                        max_length=255,
                    ),
                ),
                (
                    'instrument_accuracy',
                    models.CharField(
                        blank=True,
                        db_column='instrumentaccuracy',
                        max_length=255,
                    ),
                ),
                (
                    'instrument_method',
                    models.ForeignKey(
                        db_column='instrumentmethodid',
                        on_delete=deletion.CASCADE,
                        related_name='instrument_output_variables',
                        to='django_odm2.method',
                    ),
                ),
                (
                    'instrument_raw_output_unit',
                    models.ForeignKey(
                        db_column='instrumentrawoutputunitsid',
                        on_delete=deletion.CASCADE,
                        related_name='instrument_output_variables',
                        to='django_odm2.unit',
                    ),
                ),
                (
                    'model',
                    models.ForeignKey(
                        db_column='modelid',
                        on_delete=deletion.CASCADE,
                        related_name='instrument_output_variables',
                        to='django_odm2.equipmentmodel',
                    ),
                ),
                (
                    'variable',
                    models.ForeignKey(
                        db_column='variableid',
                        on_delete=deletion.CASCADE,
                        related_name='instrument_output_variables',
                        to='django_odm2.variable',
                    ),
                ),
            ],
            options={
                'db_table': 'instrumentoutputvariables',
                'ordering': [
                    'model__model_manufacturer',
                    'variable__variable_code',
                ],
            },
        ),
        migrations.AddField(
            model_name='featureaction',
            name='sampling_feature',
            field=models.ForeignKey(
                db_column='samplingfeatureid',
                on_delete=deletion.CASCADE,
                related_name='feature_actions',
                to='django_odm2.samplingfeature',
            ),
        ),
        migrations.AddField(
            model_name='externalidentifiersystem',
            name='identifier_system_organization',
            field=models.ForeignKey(
                db_column='identifiersystemorganizationid',
                on_delete=deletion.CASCADE,
                to='django_odm2.organization',
            ),
        ),
        migrations.AddField(
            model_name='extensionproperty',
            name='property_data_type',
            field=models.ForeignKey(
                db_column='propertydatatypecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.propertydatatype',
            ),
        ),
        migrations.AddField(
            model_name='extensionproperty',
            name='property_units',
            field=models.ForeignKey(
                blank=True,
                db_column='propertyunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.unit',
            ),
        ),
        migrations.CreateModel(
            name='EquipmentUsed',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'action',
                    models.ForeignKey(
                        db_column='actionid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.action',
                    ),
                ),
                (
                    'equipment',
                    models.ForeignKey(
                        db_column='equipmentid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.equipment',
                    ),
                ),
            ],
            options={
                'db_table': 'equipmentused',
            },
        ),
        migrations.AddField(
            model_name='equipmentmodel',
            name='model_manufacturer',
            field=models.ForeignKey(
                db_column='modelmanufacturerid',
                on_delete=deletion.CASCADE,
                to='django_odm2.organization',
            ),
        ),
        migrations.AddField(
            model_name='equipmentmodel',
            name='output_units',
            field=models.ManyToManyField(
                related_name='instrument_models',
                through='django_odm2.InstrumentOutputVariable',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='equipmentmodel',
            name='output_variables',
            field=models.ManyToManyField(
                related_name='instrument_models',
                through='django_odm2.InstrumentOutputVariable',
                to='django_odm2.variable',
            ),
        ),
        migrations.CreateModel(
            name='EquipmentAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'equipment',
                    models.ForeignKey(
                        db_column='equipmentid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.equipment',
                    ),
                ),
            ],
            options={
                'db_table': 'equipmentannotations',
            },
        ),
        migrations.AddField(
            model_name='equipment',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_equipment',
                through='django_odm2.EquipmentAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipment_model',
            field=models.ForeignKey(
                db_column='equipmentmodelid',
                on_delete=deletion.CASCADE,
                related_name='equipment',
                to='django_odm2.equipmentmodel',
            ),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipment_owner',
            field=models.ForeignKey(
                db_column='equipmentownerid',
                on_delete=deletion.CASCADE,
                related_name='owned_equipment',
                to='django_odm2.people',
            ),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipment_type',
            field=models.ForeignKey(
                db_column='equipmenttypecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.equipmenttype',
            ),
        ),
        migrations.AddField(
            model_name='equipment',
            name='equipment_vendor',
            field=models.ForeignKey(
                db_column='equipmentvendorid',
                on_delete=deletion.CASCADE,
                related_name='equipment',
                to='django_odm2.organization',
            ),
        ),
        migrations.CreateModel(
            name='Directive',
            fields=[
                (
                    'directive_id',
                    models.AutoField(
                        db_column='directiveid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'directive_description',
                    models.CharField(
                        db_column='directivedescription', max_length=500
                    ),
                ),
                (
                    'directive_type',
                    models.ForeignKey(
                        db_column='directivetypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.directivetype',
                    ),
                ),
            ],
            options={
                'db_table': 'directives',
            },
        ),
        migrations.AddField(
            model_name='datasetresult',
            name='result',
            field=models.ForeignKey(
                db_column='resultid',
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.result',
            ),
        ),
        migrations.CreateModel(
            name='DataSetCitation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'citation',
                    models.ForeignKey(
                        db_column='citationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.citation',
                    ),
                ),
                (
                    'data_set',
                    models.ForeignKey(
                        db_column='datasetid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.dataset',
                    ),
                ),
                (
                    'relationship_type',
                    models.ForeignKey(
                        db_column='relationshiptypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.relationshiptype',
                    ),
                ),
            ],
            options={
                'db_table': 'datasetcitations',
            },
        ),
        migrations.AddField(
            model_name='dataset',
            name='citations',
            field=models.ManyToManyField(
                related_name='cited_data_sets',
                through='django_odm2.DataSetCitation',
                to='django_odm2.citation',
            ),
        ),
        migrations.AddField(
            model_name='dataset',
            name='data_set_type',
            field=models.ForeignKey(
                db_column='datasettypecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.datasettype',
            ),
        ),
        migrations.AddField(
            model_name='dataquality',
            name='data_quality_type',
            field=models.ForeignKey(
                db_column='dataqualitytypecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.dataqualitytype',
            ),
        ),
        migrations.AddField(
            model_name='dataquality',
            name='data_quality_value_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='dataqualityvalueunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.unit',
            ),
        ),
        migrations.CreateModel(
            name='DataLoggerProgramFile',
            fields=[
                (
                    'program_id',
                    models.AutoField(
                        db_column='programid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'program_name',
                    models.CharField(db_column='programname', max_length=255),
                ),
                (
                    'program_description',
                    models.CharField(
                        blank=True,
                        db_column='programdescription',
                        max_length=500,
                    ),
                ),
                (
                    'program_version',
                    models.CharField(
                        blank=True, db_column='programversion', max_length=50
                    ),
                ),
                (
                    'program_file_link',
                    models.FileField(
                        blank=True, db_column='programfilelink', upload_to=''
                    ),
                ),
                (
                    'affiliation',
                    models.ForeignKey(
                        db_column='affiliationid',
                        on_delete=deletion.CASCADE,
                        related_name='data_logger_programs',
                        to='django_odm2.affiliation',
                    ),
                ),
            ],
            options={
                'db_table': 'dataloggerprogramfiles',
            },
        ),
        migrations.CreateModel(
            name='DataLoggerFileColumn',
            fields=[
                (
                    'data_logger_file_column_id',
                    models.AutoField(
                        db_column='dataloggerfilecolumnid',
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    'column_label',
                    models.CharField(db_column='columnlabel', max_length=50),
                ),
                (
                    'column_description',
                    models.CharField(
                        blank=True,
                        db_column='columndescription',
                        max_length=500,
                    ),
                ),
                (
                    'measurement_equation',
                    models.CharField(
                        blank=True,
                        db_column='measurementequation',
                        max_length=255,
                    ),
                ),
                (
                    'scan_interval',
                    models.FloatField(
                        blank=True, db_column='scaninterval', null=True
                    ),
                ),
                (
                    'recording_interval',
                    models.FloatField(
                        blank=True, db_column='recordinginterval', null=True
                    ),
                ),
                (
                    'aggregation_statistic',
                    models.ForeignKey(
                        blank=True,
                        db_column='aggregationstatisticcv',
                        on_delete=deletion.CASCADE,
                        related_name='data_logger_file_columns',
                        to='django_odm2.aggregationstatistic',
                    ),
                ),
                (
                    'data_logger_file',
                    models.ForeignKey(
                        db_column='dataloggerfileid',
                        on_delete=deletion.CASCADE,
                        related_name='data_logger_file_columns',
                        to='django_odm2.dataloggerfile',
                    ),
                ),
                (
                    'instrument_output_variable',
                    models.ForeignKey(
                        db_column='instrumentoutputvariableid',
                        on_delete=deletion.CASCADE,
                        related_name='data_logger_file_columns',
                        to='django_odm2.instrumentoutputvariable',
                    ),
                ),
                (
                    'recording_interval_unit',
                    models.ForeignKey(
                        blank=True,
                        db_column='recordingintervalunitsid',
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='recording_interval_data_logger_file_columns',
                        to='django_odm2.unit',
                    ),
                ),
                (
                    'result',
                    models.ForeignKey(
                        blank=True,
                        db_column='resultid',
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='data_logger_file_columns',
                        to='django_odm2.result',
                    ),
                ),
                (
                    'scan_interval_unit',
                    models.ForeignKey(
                        blank=True,
                        db_column='scanintervalunitsid',
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='scan_interval_data_logger_file_columns',
                        to='django_odm2.unit',
                    ),
                ),
            ],
            options={
                'db_table': 'dataloggerfilecolumns',
            },
        ),
        migrations.AddField(
            model_name='dataloggerfile',
            name='program',
            field=models.ForeignKey(
                db_column='programid',
                on_delete=deletion.CASCADE,
                related_name='data_logger_files',
                to='django_odm2.dataloggerprogramfile',
            ),
        ),
        migrations.CreateModel(
            name='CitationExternalIdentifier',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'citation_external_identifier',
                    models.CharField(
                        db_column='citationexternalidentifier', max_length=255
                    ),
                ),
                (
                    'citation_external_identifier_uri',
                    models.CharField(
                        blank=True,
                        db_column='citationexternalidentifieruri',
                        max_length=255,
                    ),
                ),
                (
                    'citation',
                    models.ForeignKey(
                        db_column='citationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.citation',
                    ),
                ),
                (
                    'external_identifier_system',
                    models.ForeignKey(
                        db_column='externalidentifiersystemid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.externalidentifiersystem',
                    ),
                ),
            ],
            options={
                'db_table': 'citationexternalidentifiers',
            },
        ),
        migrations.CreateModel(
            name='CitationExtensionPropertyValue',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'property_value',
                    models.CharField(
                        db_column='propertyvalue', max_length=255
                    ),
                ),
                (
                    'citation',
                    models.ForeignKey(
                        db_column='citationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.citation',
                    ),
                ),
                (
                    'property',
                    models.ForeignKey(
                        db_column='propertyid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.extensionproperty',
                    ),
                ),
            ],
            options={
                'db_table': 'citationextensionpropertyvalues',
            },
        ),
        migrations.AddField(
            model_name='citation',
            name='extension_property_values',
            field=models.ManyToManyField(
                related_name='citations',
                through='django_odm2.CitationExtensionPropertyValue',
                to='django_odm2.extensionproperty',
            ),
        ),
        migrations.AddField(
            model_name='citation',
            name='external_identifiers',
            field=models.ManyToManyField(
                related_name='citations',
                through='django_odm2.CitationExternalIdentifier',
                to='django_odm2.externalidentifiersystem',
            ),
        ),
        migrations.CreateModel(
            name='CategoricalResultValueAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
                (
                    'value',
                    models.ForeignKey(
                        db_column='valueid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.categoricalresultvalue',
                    ),
                ),
            ],
            options={
                'db_table': 'categoricalresultvalueannotations',
            },
        ),
        migrations.AddField(
            model_name='categoricalresultvalue',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_categorical_values',
                through='django_odm2.CategoricalResultValueAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.AddField(
            model_name='authorlist',
            name='citation',
            field=models.ForeignKey(
                db_column='citationid',
                on_delete=deletion.CASCADE,
                to='django_odm2.citation',
            ),
        ),
        migrations.AddField(
            model_name='authorlist',
            name='person',
            field=models.ForeignKey(
                db_column='personid',
                on_delete=deletion.CASCADE,
                to='django_odm2.people',
            ),
        ),
        migrations.AddField(
            model_name='annotation',
            name='annotation_type',
            field=models.ForeignKey(
                db_column='annotationtypecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.annotationtype',
            ),
        ),
        migrations.AddField(
            model_name='annotation',
            name='annotator',
            field=models.ForeignKey(
                blank=True,
                db_column='annotatorid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.people',
            ),
        ),
        migrations.AddField(
            model_name='annotation',
            name='citation',
            field=models.ForeignKey(
                blank=True,
                db_column='citationid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.citation',
            ),
        ),
        migrations.AddField(
            model_name='affiliation',
            name='organization',
            field=models.ForeignKey(
                blank=True,
                db_column='organizationid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='affiliations',
                to='django_odm2.organization',
            ),
        ),
        migrations.AddField(
            model_name='affiliation',
            name='person',
            field=models.ForeignKey(
                db_column='personid',
                on_delete=deletion.CASCADE,
                related_name='affiliations',
                to='django_odm2.people',
            ),
        ),
        migrations.CreateModel(
            name='ActionExtensionPropertyValue',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'property_value',
                    models.CharField(
                        db_column='propertyvalue', max_length=255
                    ),
                ),
                (
                    'action',
                    models.ForeignKey(
                        db_column='actionid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.action',
                    ),
                ),
                (
                    'property',
                    models.ForeignKey(
                        db_column='propertyid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.extensionproperty',
                    ),
                ),
            ],
            options={
                'db_table': 'actionextensionpropertyvalues',
            },
        ),
        migrations.CreateModel(
            name='ActionDirective',
            fields=[
                (
                    'bridge_id',
                    models.IntegerField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'action',
                    models.ForeignKey(
                        db_column='actionid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.action',
                    ),
                ),
                (
                    'directive',
                    models.ForeignKey(
                        db_column='directiveid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.directive',
                    ),
                ),
            ],
            options={
                'db_table': 'actiondirectives',
            },
        ),
        migrations.CreateModel(
            name='ActionBy',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'is_action_lead',
                    models.BooleanField(
                        db_column='isactionlead', default=None
                    ),
                ),
                (
                    'role_description',
                    models.CharField(
                        blank=True, db_column='roledescription', max_length=255
                    ),
                ),
                (
                    'action',
                    models.ForeignKey(
                        db_column='actionid',
                        on_delete=deletion.CASCADE,
                        related_name='action_by',
                        to='django_odm2.action',
                    ),
                ),
                (
                    'affiliation',
                    models.ForeignKey(
                        db_column='affiliationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.affiliation',
                    ),
                ),
            ],
            options={
                'db_table': 'actionby',
            },
        ),
        migrations.CreateModel(
            name='ActionAnnotation',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'action',
                    models.ForeignKey(
                        db_column='actionid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.action',
                    ),
                ),
                (
                    'annotation',
                    models.ForeignKey(
                        db_column='annotationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.annotation',
                    ),
                ),
            ],
            options={
                'db_table': 'actionannotations',
            },
        ),
        migrations.AddField(
            model_name='action',
            name='action_type',
            field=models.ForeignKey(
                db_column='actiontypecv',
                on_delete=deletion.CASCADE,
                to='django_odm2.actiontype',
            ),
        ),
        migrations.AddField(
            model_name='action',
            name='annotations',
            field=models.ManyToManyField(
                related_name='annotated_actions',
                through='django_odm2.ActionAnnotation',
                to='django_odm2.annotation',
            ),
        ),
        migrations.AddField(
            model_name='action',
            name='directives',
            field=models.ManyToManyField(
                related_name='actions',
                through='django_odm2.ActionDirective',
                to='django_odm2.directive',
            ),
        ),
        migrations.AddField(
            model_name='action',
            name='equipment_used',
            field=models.ManyToManyField(
                related_name='actions',
                through='django_odm2.EquipmentUsed',
                to='django_odm2.equipment',
            ),
        ),
        migrations.AddField(
            model_name='action',
            name='extension_property_values',
            field=models.ManyToManyField(
                related_name='actions',
                through='django_odm2.ActionExtensionPropertyValue',
                to='django_odm2.extensionproperty',
            ),
        ),
        migrations.AddField(
            model_name='action',
            name='method',
            field=models.ForeignKey(
                db_column='methodid',
                on_delete=deletion.CASCADE,
                to='django_odm2.method',
            ),
        ),
        migrations.AddField(
            model_name='action',
            name='people',
            field=models.ManyToManyField(
                related_name='actions',
                through='django_odm2.ActionBy',
                to='django_odm2.affiliation',
            ),
        ),
        migrations.AddField(
            model_name='transectresultvalue',
            name='result',
            field=models.ForeignKey(
                db_column='resultid',
                on_delete=deletion.CASCADE,
                to='django_odm2.transectresult',
            ),
        ),
        migrations.AddField(
            model_name='transectresult',
            name='intended_time_spacing_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='intendedtimespacingunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='transectresult',
            name='intended_transect_spacing_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='intendedtransectspacingunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='transectresult',
            name='spatial_reference',
            field=models.ForeignKey(
                blank=True,
                db_column='spatialreferenceid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.spatialreference',
            ),
        ),
        migrations.AddField(
            model_name='transectresult',
            name='z_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='zlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='trajectoryresultvalue',
            name='result',
            field=models.ForeignKey(
                db_column='resultid',
                on_delete=deletion.CASCADE,
                to='django_odm2.trajectoryresult',
            ),
        ),
        migrations.AddField(
            model_name='trajectoryresult',
            name='intended_time_spacing_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='intendedtimespacingunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='trajectoryresult',
            name='intended_trajectory_spacing_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='intendedtrajectoryspacingunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='trajectoryresult',
            name='spatial_reference',
            field=models.ForeignKey(
                blank=True,
                db_column='spatialreferenceid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.spatialreference',
            ),
        ),
        migrations.AddField(
            model_name='timeseriesresultvalue',
            name='result',
            field=models.ForeignKey(
                db_column='resultid',
                on_delete=deletion.CASCADE,
                related_name='values',
                to='django_odm2.timeseriesresult',
            ),
        ),
        migrations.AddField(
            model_name='timeseriesresult',
            name='intended_time_spacing_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='intendedtimespacingunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='timeseriesresult',
            name='spatial_reference',
            field=models.ForeignKey(
                blank=True,
                db_column='spatialreferenceid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.spatialreference',
            ),
        ),
        migrations.AddField(
            model_name='timeseriesresult',
            name='x_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='xlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='timeseriesresult',
            name='y_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='ylocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='timeseriesresult',
            name='z_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='zlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='spectraresultvalue',
            name='result',
            field=models.ForeignKey(
                db_column='resultid',
                on_delete=deletion.CASCADE,
                to='django_odm2.spectraresult',
            ),
        ),
        migrations.AddField(
            model_name='spectraresult',
            name='intended_wavelength_spacing_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='intendedwavelengthspacingunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='spectraresult',
            name='spatial_reference',
            field=models.ForeignKey(
                blank=True,
                db_column='spatialreferenceid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.spatialreference',
            ),
        ),
        migrations.AddField(
            model_name='spectraresult',
            name='x_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='xlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='spectraresult',
            name='y_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='ylocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='spectraresult',
            name='z_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='zlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.CreateModel(
            name='SpecimenTaxonomicClassifier',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'citation',
                    models.ForeignKey(
                        blank=True,
                        db_column='citationid',
                        null=True,
                        on_delete=deletion.CASCADE,
                        related_name='specimen_taxonomic_classifiers',
                        to='django_odm2.citation',
                    ),
                ),
                (
                    'taxonomic_classifier',
                    models.ForeignKey(
                        db_column='taxonomicclassifierid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.taxonomicclassifier',
                    ),
                ),
                (
                    'sampling_feature',
                    models.ForeignKey(
                        db_column='samplingfeatureid',
                        on_delete=deletion.CASCADE,
                        related_name='taxonomic_classifiers',
                        to='django_odm2.specimen',
                    ),
                ),
            ],
            options={
                'db_table': 'specimentaxonomicclassifiers',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                (
                    'sampling_feature',
                    models.OneToOneField(
                        db_column='samplingfeatureid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        related_name='site',
                        serialize=False,
                        to='django_odm2.samplingfeature',
                    ),
                ),
                ('latitude', models.FloatField(db_column='latitude')),
                ('longitude', models.FloatField(db_column='longitude')),
                (
                    'site_type',
                    models.ForeignKey(
                        db_column='sitetypecv',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.sitetype',
                    ),
                ),
                (
                    'spatial_reference',
                    models.ForeignKey(
                        db_column='spatialreferenceid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.spatialreference',
                    ),
                ),
            ],
            options={
                'db_table': 'sites',
            },
        ),
        migrations.AddField(
            model_name='sectionresultvalue',
            name='result',
            field=models.ForeignKey(
                db_column='resultid',
                on_delete=deletion.CASCADE,
                to='django_odm2.sectionresult',
            ),
        ),
        migrations.AddField(
            model_name='sectionresult',
            name='intended_time_spacing_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='intendedtimespacingunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='sectionresult',
            name='intended_x_spacing_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='intendedxspacingunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='sectionresult',
            name='intended_z_spacing_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='intendedzspacingunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='sectionresult',
            name='spatial_reference',
            field=models.ForeignKey(
                blank=True,
                db_column='spatialreferenceid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.spatialreference',
            ),
        ),
        migrations.AddField(
            model_name='sectionresult',
            name='y_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='ylocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.CreateModel(
            name='ResultNormalizationValue',
            fields=[
                (
                    'result',
                    models.OneToOneField(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to='django_odm2.result',
                    ),
                ),
                (
                    'normalized_by_reference_material_value',
                    models.ForeignKey(
                        db_column='normalizedbyreferencematerialvalueid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.referencematerialvalue',
                    ),
                ),
            ],
            options={
                'db_table': 'resultnormalizationvalues',
            },
        ),
        migrations.CreateModel(
            name='ResultDerivationEquation',
            fields=[
                (
                    'result',
                    models.OneToOneField(
                        db_column='resultid',
                        on_delete=deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to='django_odm2.result',
                    ),
                ),
                (
                    'derivation_equation',
                    models.ForeignKey(
                        db_column='derivationequationid',
                        on_delete=deletion.CASCADE,
                        to='django_odm2.derivationequation',
                    ),
                ),
            ],
            options={
                'db_table': 'resultderivationequations',
            },
        ),
        migrations.AddField(
            model_name='profileresultvalue',
            name='result',
            field=models.ForeignKey(
                db_column='resultid',
                on_delete=deletion.CASCADE,
                to='django_odm2.profileresult',
            ),
        ),
        migrations.AddField(
            model_name='profileresult',
            name='intended_time_spacing_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='intendedtimespacingunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='profileresult',
            name='intended_z_spacing_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='intendedzspacingunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='profileresult',
            name='spatial_reference',
            field=models.ForeignKey(
                blank=True,
                db_column='spatialreferenceid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.spatialreference',
            ),
        ),
        migrations.AddField(
            model_name='profileresult',
            name='x_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='xlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='profileresult',
            name='y_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='ylocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='pointcoverageresultvalue',
            name='result',
            field=models.ForeignKey(
                db_column='resultid',
                on_delete=deletion.CASCADE,
                to='django_odm2.pointcoverageresult',
            ),
        ),
        migrations.AddField(
            model_name='pointcoverageresult',
            name='intended_x_spacing_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='intendedxspacingunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='pointcoverageresult',
            name='intended_y_spacing_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='intendedyspacingunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='pointcoverageresult',
            name='spatial_reference',
            field=models.ForeignKey(
                blank=True,
                db_column='spatialreferenceid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.spatialreference',
            ),
        ),
        migrations.AddField(
            model_name='pointcoverageresult',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='timeaggregationintervalunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='pointcoverageresult',
            name='z_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='zlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='measurementresultvalue',
            name='result',
            field=models.ForeignKey(
                db_column='resultid',
                on_delete=deletion.CASCADE,
                to='django_odm2.measurementresult',
            ),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='spatial_reference',
            field=models.ForeignKey(
                blank=True,
                db_column='spatialreferenceid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.spatialreference',
            ),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='time_aggregation_interval_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='timeaggregationintervalunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='x_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='xlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='y_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='ylocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='measurementresult',
            name='z_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='zlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='categoricalresultvalue',
            name='result',
            field=models.ForeignKey(
                db_column='resultid',
                on_delete=deletion.CASCADE,
                to='django_odm2.categoricalresult',
            ),
        ),
        migrations.AddField(
            model_name='categoricalresult',
            name='spatial_reference',
            field=models.ForeignKey(
                blank=True,
                db_column='spatialreferenceid',
                null=True,
                on_delete=deletion.CASCADE,
                to='django_odm2.spatialreference',
            ),
        ),
        migrations.AddField(
            model_name='categoricalresult',
            name='x_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='xlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='categoricalresult',
            name='y_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='ylocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.AddField(
            model_name='categoricalresult',
            name='z_location_unit',
            field=models.ForeignKey(
                blank=True,
                db_column='zlocationunitsid',
                null=True,
                on_delete=deletion.CASCADE,
                related_name='+',
                to='django_odm2.unit',
            ),
        ),
        migrations.CreateModel(
            name='CalibrationStandard',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'reference_material',
                    models.ForeignKey(
                        db_column='calibration_standards',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.referencematerial',
                    ),
                ),
                (
                    'action',
                    models.ForeignKey(
                        db_column='actionid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.calibrationaction',
                    ),
                ),
            ],
            options={
                'db_table': 'calibrationstandards',
            },
        ),
        migrations.CreateModel(
            name='CalibrationReferenceEquipment',
            fields=[
                (
                    'bridge_id',
                    models.AutoField(
                        db_column='bridgeid', primary_key=True, serialize=False
                    ),
                ),
                (
                    'equipment',
                    models.ForeignKey(
                        db_column='equipmentid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.equipment',
                    ),
                ),
                (
                    'action',
                    models.ForeignKey(
                        db_column='actionid',
                        on_delete=deletion.CASCADE,
                        related_name='+',
                        to='django_odm2.calibrationaction',
                    ),
                ),
            ],
            options={
                'db_table': 'calibrationreferenceequipment',
            },
        ),
        migrations.AddField(
            model_name='calibrationaction',
            name='calibration_standards',
            field=models.ManyToManyField(
                related_name='calibration_actions',
                through='django_odm2.CalibrationStandard',
                to='django_odm2.referencematerial',
            ),
        ),
        migrations.AddField(
            model_name='calibrationaction',
            name='instrument_output_variable',
            field=models.ForeignKey(
                db_column='instrumentoutputvariableid',
                on_delete=deletion.CASCADE,
                to='django_odm2.instrumentoutputvariable',
            ),
        ),
        migrations.AddField(
            model_name='calibrationaction',
            name='reference_equipment',
            field=models.ManyToManyField(
                related_name='calibration_reference_actions',
                through='django_odm2.CalibrationReferenceEquipment',
                to='django_odm2.equipment',
            ),
        ),
    ]
