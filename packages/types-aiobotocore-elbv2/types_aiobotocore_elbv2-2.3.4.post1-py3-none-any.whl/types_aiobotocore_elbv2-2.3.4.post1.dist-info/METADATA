Metadata-Version: 2.1
Name: types-aiobotocore-elbv2
Version: 2.3.4.post1
Summary: Type annotations for aiobotocore.ElasticLoadBalancingv2 2.3.4 service generated with mypy-boto3-builder 7.8.0
Home-page: https://github.com/youtype/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_elbv2/
Project-URL: Source, https://github.com/youtype/mypy_boto3_builder
Project-URL: Tracker, https://github.com/youtype/mypy_boto3_builder/issues
Keywords: aiobotocore elbv2 type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions (>=4.1.0)

<a id="types-aiobotocore-elbv2"></a>

# types-aiobotocore-elbv2

[![PyPI - types-aiobotocore-elbv2](https://img.shields.io/pypi/v/types-aiobotocore-elbv2.svg?color=blue)](https://pypi.org/project/types-aiobotocore-elbv2)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-elbv2.svg?color=blue)](https://pypi.org/project/types-aiobotocore-elbv2)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-elbv2?color=blue)](https://pypistats.org/packages/types-aiobotocore-elbv2)

![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[aiobotocore.ElasticLoadBalancingv2 2.3.4](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/elbv2.html#ElasticLoadBalancingv2)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 7.8.0](https://github.com/youtype/mypy_boto3_builder).

More information can be found on
[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in
[types-aiobotocore-elbv2 docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_elbv2/).

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)

- [types-aiobotocore-elbv2](#types-aiobotocore-elbv2)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [How to uninstall](#how-to-uninstall)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Emacs](#emacs)
    - [Sublime Text](#sublime-text)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
    - [Literals](#literals)
    - [Typed dictionaries](#typed-dictionaries)
  - [How it works](#how-it-works)
  - [What's new](#what's-new)
    - [Implemented features](#implemented-features)
    - [Latest changes](#latest-changes)
  - [Versioning](#versioning)
  - [Thank you](#thank-you)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `ElasticLoadBalancingv2`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `ElasticLoadBalancingv2` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[elbv2]'


# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[elbv2]'


# standalone installation
python -m pip install types-aiobotocore-elbv2
```

<a id="how-to-uninstall"></a>

## How to uninstall

```bash
python -m pip uninstall -y types-aiobotocore-elbv2
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[elbv2]` in your environment:

```bash
python -m pip install 'types-aiobotocore[elbv2]'
```

Both type checking and code completion should now work. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pycharm"></a>

### PyCharm

Install `types-aiobotocore-lite[elbv2]` in your environment:

```bash
python -m pip install 'types-aiobotocore-lite[elbv2]'`
```

Both type checking and code completion should now work. Explicit type
annotations **are required**.

Use `types-aiobotocore` package instead for implicit type discovery.

<a id="emacs"></a>

### Emacs

- Install `types-aiobotocore` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[elbv2]'
```

- Install [use-package](https://github.com/jwiegley/use-package),
  [lsp](https://github.com/emacs-lsp/lsp-mode/),
  [company](https://github.com/company-mode/company-mode) and
  [flycheck](https://github.com/flycheck/flycheck) packages
- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package

```elisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp)))  ; or lsp-deferred
  :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3"))
  )
```

- Make sure emacs uses the environment where you have installed
  `types-aiobotocore`

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="sublime-text"></a>

### Sublime Text

- Install `types-aiobotocore[elbv2]` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[elbv2]'
```

- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) package

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[elbv2]` in your environment:

```bash
python -m pip install 'types-aiobotocore[elbv2]'`
```

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `npm i -g pyright`
- Install `types-aiobotocore[elbv2]` in your environment:

```bash
python -m pip install 'types-aiobotocore[elbv2]'
```

Optionally, you can install `types-aiobotocore` to `typings` folder.

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`ElasticLoadBalancingv2Client` provides annotations for
`session.create_client("elbv2")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_elbv2 import ElasticLoadBalancingv2Client

session = get_session()
async with session.create_client("elbv2") as client:
    client: ElasticLoadBalancingv2Client
    # now client usage is checked by mypy and IDE should provide code completion
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_elbv2.paginator` module contains type annotations for all
paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_elbv2 import ElasticLoadBalancingv2Client
from types_aiobotocore_elbv2.paginator import (
    DescribeAccountLimitsPaginator,
    DescribeListenerCertificatesPaginator,
    DescribeListenersPaginator,
    DescribeLoadBalancersPaginator,
    DescribeRulesPaginator,
    DescribeSSLPoliciesPaginator,
    DescribeTargetGroupsPaginator,
)

session = get_session()
async with session.create_client("elbv2") as client:
    client: ElasticLoadBalancingv2Client

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        describe_account_limits_paginator: DescribeAccountLimitsPaginator = client.get_paginator("describe_account_limits")
        describe_listener_certificates_paginator: DescribeListenerCertificatesPaginator = client.get_paginator("describe_listener_certificates")
        describe_listeners_paginator: DescribeListenersPaginator = client.get_paginator("describe_listeners")
        describe_load_balancers_paginator: DescribeLoadBalancersPaginator = client.get_paginator("describe_load_balancers")
        describe_rules_paginator: DescribeRulesPaginator = client.get_paginator("describe_rules")
        describe_ssl_policies_paginator: DescribeSSLPoliciesPaginator = client.get_paginator("describe_ssl_policies")
        describe_target_groups_paginator: DescribeTargetGroupsPaginator = client.get_paginator("describe_target_groups")
    ```


### Waiters annotations

`types_aiobotocore_elbv2.waiter` module contains type annotations for all waiters.

```python
from aiobotocore.session import get_session

from types_aiobotocore_elbv2.client import ElasticLoadBalancingv2Client
from types_aiobotocore_elbv2.waiter import (
    LoadBalancerAvailableWaiter,
    LoadBalancerExistsWaiter,
    LoadBalancersDeletedWaiter,
    TargetDeregisteredWaiter,
    TargetInServiceWaiter,
)

session = get_session()
async with session.create_client("elbv2") as client:
    client: ElasticLoadBalancingv2Client

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        load_balancer_available_waiter: LoadBalancerAvailableWaiter = client.get_waiter("load_balancer_available")
        load_balancer_exists_waiter: LoadBalancerExistsWaiter = client.get_waiter("load_balancer_exists")
        load_balancers_deleted_waiter: LoadBalancersDeletedWaiter = client.get_waiter("load_balancers_deleted")
        target_deregistered_waiter: TargetDeregisteredWaiter = client.get_waiter("target_deregistered")
        target_in_service_waiter: TargetInServiceWaiter = client.get_waiter("target_in_service")
    ```





<a id="literals"></a>

### Literals

`types_aiobotocore_elbv2.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_elbv2.literals import (
    ActionTypeEnumType,
    AuthenticateCognitoActionConditionalBehaviorEnumType,
    AuthenticateOidcActionConditionalBehaviorEnumType,
    DescribeAccountLimitsPaginatorName,
    DescribeListenerCertificatesPaginatorName,
    DescribeListenersPaginatorName,
    DescribeLoadBalancersPaginatorName,
    DescribeRulesPaginatorName,
    DescribeSSLPoliciesPaginatorName,
    DescribeTargetGroupsPaginatorName,
    IpAddressTypeType,
    LoadBalancerAvailableWaiterName,
    LoadBalancerExistsWaiterName,
    LoadBalancerSchemeEnumType,
    LoadBalancerStateEnumType,
    LoadBalancerTypeEnumType,
    LoadBalancersDeletedWaiterName,
    ProtocolEnumType,
    RedirectActionStatusCodeEnumType,
    TargetDeregisteredWaiterName,
    TargetGroupIpAddressTypeEnumType,
    TargetHealthReasonEnumType,
    TargetHealthStateEnumType,
    TargetInServiceWaiterName,
    TargetTypeEnumType,
    ElasticLoadBalancingv2ServiceName,
    ServiceName,
    ResourceServiceName,
    PaginatorName,
    WaiterName,
    RegionName,
)

def check_value(value: ActionTypeEnumType) -> bool:
    ...
````

<a id="typed-dictionaries"></a>

### Typed dictionaries

`types_aiobotocore_elbv2.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_elbv2.type_defs import (
    AuthenticateCognitoActionConfigTypeDef,
    AuthenticateOidcActionConfigTypeDef,
    FixedResponseActionConfigTypeDef,
    RedirectActionConfigTypeDef,
    CertificateTypeDef,
    ResponseMetadataTypeDef,
    TagTypeDef,
    LoadBalancerAddressTypeDef,
    CipherTypeDef,
    SubnetMappingTypeDef,
    MatcherTypeDef,
    DeleteListenerInputRequestTypeDef,
    DeleteLoadBalancerInputRequestTypeDef,
    DeleteRuleInputRequestTypeDef,
    DeleteTargetGroupInputRequestTypeDef,
    TargetDescriptionTypeDef,
    PaginatorConfigTypeDef,
    DescribeAccountLimitsInputRequestTypeDef,
    LimitTypeDef,
    DescribeListenerCertificatesInputRequestTypeDef,
    DescribeListenersInputRequestTypeDef,
    DescribeLoadBalancerAttributesInputRequestTypeDef,
    LoadBalancerAttributeTypeDef,
    WaiterConfigTypeDef,
    DescribeLoadBalancersInputRequestTypeDef,
    DescribeRulesInputRequestTypeDef,
    DescribeSSLPoliciesInputRequestTypeDef,
    DescribeTagsInputRequestTypeDef,
    DescribeTargetGroupAttributesInputRequestTypeDef,
    TargetGroupAttributeTypeDef,
    DescribeTargetGroupsInputRequestTypeDef,
    TargetGroupStickinessConfigTypeDef,
    TargetGroupTupleTypeDef,
    HostHeaderConditionConfigTypeDef,
    HttpHeaderConditionConfigTypeDef,
    HttpRequestMethodConditionConfigTypeDef,
    LoadBalancerStateTypeDef,
    PathPatternConditionConfigTypeDef,
    QueryStringKeyValuePairTypeDef,
    RemoveTagsInputRequestTypeDef,
    SourceIpConditionConfigTypeDef,
    RulePriorityPairTypeDef,
    SetIpAddressTypeInputRequestTypeDef,
    SetSecurityGroupsInputRequestTypeDef,
    TargetHealthTypeDef,
    AddListenerCertificatesInputRequestTypeDef,
    RemoveListenerCertificatesInputRequestTypeDef,
    AddListenerCertificatesOutputTypeDef,
    DescribeListenerCertificatesOutputTypeDef,
    SetIpAddressTypeOutputTypeDef,
    SetSecurityGroupsOutputTypeDef,
    AddTagsInputRequestTypeDef,
    TagDescriptionTypeDef,
    AvailabilityZoneTypeDef,
    SslPolicyTypeDef,
    CreateLoadBalancerInputRequestTypeDef,
    SetSubnetsInputRequestTypeDef,
    CreateTargetGroupInputRequestTypeDef,
    ModifyTargetGroupInputRequestTypeDef,
    TargetGroupTypeDef,
    DeregisterTargetsInputRequestTypeDef,
    DescribeTargetHealthInputRequestTypeDef,
    RegisterTargetsInputRequestTypeDef,
    DescribeAccountLimitsInputDescribeAccountLimitsPaginateTypeDef,
    DescribeListenerCertificatesInputDescribeListenerCertificatesPaginateTypeDef,
    DescribeListenersInputDescribeListenersPaginateTypeDef,
    DescribeLoadBalancersInputDescribeLoadBalancersPaginateTypeDef,
    DescribeRulesInputDescribeRulesPaginateTypeDef,
    DescribeSSLPoliciesInputDescribeSSLPoliciesPaginateTypeDef,
    DescribeTargetGroupsInputDescribeTargetGroupsPaginateTypeDef,
    DescribeAccountLimitsOutputTypeDef,
    DescribeLoadBalancerAttributesOutputTypeDef,
    ModifyLoadBalancerAttributesInputRequestTypeDef,
    ModifyLoadBalancerAttributesOutputTypeDef,
    DescribeLoadBalancersInputLoadBalancerAvailableWaitTypeDef,
    DescribeLoadBalancersInputLoadBalancerExistsWaitTypeDef,
    DescribeLoadBalancersInputLoadBalancersDeletedWaitTypeDef,
    DescribeTargetHealthInputTargetDeregisteredWaitTypeDef,
    DescribeTargetHealthInputTargetInServiceWaitTypeDef,
    DescribeTargetGroupAttributesOutputTypeDef,
    ModifyTargetGroupAttributesInputRequestTypeDef,
    ModifyTargetGroupAttributesOutputTypeDef,
    ForwardActionConfigTypeDef,
    QueryStringConditionConfigTypeDef,
    SetRulePrioritiesInputRequestTypeDef,
    TargetHealthDescriptionTypeDef,
    DescribeTagsOutputTypeDef,
    LoadBalancerTypeDef,
    SetSubnetsOutputTypeDef,
    DescribeSSLPoliciesOutputTypeDef,
    CreateTargetGroupOutputTypeDef,
    DescribeTargetGroupsOutputTypeDef,
    ModifyTargetGroupOutputTypeDef,
    ActionTypeDef,
    RuleConditionTypeDef,
    DescribeTargetHealthOutputTypeDef,
    CreateLoadBalancerOutputTypeDef,
    DescribeLoadBalancersOutputTypeDef,
    CreateListenerInputRequestTypeDef,
    ListenerTypeDef,
    ModifyListenerInputRequestTypeDef,
    CreateRuleInputRequestTypeDef,
    ModifyRuleInputRequestTypeDef,
    RuleTypeDef,
    CreateListenerOutputTypeDef,
    DescribeListenersOutputTypeDef,
    ModifyListenerOutputTypeDef,
    CreateRuleOutputTypeDef,
    DescribeRulesOutputTypeDef,
    ModifyRuleOutputTypeDef,
    SetRulePrioritiesOutputTypeDef,
)

def get_structure() -> AuthenticateCognitoActionConfigTypeDef:
    return {
      ...
    }
```

<a id="how-it-works"></a>

## How it works

Fully automated
[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefully
generates type annotations for each service, patiently waiting for
`aiobotocore` updates. It delivers a drop-in type annotations for you and makes
sure that:

- All available `aiobotocore` services are covered.
- Each public class and method of every `aiobotocore` service gets valid type
  annotations extracted from the documentation (blame `botocore` docs if types
  are incorrect).
- Type annotations include up-to-date documentation.
- Link to documentation is provided for every method.
- Code is processed by [black](https://github.com/psf/black) and
  [isort](https://github.com/PyCQA/isort) for readability.

<a id="what's-new"></a>

## What's new

<a id="implemented-features"></a>

### Implemented features

- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries
- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`
  compatibility
- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type
  annotations for each service
- Generated `TypeDefs` for each service
- Generated `Literals` for each service
- Auto discovery of types for `boto3.client` and `boto3.session` calls
- Auto discovery of types for `session.client` and `session.session` calls
- Auto discovery of types for `client.get_waiter` and `client.get_paginator`
  calls
- Auto discovery of types for `ServiceResource` and `Resource` collections
- Auto discovery of types for `aiobotocore.Session.create_client` calls

<a id="latest-changes"></a>

### Latest changes

Builder changelog can be found in
[Releases](https://github.com/youtype/mypy_boto3_builder/releases).

<a id="versioning"></a>

## Versioning

`types-aiobotocore-elbv2` version is the same as related `aiobotocore` version
and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

<a id="thank-you"></a>

## Thank you

- [Allie Fitter](https://github.com/alliefitter) for
  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),
  this package is based on top of his work
- [black](https://github.com/psf/black) developers for an awesome formatting
  tool
- [Timothy Edmund Crosley](https://github.com/timothycrosley) for
  [isort](https://github.com/PyCQA/isort) and how flexible it is
- [mypy](https://github.com/python/mypy) developers for doing all dirty work
  for us
- [pyright](https://github.com/microsoft/pyright) team for the new era of typed
  Python

<a id="documentation"></a>

## Documentation

All services type annotations can be found in
[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_elbv2/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)
repository.


