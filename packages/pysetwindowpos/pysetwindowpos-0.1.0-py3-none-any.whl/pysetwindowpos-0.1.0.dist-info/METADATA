Metadata-Version: 2.1
Name: pysetwindowpos
Version: 0.1.0
Summary: Python wrapper for setwindowpos.
Author-email: Marc Stober <marcstober@gmail.com>
License: MIT License        
        Copyright (c) 2022 Marc Stober        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.        
Project-URL: Homepage, https://github.com/marcstober/pysetwindowpos
Project-URL: Bug Tracker, https://github.com/marcstober/pysetwindowpos/issues
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: Microsoft :: Windows
Classifier: Development Status :: 3 - Alpha
Requires-Python: >=3.3
Description-Content-Type: text/markdown
License-File: LICENSE

# pysetwindowpos

Python wrapper for setwindowpos Windows API. MS Windows only.

Currently, this supports only setting a window as topmost (i.e., always on top).
Other invocations of SetWindowPos should be relatively
easy to add.

A tkinter example is built in and can by run by executing

```
py -m pysetwindowpos.setwindowpos
```

## Hacking

To use a development copy of the package as a dependency, navigate to the directory where the `pyproject.toml` file is and run:

```
pip install -e .
```

The blank `setup.cfg` is needed for this to work.

## TODO
1. Prevent `RuntimeWarning` when running `py -m pysetwindowpos.setwindowpos` (use `__main__`?). 

