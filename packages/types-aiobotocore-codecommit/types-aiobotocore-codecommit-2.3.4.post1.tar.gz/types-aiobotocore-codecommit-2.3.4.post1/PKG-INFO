Metadata-Version: 2.1
Name: types-aiobotocore-codecommit
Version: 2.3.4.post1
Summary: Type annotations for aiobotocore.CodeCommit 2.3.4 service generated with mypy-boto3-builder 7.8.0
Home-page: https://github.com/youtype/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_codecommit/
Project-URL: Source, https://github.com/youtype/mypy_boto3_builder
Project-URL: Tracker, https://github.com/youtype/mypy_boto3_builder/issues
Keywords: aiobotocore codecommit type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown

<a id="types-aiobotocore-codecommit"></a>

# types-aiobotocore-codecommit

[![PyPI - types-aiobotocore-codecommit](https://img.shields.io/pypi/v/types-aiobotocore-codecommit.svg?color=blue)](https://pypi.org/project/types-aiobotocore-codecommit)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-codecommit.svg?color=blue)](https://pypi.org/project/types-aiobotocore-codecommit)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-codecommit?color=blue)](https://pypistats.org/packages/types-aiobotocore-codecommit)

![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[aiobotocore.CodeCommit 2.3.4](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/codecommit.html#CodeCommit)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 7.8.0](https://github.com/youtype/mypy_boto3_builder).

More information can be found on
[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in
[types-aiobotocore-codecommit docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_codecommit/).

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)

- [types-aiobotocore-codecommit](#types-aiobotocore-codecommit)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [How to uninstall](#how-to-uninstall)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Emacs](#emacs)
    - [Sublime Text](#sublime-text)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `CodeCommit`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `CodeCommit` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[codecommit]'


# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[codecommit]'


# standalone installation
python -m pip install types-aiobotocore-codecommit
```

<a id="how-to-uninstall"></a>

## How to uninstall

```bash
python -m pip uninstall -y types-aiobotocore-codecommit
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[codecommit]` in your environment:

```bash
python -m pip install 'types-aiobotocore[codecommit]'
```

Both type checking and code completion should now work. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pycharm"></a>

### PyCharm

Install `types-aiobotocore-lite[codecommit]` in your environment:

```bash
python -m pip install 'types-aiobotocore-lite[codecommit]'`
```

Both type checking and code completion should now work. Explicit type
annotations **are required**.

Use `types-aiobotocore` package instead for implicit type discovery.

<a id="emacs"></a>

### Emacs

- Install `types-aiobotocore` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[codecommit]'
```

- Install [use-package](https://github.com/jwiegley/use-package),
  [lsp](https://github.com/emacs-lsp/lsp-mode/),
  [company](https://github.com/company-mode/company-mode) and
  [flycheck](https://github.com/flycheck/flycheck) packages
- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package

```elisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp)))  ; or lsp-deferred
  :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3"))
  )
```

- Make sure emacs uses the environment where you have installed
  `types-aiobotocore`

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="sublime-text"></a>

### Sublime Text

- Install `types-aiobotocore[codecommit]` with services you use in your
  environment:

```bash
python -m pip install 'types-aiobotocore[codecommit]'
```

- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) package

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[codecommit]` in your environment:

```bash
python -m pip install 'types-aiobotocore[codecommit]'`
```

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `npm i -g pyright`
- Install `types-aiobotocore[codecommit]` in your environment:

```bash
python -m pip install 'types-aiobotocore[codecommit]'
```

Optionally, you can install `types-aiobotocore` to `typings` folder.

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`CodeCommitClient` provides annotations for
`session.create_client("codecommit")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_codecommit import CodeCommitClient

session = get_session()
async with session.create_client("codecommit") as client:
    client: CodeCommitClient
    # now client usage is checked by mypy and IDE should provide code completion
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_codecommit.paginator` module contains type annotations for
all paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_codecommit import CodeCommitClient
from types_aiobotocore_codecommit.paginator import (
    DescribePullRequestEventsPaginator,
    GetCommentsForComparedCommitPaginator,
    GetCommentsForPullRequestPaginator,
    GetDifferencesPaginator,
    ListBranchesPaginator,
    ListPullRequestsPaginator,
    ListRepositoriesPaginator,
)

session = get_session()
async with session.create_client("codecommit") as client:
    client: CodeCommitClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        describe_pull_request_events_paginator: DescribePullRequestEventsPaginator = client.get_paginator("describe_pull_request_events")
        get_comments_for_compared_commit_paginator: GetCommentsForComparedCommitPaginator = client.get_paginator("get_comments_for_compared_commit")
        get_comments_for_pull_request_paginator: GetCommentsForPullRequestPaginator = client.get_paginator("get_comments_for_pull_request")
        get_differences_paginator: GetDifferencesPaginator = client.get_paginator("get_differences")
        list_branches_paginator: ListBranchesPaginator = client.get_paginator("list_branches")
        list_pull_requests_paginator: ListPullRequestsPaginator = client.get_paginator("list_pull_requests")
        list_repositories_paginator: ListRepositoriesPaginator = client.get_paginator("list_repositories")
    ```







### Literals

`types_aiobotocore_codecommit.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_codecommit.literals import (
    ApprovalStateType,
    ChangeTypeEnumType,
    ConflictDetailLevelTypeEnumType,
    ConflictResolutionStrategyTypeEnumType,
    DescribePullRequestEventsPaginatorName,
    FileModeTypeEnumType,
    GetCommentsForComparedCommitPaginatorName,
    GetCommentsForPullRequestPaginatorName,
    GetDifferencesPaginatorName,
    ListBranchesPaginatorName,
    ListPullRequestsPaginatorName,
    ListRepositoriesPaginatorName,
    MergeOptionTypeEnumType,
    ObjectTypeEnumType,
    OrderEnumType,
    OverrideStatusType,
    PullRequestEventTypeType,
    PullRequestStatusEnumType,
    RelativeFileVersionEnumType,
    ReplacementTypeEnumType,
    RepositoryTriggerEventEnumType,
    SortByEnumType,
    CodeCommitServiceName,
    ServiceName,
    ResourceServiceName,
    PaginatorName,
    RegionName,
)

def check_value(value: ApprovalStateType) -> bool:
    ...
````

### Typed dictionaries

`types_aiobotocore_codecommit.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_codecommit.type_defs import (
    ApprovalRuleEventMetadataTypeDef,
    ApprovalRuleOverriddenEventMetadataTypeDef,
    ApprovalRuleTemplateTypeDef,
    OriginApprovalRuleTemplateTypeDef,
    ApprovalStateChangedEventMetadataTypeDef,
    ApprovalTypeDef,
    AssociateApprovalRuleTemplateWithRepositoryInputRequestTypeDef,
    BatchAssociateApprovalRuleTemplateWithRepositoriesErrorTypeDef,
    BatchAssociateApprovalRuleTemplateWithRepositoriesInputRequestTypeDef,
    ResponseMetadataTypeDef,
    BatchDescribeMergeConflictsErrorTypeDef,
    BatchDescribeMergeConflictsInputRequestTypeDef,
    BatchDisassociateApprovalRuleTemplateFromRepositoriesErrorTypeDef,
    BatchDisassociateApprovalRuleTemplateFromRepositoriesInputRequestTypeDef,
    BatchGetCommitsErrorTypeDef,
    BatchGetCommitsInputRequestTypeDef,
    BatchGetRepositoriesInputRequestTypeDef,
    RepositoryMetadataTypeDef,
    BlobMetadataTypeDef,
    BranchInfoTypeDef,
    CommentTypeDef,
    LocationTypeDef,
    UserInfoTypeDef,
    FileModesTypeDef,
    FileSizesTypeDef,
    IsBinaryFileTypeDef,
    MergeOperationsTypeDef,
    ObjectTypesTypeDef,
    DeleteFileEntryTypeDef,
    ReplaceContentEntryTypeDef,
    SetFileModeEntryTypeDef,
    CreateApprovalRuleTemplateInputRequestTypeDef,
    CreateBranchInputRequestTypeDef,
    FileMetadataTypeDef,
    CreatePullRequestApprovalRuleInputRequestTypeDef,
    TargetTypeDef,
    CreateRepositoryInputRequestTypeDef,
    DeleteApprovalRuleTemplateInputRequestTypeDef,
    DeleteBranchInputRequestTypeDef,
    DeleteCommentContentInputRequestTypeDef,
    DeleteFileInputRequestTypeDef,
    DeletePullRequestApprovalRuleInputRequestTypeDef,
    DeleteRepositoryInputRequestTypeDef,
    DescribeMergeConflictsInputRequestTypeDef,
    PaginatorConfigTypeDef,
    DescribePullRequestEventsInputRequestTypeDef,
    DisassociateApprovalRuleTemplateFromRepositoryInputRequestTypeDef,
    EvaluatePullRequestApprovalRulesInputRequestTypeDef,
    EvaluationTypeDef,
    FileTypeDef,
    FolderTypeDef,
    GetApprovalRuleTemplateInputRequestTypeDef,
    GetBlobInputRequestTypeDef,
    GetBranchInputRequestTypeDef,
    GetCommentInputRequestTypeDef,
    GetCommentReactionsInputRequestTypeDef,
    GetCommentsForComparedCommitInputRequestTypeDef,
    GetCommentsForPullRequestInputRequestTypeDef,
    GetCommitInputRequestTypeDef,
    GetDifferencesInputRequestTypeDef,
    GetFileInputRequestTypeDef,
    GetFolderInputRequestTypeDef,
    SubModuleTypeDef,
    SymbolicLinkTypeDef,
    GetMergeCommitInputRequestTypeDef,
    GetMergeConflictsInputRequestTypeDef,
    GetMergeOptionsInputRequestTypeDef,
    GetPullRequestApprovalStatesInputRequestTypeDef,
    GetPullRequestInputRequestTypeDef,
    GetPullRequestOverrideStateInputRequestTypeDef,
    GetRepositoryInputRequestTypeDef,
    GetRepositoryTriggersInputRequestTypeDef,
    RepositoryTriggerTypeDef,
    ListApprovalRuleTemplatesInputRequestTypeDef,
    ListAssociatedApprovalRuleTemplatesForRepositoryInputRequestTypeDef,
    ListBranchesInputRequestTypeDef,
    ListPullRequestsInputRequestTypeDef,
    ListRepositoriesForApprovalRuleTemplateInputRequestTypeDef,
    ListRepositoriesInputRequestTypeDef,
    RepositoryNameIdPairTypeDef,
    ListTagsForResourceInputRequestTypeDef,
    MergeBranchesByFastForwardInputRequestTypeDef,
    MergeHunkDetailTypeDef,
    MergeMetadataTypeDef,
    MergePullRequestByFastForwardInputRequestTypeDef,
    OverridePullRequestApprovalRulesInputRequestTypeDef,
    PostCommentReplyInputRequestTypeDef,
    PullRequestCreatedEventMetadataTypeDef,
    PullRequestSourceReferenceUpdatedEventMetadataTypeDef,
    PullRequestStatusChangedEventMetadataTypeDef,
    PutCommentReactionInputRequestTypeDef,
    SourceFileSpecifierTypeDef,
    PutFileInputRequestTypeDef,
    ReactionValueFormatsTypeDef,
    RepositoryTriggerExecutionFailureTypeDef,
    TagResourceInputRequestTypeDef,
    UntagResourceInputRequestTypeDef,
    UpdateApprovalRuleTemplateContentInputRequestTypeDef,
    UpdateApprovalRuleTemplateDescriptionInputRequestTypeDef,
    UpdateApprovalRuleTemplateNameInputRequestTypeDef,
    UpdateCommentInputRequestTypeDef,
    UpdateDefaultBranchInputRequestTypeDef,
    UpdatePullRequestApprovalRuleContentInputRequestTypeDef,
    UpdatePullRequestApprovalStateInputRequestTypeDef,
    UpdatePullRequestDescriptionInputRequestTypeDef,
    UpdatePullRequestStatusInputRequestTypeDef,
    UpdatePullRequestTitleInputRequestTypeDef,
    UpdateRepositoryDescriptionInputRequestTypeDef,
    UpdateRepositoryNameInputRequestTypeDef,
    ApprovalRuleTypeDef,
    BatchAssociateApprovalRuleTemplateWithRepositoriesOutputTypeDef,
    CreateApprovalRuleTemplateOutputTypeDef,
    CreateUnreferencedMergeCommitOutputTypeDef,
    DeleteApprovalRuleTemplateOutputTypeDef,
    DeleteFileOutputTypeDef,
    DeletePullRequestApprovalRuleOutputTypeDef,
    DeleteRepositoryOutputTypeDef,
    EmptyResponseMetadataTypeDef,
    GetApprovalRuleTemplateOutputTypeDef,
    GetBlobOutputTypeDef,
    GetFileOutputTypeDef,
    GetMergeCommitOutputTypeDef,
    GetMergeOptionsOutputTypeDef,
    GetPullRequestApprovalStatesOutputTypeDef,
    GetPullRequestOverrideStateOutputTypeDef,
    ListApprovalRuleTemplatesOutputTypeDef,
    ListAssociatedApprovalRuleTemplatesForRepositoryOutputTypeDef,
    ListBranchesOutputTypeDef,
    ListPullRequestsOutputTypeDef,
    ListRepositoriesForApprovalRuleTemplateOutputTypeDef,
    ListTagsForResourceOutputTypeDef,
    MergeBranchesByFastForwardOutputTypeDef,
    MergeBranchesBySquashOutputTypeDef,
    MergeBranchesByThreeWayOutputTypeDef,
    PutFileOutputTypeDef,
    PutRepositoryTriggersOutputTypeDef,
    UpdateApprovalRuleTemplateContentOutputTypeDef,
    UpdateApprovalRuleTemplateDescriptionOutputTypeDef,
    UpdateApprovalRuleTemplateNameOutputTypeDef,
    BatchDisassociateApprovalRuleTemplateFromRepositoriesOutputTypeDef,
    BatchGetRepositoriesOutputTypeDef,
    CreateRepositoryOutputTypeDef,
    GetRepositoryOutputTypeDef,
    DifferenceTypeDef,
    DeleteBranchOutputTypeDef,
    GetBranchOutputTypeDef,
    DeleteCommentContentOutputTypeDef,
    GetCommentOutputTypeDef,
    PostCommentReplyOutputTypeDef,
    UpdateCommentOutputTypeDef,
    CommentsForComparedCommitTypeDef,
    CommentsForPullRequestTypeDef,
    PostCommentForComparedCommitInputRequestTypeDef,
    PostCommentForComparedCommitOutputTypeDef,
    PostCommentForPullRequestInputRequestTypeDef,
    PostCommentForPullRequestOutputTypeDef,
    CommitTypeDef,
    ConflictMetadataTypeDef,
    ConflictResolutionTypeDef,
    CreateCommitOutputTypeDef,
    CreatePullRequestInputRequestTypeDef,
    DescribePullRequestEventsInputDescribePullRequestEventsPaginateTypeDef,
    GetCommentsForComparedCommitInputGetCommentsForComparedCommitPaginateTypeDef,
    GetCommentsForPullRequestInputGetCommentsForPullRequestPaginateTypeDef,
    GetDifferencesInputGetDifferencesPaginateTypeDef,
    ListBranchesInputListBranchesPaginateTypeDef,
    ListPullRequestsInputListPullRequestsPaginateTypeDef,
    ListRepositoriesInputListRepositoriesPaginateTypeDef,
    EvaluatePullRequestApprovalRulesOutputTypeDef,
    GetFolderOutputTypeDef,
    GetRepositoryTriggersOutputTypeDef,
    PutRepositoryTriggersInputRequestTypeDef,
    TestRepositoryTriggersInputRequestTypeDef,
    ListRepositoriesOutputTypeDef,
    MergeHunkTypeDef,
    PullRequestMergedStateChangedEventMetadataTypeDef,
    PullRequestTargetTypeDef,
    PutFileEntryTypeDef,
    ReactionForCommentTypeDef,
    TestRepositoryTriggersOutputTypeDef,
    CreatePullRequestApprovalRuleOutputTypeDef,
    UpdatePullRequestApprovalRuleContentOutputTypeDef,
    GetDifferencesOutputTypeDef,
    GetCommentsForComparedCommitOutputTypeDef,
    GetCommentsForPullRequestOutputTypeDef,
    BatchGetCommitsOutputTypeDef,
    GetCommitOutputTypeDef,
    GetMergeConflictsOutputTypeDef,
    CreateUnreferencedMergeCommitInputRequestTypeDef,
    MergeBranchesBySquashInputRequestTypeDef,
    MergeBranchesByThreeWayInputRequestTypeDef,
    MergePullRequestBySquashInputRequestTypeDef,
    MergePullRequestByThreeWayInputRequestTypeDef,
    ConflictTypeDef,
    DescribeMergeConflictsOutputTypeDef,
    PullRequestEventTypeDef,
    PullRequestTypeDef,
    CreateCommitInputRequestTypeDef,
    GetCommentReactionsOutputTypeDef,
    BatchDescribeMergeConflictsOutputTypeDef,
    DescribePullRequestEventsOutputTypeDef,
    CreatePullRequestOutputTypeDef,
    GetPullRequestOutputTypeDef,
    MergePullRequestByFastForwardOutputTypeDef,
    MergePullRequestBySquashOutputTypeDef,
    MergePullRequestByThreeWayOutputTypeDef,
    UpdatePullRequestDescriptionOutputTypeDef,
    UpdatePullRequestStatusOutputTypeDef,
    UpdatePullRequestTitleOutputTypeDef,
)

def get_structure() -> ApprovalRuleEventMetadataTypeDef:
    return {
      ...
    }
```

## How it works

Fully automated
[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefully
generates type annotations for each service, patiently waiting for
`aiobotocore` updates. It delivers a drop-in type annotations for you and makes
sure that:

- All available `aiobotocore` services are covered.
- Each public class and method of every `aiobotocore` service gets valid type
  annotations extracted from the documentation (blame `botocore` docs if types
  are incorrect).
- Type annotations include up-to-date documentation.
- Link to documentation is provided for every method.
- Code is processed by [black](https://github.com/psf/black) and
  [isort](https://github.com/PyCQA/isort) for readability.

## What's new

### Implemented features

- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries
- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`
  compatibility
- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type
  annotations for each service
- Generated `TypeDefs` for each service
- Generated `Literals` for each service
- Auto discovery of types for `boto3.client` and `boto3.session` calls
- Auto discovery of types for `session.client` and `session.session` calls
- Auto discovery of types for `client.get_waiter` and `client.get_paginator`
  calls
- Auto discovery of types for `ServiceResource` and `Resource` collections
- Auto discovery of types for `aiobotocore.Session.create_client` calls

### Latest changes

Builder changelog can be found in
[Releases](https://github.com/youtype/mypy_boto3_builder/releases).

## Versioning

`types-aiobotocore-codecommit` version is the same as related `aiobotocore`
version and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/)
format.

## Thank you

- [Allie Fitter](https://github.com/alliefitter) for
  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),
  this package is based on top of his work
- [black](https://github.com/psf/black) developers for an awesome formatting
  tool
- [Timothy Edmund Crosley](https://github.com/timothycrosley) for
  [isort](https://github.com/PyCQA/isort) and how flexible it is
- [mypy](https://github.com/python/mypy) developers for doing all dirty work
  for us
- [pyright](https://github.com/microsoft/pyright) team for the new era of typed
  Python

## Documentation

All services type annotations can be found in
[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_codecommit/)

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)
repository.


