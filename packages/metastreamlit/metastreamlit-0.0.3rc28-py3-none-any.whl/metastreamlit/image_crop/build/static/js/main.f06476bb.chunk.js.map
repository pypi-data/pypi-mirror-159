{"version":3,"sources":["CanvasPreview.tsx","CropTool.tsx","utils.tsx","index.tsx"],"names":["TO_RADIANS","Math","PI","canvasPreview","image","canvas","crop","scale","rotate","ctx","getContext","Error","scaleX","naturalWidth","width","scaleY","naturalHeight","height","pixelRatio","window","devicePixelRatio","floor","imageSmoothingQuality","cropX","x","cropY","y","rotateRads","centerX","centerY","save","translate","drawImage","restore","withStreamlitConnection","fn","waitTime","deps","args","previewCanvasRef","useRef","imgRef","useState","setCrop","completedCrop","setCompletedCrop","useEffect","Streamlit","setFrameHeight","current","setComponentValue","undefined","t","setTimeout","apply","clearTimeout","className","style","display","previewResult","Boolean","ref","objectFit","onChange","_","onComplete","c","alt","src","onLoad","ReactDOM","render","StrictMode","document","getElementById"],"mappings":";0iNAEA,IAAMA,EAAaC,KAAKC,GAAK,IAEtB,SAAeC,EAAtB,sC,4CAAO,WACLC,EACAC,EACAC,GAHK,0GAILC,EAJK,+BAIG,EACRC,EALK,+BAKI,EAEHC,EAAMJ,EAAOK,WAAW,MAPzB,sBAUG,IAAIC,MAAM,iBAVb,OAaCC,EAASR,EAAMS,aAAeT,EAAMU,MACpCC,EAASX,EAAMY,cAAgBZ,EAAMa,OACrCC,EAAaC,OAAOC,iBAE1Bf,EAAOS,MAAQb,KAAKoB,MAAMf,EAAKQ,MAAQF,EAASM,GAChDb,EAAOY,OAAShB,KAAKoB,MAAMf,EAAKW,OAASF,EAASG,GAElDT,EAAIF,MAAMW,EAAYA,GACtBT,EAAIa,sBAAwB,OAEtBC,EAAQjB,EAAKkB,EAAIZ,EACjBa,EAAQnB,EAAKoB,EAAIX,EAEjBY,EAAanB,EAASR,EACtB4B,EAAUxB,EAAMS,aAAe,EAC/BgB,EAAUzB,EAAMY,cAAgB,EAEtCP,EAAIqB,OACJrB,EAAIsB,WAAWR,GAAQE,GACvBhB,EAAIsB,UAAUH,EAASC,GACvBpB,EAAID,OAAOmB,GACXlB,EAAIF,MAAMA,EAAOA,GACjBE,EAAIsB,WAAWH,GAAUC,GACzBpB,EAAIuB,UACF5B,EACA,EACA,EACAA,EAAMS,aACNT,EAAMY,cACN,EACA,EACAZ,EAAMS,aACNT,EAAMY,eAGRP,EAAIwB,UAhDC,6C,q0MCIP,IA6DeC,eA7DE,SAAC,GAAiB,ICLjCC,EACAC,EACAC,EDGiBC,EAAe,EAAfA,KACXC,EAAmBC,iBAA0B,MAC7CC,EAASD,iBAAyB,MACxC,EAAwBE,qBAAxB,mBAAOpC,EAAP,KAAaqC,EAAb,KACA,EAA0CD,qBAA1C,mBAAOE,EAAP,KAAsBC,EAAtB,KAuBA,OArBAC,qBAAU,kBAAMC,IAAUC,oBCX1Bb,EDaiB,sBACf,+EAEiB,OAAbS,QAAa,IAAbA,OAAA,EAAAA,EAAe9B,SAAf,OACA8B,QADA,IACAA,OADA,EACAA,EAAe3B,SACfwB,EAAOQ,SACPV,EAAiBU,SAEjBF,IAAUG,kBAAkB5C,GAC5BH,EAAcsC,EAAOQ,QAASV,EAAiBU,QAASL,SAC7BO,IAAlBP,GAAuD,IAAxBA,EAAc9B,OAAwC,IAAzB8B,EAAc3B,QAEnF8B,IAAUG,kBAAkB,MAXhC,2CCbFd,ED2BE,GC1BFC,ED2BE,CAACO,GCzBHE,qBAAU,WACR,IAAMM,EAAIC,YAAW,WAEnBlB,EAAGmB,WAAMH,EAAWd,KACnBD,GAEH,OAAO,WACLmB,aAAaH,MAGdf,GDmBD,yBAAKmB,UAAU,OACb,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,iBACb,yBAAKC,MAAO,CAACC,QAASpB,EAAKqB,cAAgB,QAAU,SAClDC,QAAQhB,IACP,oCACE,wCACA,4BACEY,UAAU,kBACVK,IAAKtB,EACLkB,MAAO,CACLK,UAAW,UACXhD,MAAK,OAAE8B,QAAF,IAAEA,OAAF,EAAEA,EAAe9B,MACtBG,OAAQ,aAOpB,kBAAC,IAAD,CACEuC,UAAU,yBACVlD,KAAMA,EACNyD,SAAU,SAACzD,EAAM0D,GAAP,OAAarB,EAAQrC,IAC/B2D,WAAY,SAACC,GAAD,OAAOrB,EAAiBqB,KAEpC,yBAAKL,IAAKpB,EAAQ0B,IAAI,UAAUC,IAAK9B,EAAKlC,MAAOiE,OAAQ,kBAAMtB,IAAUC,0BE1DnFsB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.f06476bb.chunk.js","sourcesContent":["import { PixelCrop } from \"react-image-crop\";\n\nconst TO_RADIANS = Math.PI / 180;\n\nexport async function canvasPreview(\n  image: HTMLImageElement,\n  canvas: HTMLCanvasElement,\n  crop: PixelCrop,\n  scale = 1,\n  rotate = 0\n) {\n  const ctx = canvas.getContext(\"2d\");\n\n  if (!ctx) {\n    throw new Error(\"No 2d context\");\n  }\n\n  const scaleX = image.naturalWidth / image.width;\n  const scaleY = image.naturalHeight / image.height;\n  const pixelRatio = window.devicePixelRatio;\n\n  canvas.width = Math.floor(crop.width * scaleX * pixelRatio);\n  canvas.height = Math.floor(crop.height * scaleY * pixelRatio);\n\n  ctx.scale(pixelRatio, pixelRatio);\n  ctx.imageSmoothingQuality = \"high\";\n\n  const cropX = crop.x * scaleX;\n  const cropY = crop.y * scaleY;\n\n  const rotateRads = rotate * TO_RADIANS;\n  const centerX = image.naturalWidth / 2;\n  const centerY = image.naturalHeight / 2;\n\n  ctx.save();\n  ctx.translate(-cropX, -cropY);\n  ctx.translate(centerX, centerY);\n  ctx.rotate(rotateRads);\n  ctx.scale(scale, scale);\n  ctx.translate(-centerX, -centerY);\n  ctx.drawImage(\n    image,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight,\n    0,\n    0,\n    image.naturalWidth,\n    image.naturalHeight\n  );\n\n  ctx.restore();\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport ReactCrop, { Crop, PixelCrop } from \"react-image-crop\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport { canvasPreview } from \"./CanvasPreview\";\nimport { useDebounceEffect } from \"./utils\";\n\nimport \"react-image-crop/dist/ReactCrop.css\";\n\nconst CropTool = ({args}: any) => {\n  const previewCanvasRef = useRef<HTMLCanvasElement>(null);\n  const imgRef = useRef<HTMLImageElement>(null);\n  const [crop, setCrop] = useState<Crop>();\n  const [completedCrop, setCompletedCrop] = useState<PixelCrop>();\n\n  useEffect(() => Streamlit.setFrameHeight());\n\n  useDebounceEffect(\n    async () => {\n      if (\n        completedCrop?.width &&\n        completedCrop?.height &&\n        imgRef.current &&\n        previewCanvasRef.current\n      ) {\n        Streamlit.setComponentValue(crop);\n        canvasPreview(imgRef.current, previewCanvasRef.current, completedCrop);\n      } else if (completedCrop !== undefined && completedCrop.width === 0 && completedCrop.height === 0) {\n        // Signal back that the user cancelled selection\n        Streamlit.setComponentValue(null);\n      }\n    },\n    50,\n    [completedCrop]\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"crop-container\">\n        <div className=\"crop-controls\">\n          <div style={{display: args.previewResult ? \"block\" : \"none\"}}>\n            {Boolean(completedCrop) && (\n              <>\n                <h2>Preview:</h2>\n                <canvas\n                  className=\"gradient-border\"\n                  ref={previewCanvasRef}\n                  style={{\n                    objectFit: \"contain\",\n                    width: completedCrop?.width,\n                    height: \"auto\",\n                  }}\n                />\n              </>\n            )}\n          </div>\n        </div>\n        <ReactCrop\n          className=\"gradient-border-canvas\"\n          crop={crop}\n          onChange={(crop, _) => setCrop(crop)}\n          onComplete={(c) => setCompletedCrop(c)}\n        >\n          <img ref={imgRef} alt=\"Crop me\" src={args.image} onLoad={() => Streamlit.setFrameHeight()} />\n        </ReactCrop>\n      </div>\n    </div>\n  );\n};\n\nexport default withStreamlitConnection(CropTool);\n","import { useEffect, DependencyList } from \"react\";\n\nexport function useDebounceEffect(\n  fn: () => void,\n  waitTime: number,\n  deps?: DependencyList\n) {\n  useEffect(() => {\n    const t = setTimeout(() => {\n      // @ts-ignore\n      fn.apply(undefined, deps);\n    }, waitTime);\n\n    return () => {\n      clearTimeout(t);\n    };\n  // eslint-disable-next-line\n  }, deps);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport CropTool from \"./CropTool\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CropTool />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}