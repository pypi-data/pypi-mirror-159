{"version":3,"sources":["assets/ico_recording.svg","MyComponent.tsx","index.tsx"],"names":["module","exports","MyComponent","state","currentRecording","render","setState","bind","isRecording","isLoading","props","disabled","Image","src","ico_recording","className","canvasWidth","canvasHeight","foregroundColor","RecordState","START","STOP","onStop","data","reader","FileReader","onloadend","base64data","result","Streamlit","setComponentValue","b64","substring","indexOf","length","mime_type","readAsDataURL","blob","Button","variant","onClick","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gIAAAA,EAAOC,QAAU,IAA0B,2C,6MC4BrCC,E,4MACGC,MAAQ,CAAEA,MAhBW,SAgBmBC,iBAAkB,M,EAE1DC,OAAS,WACd,IAAMC,EAAW,EAAKA,SAASC,KAAd,gBAgBXC,EAlCc,mBAkCA,EAAKL,MAAMA,MACzBM,EAAY,EAAKC,MAAMC,SAE7B,OACE,6BACI,4CACA,kBAACC,EAAA,EAAD,CAAOC,IAAKC,MAEXN,GAAe,0BAAMO,UAAU,QAAhB,gBAEhB,kBAAC,IAAD,CACEC,YAAY,IACZC,aAAa,IACbC,gBAAgB,UAChBf,MAAOK,EAAcW,IAAYC,MAAQD,IAAYE,KACrDC,OA9BO,SAACC,GACd,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,UAAY,WACjB,IAAIC,EAAaH,EAAOI,OAIxBC,IAAUC,kBAAkB,CAC1BC,IAAKJ,EAAWK,UAAUL,EAAWM,QAHjB,uBAGwDC,QAC5EC,UAAWR,EAAWK,UAAUL,EAAWM,QAHzB,iBAG4DC,OAAQP,EAAWM,QAJ7E,eAMtB3B,EAAS,CAACF,iBAAkBuB,EAAYxB,MA5BpB,0BA8BtBqB,EAAOY,cAAcb,EAAKc,SAmBtB,kBAACC,EAAA,EAAD,CACEC,QAAQ,SACRxB,UAAU,kBACVJ,SAAUF,EACV+B,QAAS,kBAAMlC,EAAS,CAACH,MAAOK,EAtDX,cADT,qBAyDX,EAAKL,MAAMA,S,yBA3CEsC,KAwDXC,cAAwBxC,GChFvCyC,IAAStC,OACP,kBAAC,IAAMuC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.ddccec24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ico_recording.bc7d967a.svg\";","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { Button, Image } from \"react-bootstrap\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ico_recording from \"./assets/ico_recording.svg\";\n\n// @ts-ignore\nimport AudioReactRecorder, { RecordState } from \"audio-react-recorder\";\n\nconst STATE_READY_TO_RECORD = \"Record\";\nconst STATE_RECORDING = \"Stop recording\";\nconst STATE_STOPPING_RECORDING = \"Stopping...\";\nconst STATE_HAS_RECORDING = \"Record another sound\";\n\n\ninterface State {\n  state: string\n  currentRecording: string | null\n}\n\n/**\n * This is a React-based component template. The `render()` function is called\n * automatically when your component should be re-rendered.\n */\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { state: STATE_READY_TO_RECORD, currentRecording: null }\n\n  public render = (): ReactNode => {\n    const setState = this.setState.bind(this);\n    const onStop = (data: any) => {\n      var reader = new FileReader();\n      reader.onloadend = function () {\n        var base64data = reader.result as string;\n        // Format: \"data:audio/wav;base64,DATA\"\n        const BASE64_PREFIX = \";base64,\";\n        const DATA_PREFIX = \"data:\";\n        Streamlit.setComponentValue({\n          b64: base64data.substring(base64data.indexOf(BASE64_PREFIX) + BASE64_PREFIX.length),\n          mime_type: base64data.substring(base64data.indexOf(DATA_PREFIX) + DATA_PREFIX.length, base64data.indexOf(BASE64_PREFIX))\n        });\n        setState({currentRecording: base64data, state: STATE_HAS_RECORDING});\n      };\n      reader.readAsDataURL(data.blob);\n    };\n    const isRecording = this.state.state === STATE_RECORDING;\n    const isLoading = this.props.disabled;\n\n    return (\n      <div>\n          <h1>Record Audio</h1>\n          <Image src={ico_recording} />\n\n          {isRecording && <span className=\"mx-3\">Recording...</span>}\n\n          <AudioReactRecorder\n            canvasWidth=\"0\"\n            canvasHeight=\"0\"\n            foregroundColor=\"#451285\"\n            state={isRecording ? RecordState.START : RecordState.STOP}\n            onStop={onStop}\n          />\n          <Button\n            variant=\"danger\"\n            className=\"btn-inputs mx-2\"\n            disabled={isLoading}\n            onClick={() => setState({state: isRecording ? STATE_STOPPING_RECORDING : STATE_RECORDING})}\n          >\n            {this.state.state}\n          </Button>\n      </div>\n    );\n  }\n}\n\n\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\n// connection between your component and the Streamlit app, and handles\n// passing arguments from Python -> Component.\n//\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}