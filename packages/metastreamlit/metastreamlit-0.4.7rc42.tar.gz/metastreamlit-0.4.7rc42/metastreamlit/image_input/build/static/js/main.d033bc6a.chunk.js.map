{"version":3,"sources":["Utils.tsx","ImageUploader.tsx","App.tsx","index.tsx"],"names":["getImageElementFromURI","imageURI","Promise","resolve","reject","imgElement","document","createElement","crossOrigin","src","onload","getImageDataFromBase64URIWithoutDimensions","b64start","search","b64","slice","length","console","assert","startsWith","dataType","getImageDataFromBase64URI","maxPixels","getImageDataFromElement","url","undefined","c","width","naturalWidth","height","naturalHeight","numPixels","ratio","Math","sqrt","ctx","getContext","drawImage","data","toDataURL","w","h","withStreamlitConnection","args","useState","files","setFiles","galleryPhotos","useRef","forceUpdate","useReducer","x","onSelectBlob","blob","origin","reader","FileReader","onloadend","base64url","result","Streamlit","setComponentValue","readAsDataURL","useEffect","setFrameHeight","handleSelectPictureFromURL","fetch","initialDefaultPicture","current","presetImages","forEach","imageUrl","imageNum","photo","key","order","push","sort","a","b","JSON","stringify","useDropzone","maxFiles","accept","onDrop","acceptedFiles","getRootProps","getInputProps","thumbs","map","file","className","alt","preview","onLoad","URL","revokeObjectURL","handleGalleryClick","e","target","direction","photos","onClick","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.d033bc6a.chunk.js","sourcesContent":["const DATA_STARTS_WITH = \"data:\";\nconst B64_STARTS_AFTER = \";base64,\";\n\nfunction getImageElementFromURI(imageURI: string): Promise<HTMLImageElement> {\n    return new Promise(function(resolve, reject) {\n        var imgElement = document.createElement(\"img\");\n        imgElement.crossOrigin = \"anonymous\";\n        imgElement.src = imageURI;\n        imgElement.onload = function() {\n            resolve(imgElement);\n        };\n    });\n}\n\nfunction getImageDataFromBase64URIWithoutDimensions(imageURI: string) {\n    const b64start = imageURI.search(B64_STARTS_AFTER);\n    if (b64start === -1) {\n        return null;\n    }\n    const b64 = imageURI.slice(b64start + B64_STARTS_AFTER.length);\n    console.assert(imageURI.startsWith(DATA_STARTS_WITH));\n    const dataType = imageURI.slice(DATA_STARTS_WITH.length, b64start);\n    return {\n        dataType: dataType,\n        b64: b64,\n    };\n}\n\nexport async function getImageDataFromBase64URI(imageURI: string, maxPixels: number) {\n    const imgElement = await getImageElementFromURI(imageURI);\n    return {\n        ...getImageDataFromElement(imgElement, maxPixels),\n        url: undefined,\n    };\n}\n\nexport function getImageDataFromElement(imgElement: HTMLImageElement, maxPixels: number = 512*512) {\n    // Format: data:<contentType>;base64,<b64>\n\n    var c = document.createElement(\"canvas\");\n    var width = imgElement.naturalWidth;\n    var height = imgElement.naturalHeight;\n    const numPixels = width * height;\n    if (numPixels > maxPixels) {\n        const ratio = Math.sqrt(maxPixels / numPixels);\n        width = width * ratio;\n        height = height * ratio;\n    }\n    c.width = width;\n    c.height = height;\n\n    var ctx = (c.getContext(\"2d\"))!;\n    ctx.drawImage(imgElement, 0, 0, width, height);\n    const data = c.toDataURL(\"image/jpeg\", 1.0); // get rid of Alpha channel (otherwise exports as PNG RGBA)\n    return {\n        ...getImageDataFromBase64URIWithoutDimensions(data),\n        w: imgElement.naturalWidth,\n        h: imgElement.naturalHeight,\n        url: imgElement.src,\n    }\n}\n\nexport function getImageURIFromData(image_data: any): string {\n    return \"data:\" + image_data.dataType + \";base64,\" + image_data.b64;\n}\n","// @ts-nocheck\nimport React, { useState, useEffect, useRef, useReducer} from \"react\";\nimport { useDropzone } from \"react-dropzone\";\nimport Gallery from \"react-photo-gallery\";\nimport { Streamlit, withStreamlitConnection } from \"streamlit-component-lib\";\nimport {getImageDataFromBase64URI} from \"./Utils\";\nimport \"./main.css\";\n\nconst ImageUploader = ({args}) => {\n  const [files, setFiles] = useState<any[]>([]);\n  const galleryPhotos = useRef<any[]>([]);\n  const forceUpdate = useReducer((x) => x + 1, 0)[1];\n\n  useEffect(() => Streamlit.setFrameHeight());\n\n  async function onSelectBlob(blob, origin) {\n    const reader = new FileReader();\n    reader.onloadend = async () => {\n      const base64url: any = reader.result;\n      setFiles([base64url]);\n      const data = await getImageDataFromBase64URI(base64url, args.maxPixels);\n      Streamlit.setComponentValue({\n        \"origin\": origin,\n        ...data\n      });\n    };\n    reader.readAsDataURL(blob);\n  };\n\n  const handleSelectPictureFromURL = async (url: string, origin: string) => {\n    const data = await fetch(url);\n    const blob = await data.blob();\n    onSelectBlob(blob, origin);\n  };\n\n  useEffect(() => {\n    if (!args.initialDefaultPicture || files.length) {\n      return;\n    }\n    // already in a base64 format - also no need to notify python as it's already\n    // the default return value of the component\n    if (args.initialDefaultPicture.startsWith(\"data:\")) {\n      setFiles([args.initialDefaultPicture]);\n    } else {\n      handleSelectPictureFromURL(args.initialDefaultPicture, \"default\");\n    }\n  // eslint-disable-next-line\n  }, [args.initialDefaultPicture, files]);\n  useEffect(() => {\n    galleryPhotos.current = [];\n    args.presetImages.forEach(async function(imageUrl: string, imageNum: number) {\n      const data = await fetch(imageUrl);\n      const blob = await data.blob();\n      const reader = new FileReader();\n      reader.onloadend = async () => {\n        const base64url: any = reader.result;\n        const data = await getImageDataFromBase64URI(base64url, args.maxPixels);\n        const photo = {\n          width: data.w,\n          height: data.h,\n          src: imageUrl,\n          key: `image-idx-${galleryPhotos.current.length}`,\n          order: imageNum,\n        };\n        galleryPhotos.current.push(photo);\n        galleryPhotos.current.sort((a: any, b: any) => a.order - b.order);\n        forceUpdate();\n      };\n      reader.readAsDataURL(blob);\n    });\n  // NB: Streamlit might change the `args.presetImages` to a different object\n  // with the same value. Let's only recalculate when its value changes\n  // eslint-disable-next-line\n  }, [JSON.stringify(args.presetImages), args.maxPixels]);\n\n\n  const { getRootProps, getInputProps, } = useDropzone({\n    maxFiles: 1,\n    accept: {\n      \"image/*\": [\".jpeg\", \".png\"],\n    },\n    onDrop: (acceptedFiles) => {\n      console.assert(acceptedFiles.length === 1);\n      onSelectBlob(acceptedFiles[0], \"upload\");\n    },\n  });\n\n  const thumbs = files.map((file) => (\n    <div key={0} className=\"img-container\">\n      <img\n        alt=\"streamlitImg\"\n        src={(file && file.preview) || file}\n        // Revoke data uri after image is loaded\n        onLoad={() => {\n          URL.revokeObjectURL(file.preview || file);\n        }}\n      />\n    </div>\n  ));\n\n  const handleGalleryClick = async (e: any) => {\n    handleSelectPictureFromURL(e.target.src, \"gallery\");\n  };\n\n  useEffect(() => {\n    // Make sure to revoke the data uris to avoid memory leaks, will run on unmount\n    return () => files.forEach((file) => URL.revokeObjectURL(file.preview));\n  }, [files]);\n  return (\n    <div className=\"upload-container\">\n      <div {...getRootProps()}>\n        <input {...getInputProps()} />\n        <div className=\"upload-box\">\n          <b>Instructions</b>Drag or Click to Upload Image\n        </div>\n        {files.length ? (\n          <>\n            <h2>Preview</h2>\n            <aside>{thumbs}</aside>\n          </>\n        ) : (\n          \"\"\n        )}\n      </div>\n      <div className=\"gallary\">\n        {/*  @ts-ignore */}\n        <Gallery direction=\"row\" photos={galleryPhotos.current} onClick={handleGalleryClick} />\n      </div>\n    </div>\n  );\n};\n\nexport default withStreamlitConnection(ImageUploader);\n// export default ImageUploader;\n","import React from \"react\";\nimport ImageUploader from \"./ImageUploader\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      {/*  @ts-ignore */}\n      <ImageUploader />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}