#------------------------------------------------------------------------------
# <auto-generated>
#     This file was auto generated.
#
#     Changes to this file may cause incorrect behavior and will be lost if
#     the code is regenerated.
# </auto-generated>
#------------------------------------------------------------------------------
import typing
from abc import abstractmethod, ABCMeta
from System import Array, Enum, IComparable, IConvertible, IEquatable, IFormatProvider, IFormattable, ValueType
from UnitsNet import BaseDimensions, ComparisonType, IQuantity, QuantityInfo, QuantityType, QuantityValue, UnitSystem


# noinspection PyPep8Naming
class AxialStiffness(ValueType, IQuantity[AxialStiffnessUnit], IQuantity, IFormattable, IEquatable[AxialStiffness], IComparable, IComparable[AxialStiffness], IConvertible):
    """ .
    """

    Info: typing.ClassVar[QuantityInfo[AxialStiffnessUnit]]

    BaseDimensions: typing.ClassVar[BaseDimensions]

    BaseUnit: typing.ClassVar[AxialStiffnessUnit]

    MaxValue: typing.ClassVar[AxialStiffness]

    MinValue: typing.ClassVar[AxialStiffness]

    QuantityType: typing.ClassVar[QuantityType]

    Units: typing.ClassVar[Array[AxialStiffnessUnit]]

    Zero: typing.ClassVar[AxialStiffness]

    @property
    def Value(self) -> float:
        """ The numeric value this quantity was constructed with.
        """
        pass

    @property
    def Unit(self) -> AxialStiffnessUnit:
        """
        """
        pass

    @property
    def QuantityInfo(self) -> QuantityInfo[AxialStiffnessUnit]:
        """
        """
        pass

    @property
    def Type(self) -> QuantityType:
        """ The "Property QuantityType" of this quantity.
        """
        pass

    @property
    def Dimensions(self) -> BaseDimensions:
        """ The "Property BaseDimensions" of this quantity.
        """
        pass

    @property
    def Decanewtons(self) -> float:
        """ Get AxialStiffness in Decanewtons.
        """
        pass

    @property
    def Dyne(self) -> float:
        """ Get AxialStiffness in Dyne.
        """
        pass

    @property
    def KilogramsForce(self) -> float:
        """ Get AxialStiffness in KilogramsForce.
        """
        pass

    @property
    def Kilonewtons(self) -> float:
        """ Get AxialStiffness in Kilonewtons.
        """
        pass

    @property
    def KiloPonds(self) -> float:
        """ Get AxialStiffness in KiloPonds.
        """
        pass

    @property
    def KilopoundsForce(self) -> float:
        """ Get AxialStiffness in KilopoundsForce.
        """
        pass

    @property
    def Meganewtons(self) -> float:
        """ Get AxialStiffness in Meganewtons.
        """
        pass

    @property
    def Micronewtons(self) -> float:
        """ Get AxialStiffness in Micronewtons.
        """
        pass

    @property
    def Millinewtons(self) -> float:
        """ Get AxialStiffness in Millinewtons.
        """
        pass

    @property
    def Newtons(self) -> float:
        """ Get AxialStiffness in Newtons.
        """
        pass

    @property
    def OunceForce(self) -> float:
        """ Get AxialStiffness in OunceForce.
        """
        pass

    @property
    def Poundals(self) -> float:
        """ Get AxialStiffness in Poundals.
        """
        pass

    @property
    def PoundsForce(self) -> float:
        """ Get AxialStiffness in PoundsForce.
        """
        pass

    @property
    def ShortTonsForce(self) -> float:
        """ Get AxialStiffness in ShortTonsForce.
        """
        pass

    @property
    def TonnesForce(self) -> float:
        """ Get AxialStiffness in TonnesForce.
        """
        pass

    def __init__(self, value: float, unit: AxialStiffnessUnit) -> None:
        """ Creates the quantity with the given numeric value and unit.

        :param value: The numeric value to construct this quantity with.
        :type value: float
        :param unit: The unit representation to construct this quantity with.
        :type unit: AxialStiffnessUnit

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    def __init__(self, value: float, unitSystem: UnitSystem) -> None:
        """Creates an instance of the quantity with the given numeric value in units compatible with the given "UnitSystem".
        If multiple compatible units were found, the first match is used.

        :param value: The numeric value to construct this quantity with.
        :type value: float
        :param unitSystem: The unit system to create the quantity with.
        :type unitSystem: UnitSystem

        :exception ArgumentNullException: The given "UnitSystem" is null.
        :exception ArgumentException: No unit was found for the given "UnitSystem".
        """
        pass

    def GetHashCode(self) -> int:
        """ Returns the hash code for this instance.

        :return: A hash code for the current AxialStiffness.
        :rtype: int
        """
        pass

    @typing.overload
    def As(self, unit: AxialStiffnessUnit) -> float:
        """ Convert to the unit representation .

        :return: Value converted to the specified unit.
        :rtype: float
        """
        pass

    @typing.overload
    def As(self, unitSystem: UnitSystem) -> float:
        """
        """
        pass

    @typing.overload
    def ToUnit(self, unit: AxialStiffnessUnit) -> AxialStiffness:
        """ Converts this AxialStiffness to another AxialStiffness with the unit representation .

        :return: A AxialStiffness with the specified unit.
        :rtype: AxialStiffness
        """
        pass

    @typing.overload
    def ToUnit(self, unitSystem: UnitSystem) -> AxialStiffness:
        """
        """
        pass

    def ToBaseUnit(self) -> AxialStiffness:
        """ Converts the current value + unit to the base unit.
         This is typically the first step in converting from one unit to another.

        :return: The value in the base unit representation.
        :rtype: AxialStiffness
        """
        pass

    @typing.overload
    def ToString(self) -> str:
        """ Gets the default string representation of value and unit.

        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider) -> str:
        """ Gets the default string representation of value and unit using the given format provider.

        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider, significantDigitsAfterRadix: int) -> str:
        """ Get string representation of value and unit.

        :param significantDigitsAfterRadix: The number of significant digits after the radix point.
        :type significantDigitsAfterRadix: int
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider, format: str, args: Array[typing.Any]) -> str:
        """ Get string representation of value and unit.

        :param format: String format to use. Default: "{0:0.##} {1} for value and unit abbreviation respectively."
        :type format: str
        :param args: Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.
        :type args: Array[typing.Any]
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, format: str) -> str:
        """Gets the string representation of this instance in the specified format string using "Property CurrentUICulture".

        :param format: The format string.
        :type format: str
        :return: The string representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, format: str, provider: IFormatProvider) -> str:
        """Gets the string representation of this instance in the specified format string using the specified format provider, or "Property CurrentUICulture" if null.

        :param format: The format string.
        :type format: str
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: The string representation.
        :rtype: str
        """
        pass

    @staticmethod
    @typing.overload
    def GetAbbreviation(unit: AxialStiffnessUnit) -> str:
        """ Get unit abbreviation string.

        :param unit: Unit to get abbreviation for.
        :type unit: AxialStiffnessUnit
        :return: Unit abbreviation string.
        :rtype: str
        """
        pass

    @staticmethod
    @typing.overload
    def GetAbbreviation(unit: AxialStiffnessUnit, provider: IFormatProvider) -> str:
        """ Get unit abbreviation string.

        :param unit: Unit to get abbreviation for.
        :type unit: AxialStiffnessUnit
        :param provider: Format to use for localization. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: Unit abbreviation string.
        :rtype: str
        """
        pass

    @staticmethod
    def FromDecanewtons(decanewtons: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from Decanewtons.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromDyne(dyne: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from Dyne.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromKilogramsForce(kilogramsforce: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from KilogramsForce.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromKilonewtons(kilonewtons: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from Kilonewtons.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromKiloPonds(kiloponds: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from KiloPonds.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromKilopoundsForce(kilopoundsforce: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from KilopoundsForce.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromMeganewtons(meganewtons: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from Meganewtons.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromMicronewtons(micronewtons: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from Micronewtons.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromMillinewtons(millinewtons: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from Millinewtons.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromNewtons(newtons: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from Newtons.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromOunceForce(ounceforce: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from OunceForce.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromPoundals(poundals: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from Poundals.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromPoundsForce(poundsforce: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from PoundsForce.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromShortTonsForce(shorttonsforce: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from ShortTonsForce.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromTonnesForce(tonnesforce: QuantityValue) -> AxialStiffness:
        """ Get AxialStiffness from TonnesForce.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def From(value: QuantityValue, fromUnit: AxialStiffnessUnit) -> AxialStiffness:
        """ Dynamically convert from value and unit enum "AxialStiffnessUnit" to "AxialStiffness".

        :param value: Value to convert from.
        :type value: QuantityValue
        :param fromUnit: Unit to convert from.
        :type fromUnit: AxialStiffnessUnit
        :return: AxialStiffness unit value.
        :rtype: AxialStiffness
        """
        pass

    @staticmethod
    @typing.overload
    def ParseUnit(str: str) -> AxialStiffnessUnit:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str

        :exception ArgumentNullException: The value of 'str' cannot be null.
        :exception UnitsNetException: Error parsing string.
        """
        pass

    @staticmethod
    @typing.overload
    def ParseUnit(str: str, provider: IFormatProvider) -> AxialStiffnessUnit:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str
        :param provider: Format to use when parsing number and unit. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider

        :exception ArgumentNullException: The value of 'str' cannot be null.
        :exception UnitsNetException: Error parsing string.
        """
        pass

    @staticmethod
    @typing.overload
    def TryParseUnit(str: str, unit: AxialStiffnessUnit) -> typing.Tuple[AxialStiffnessUnit, bool]:
        """
        """
        pass

    @staticmethod
    @typing.overload
    def TryParseUnit(str: str, provider: IFormatProvider, unit: AxialStiffnessUnit) -> typing.Tuple[AxialStiffnessUnit, bool]:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str
        :param unit: The parsed unit if successful.
        :type unit: AxialStiffnessUnit
        :param provider: Format to use when parsing number and unit. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: True if successful, otherwise false.
        :rtype: bool
        """
        pass

    @typing.overload
    def CompareTo(self, obj: typing.Any) -> int:
        """
        """
        pass

    @typing.overload
    def CompareTo(self, other: AxialStiffness) -> int:
        """
        """
        pass

    @typing.overload
    def Equals(self, obj: typing.Any) -> bool:
        """Consider using "Function ComparisonType)" for safely comparing floating point values.
        """
        pass

    @typing.overload
    def Equals(self, other: AxialStiffness) -> bool:
        """Consider using "Function ComparisonType)" for safely comparing floating point values.
        """
        pass

    @typing.overload
    def Equals(self, other: AxialStiffness, tolerance: float, comparisonType: ComparisonType) -> bool:
        """ Compare equality to another AxialStiffness within the given absolute or relative tolerance.

         Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and as a percentage of this quantity's value. will be converted into this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of this quantity's value to be considered equal. In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm). var a = Length.FromMeters(2.0); var b = Length.FromInches(50.0); a.Equals(b, 0.01, ComparisonType.Relative);

         Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and as a fixed number in this quantity's unit. will be converted into this quantity's unit for comparison. In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm). var a = Length.FromMeters(2.0); var b = Length.FromInches(50.0); a.Equals(b, 0.01, ComparisonType.Absolute);

         Note that it is advised against specifying zero difference, due to the nature of floating point operations and using System.Double internally.

        :param other: The other quantity to compare to.
        :type other: AxialStiffness
        :param tolerance: The absolute or relative tolerance value. Must be greater than or equal to 0.
        :type tolerance: float
        :param comparisonType: The comparison type: either relative or absolute.
        :type comparisonType: ComparisonType
        :return: True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.
        :rtype: bool
        """
        pass


# noinspection PyPep8Naming
class BendingStiffness(ValueType, IQuantity[BendingStiffnessUnit], IQuantity, IFormattable, IEquatable[BendingStiffness], IComparable, IComparable[BendingStiffness], IConvertible):
    """ .
    """

    Info: typing.ClassVar[QuantityInfo[BendingStiffnessUnit]]

    BaseDimensions: typing.ClassVar[BaseDimensions]

    BaseUnit: typing.ClassVar[BendingStiffnessUnit]

    MaxValue: typing.ClassVar[BendingStiffness]

    MinValue: typing.ClassVar[BendingStiffness]

    QuantityType: typing.ClassVar[QuantityType]

    Units: typing.ClassVar[Array[BendingStiffnessUnit]]

    Zero: typing.ClassVar[BendingStiffness]

    @property
    def Value(self) -> float:
        """ The numeric value this quantity was constructed with.
        """
        pass

    @property
    def Unit(self) -> BendingStiffnessUnit:
        """
        """
        pass

    @property
    def QuantityInfo(self) -> QuantityInfo[BendingStiffnessUnit]:
        """
        """
        pass

    @property
    def Type(self) -> QuantityType:
        """ The "Property QuantityType" of this quantity.
        """
        pass

    @property
    def Dimensions(self) -> BaseDimensions:
        """ The "Property BaseDimensions" of this quantity.
        """
        pass

    @property
    def KilonewtonSquareMeters(self) -> float:
        """ Get BendingStiffness in KilonewtonSquareMeters.
        """
        pass

    @property
    def KilonewtonSquareMillimeters(self) -> float:
        """ Get BendingStiffness in KilonewtonSquareMillimeters.
        """
        pass

    @property
    def NewtonSquareMeters(self) -> float:
        """ Get BendingStiffness in NewtonSquareMeters.
        """
        pass

    @property
    def NewtonSquareMillimeters(self) -> float:
        """ Get BendingStiffness in NewtonSquareMillimeters.
        """
        pass

    @property
    def PoundsForceSquareFeet(self) -> float:
        """ Get BendingStiffness in PoundsForceSquareFeet.
        """
        pass

    @property
    def PoundsForceSquareInches(self) -> float:
        """ Get BendingStiffness in PoundsForceSquareInches.
        """
        pass

    def __init__(self, value: float, unit: BendingStiffnessUnit) -> None:
        """ Creates the quantity with the given numeric value and unit.

        :param value: The numeric value to construct this quantity with.
        :type value: float
        :param unit: The unit representation to construct this quantity with.
        :type unit: BendingStiffnessUnit

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    def __init__(self, value: float, unitSystem: UnitSystem) -> None:
        """Creates an instance of the quantity with the given numeric value in units compatible with the given "UnitSystem".
        If multiple compatible units were found, the first match is used.

        :param value: The numeric value to construct this quantity with.
        :type value: float
        :param unitSystem: The unit system to create the quantity with.
        :type unitSystem: UnitSystem

        :exception ArgumentNullException: The given "UnitSystem" is null.
        :exception ArgumentException: No unit was found for the given "UnitSystem".
        """
        pass

    def ToBaseUnit(self) -> BendingStiffness:
        """ Converts the current value + unit to the base unit.
         This is typically the first step in converting from one unit to another.

        :return: The value in the base unit representation.
        :rtype: BendingStiffness
        """
        pass

    @typing.overload
    def ToString(self) -> str:
        """ Gets the default string representation of value and unit.

        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider) -> str:
        """ Gets the default string representation of value and unit using the given format provider.

        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider, significantDigitsAfterRadix: int) -> str:
        """ Get string representation of value and unit.

        :param significantDigitsAfterRadix: The number of significant digits after the radix point.
        :type significantDigitsAfterRadix: int
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider, format: str, args: Array[typing.Any]) -> str:
        """ Get string representation of value and unit.

        :param format: String format to use. Default: "{0:0.##} {1} for value and unit abbreviation respectively."
        :type format: str
        :param args: Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.
        :type args: Array[typing.Any]
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, format: str) -> str:
        """Gets the string representation of this instance in the specified format string using "Property CurrentUICulture".

        :param format: The format string.
        :type format: str
        :return: The string representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, format: str, provider: IFormatProvider) -> str:
        """Gets the string representation of this instance in the specified format string using the specified format provider, or "Property CurrentUICulture" if null.

        :param format: The format string.
        :type format: str
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: The string representation.
        :rtype: str
        """
        pass

    @staticmethod
    @typing.overload
    def GetAbbreviation(unit: BendingStiffnessUnit) -> str:
        """ Get unit abbreviation string.

        :param unit: Unit to get abbreviation for.
        :type unit: BendingStiffnessUnit
        :return: Unit abbreviation string.
        :rtype: str
        """
        pass

    @staticmethod
    @typing.overload
    def GetAbbreviation(unit: BendingStiffnessUnit, provider: IFormatProvider) -> str:
        """ Get unit abbreviation string.

        :param unit: Unit to get abbreviation for.
        :type unit: BendingStiffnessUnit
        :param provider: Format to use for localization. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: Unit abbreviation string.
        :rtype: str
        """
        pass

    @staticmethod
    def FromKilonewtonSquareMeters(kilonewtonsquaremeters: QuantityValue) -> BendingStiffness:
        """ Get BendingStiffness from KilonewtonSquareMeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromKilonewtonSquareMillimeters(kilonewtonsquaremillimeters: QuantityValue) -> BendingStiffness:
        """ Get BendingStiffness from KilonewtonSquareMillimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromNewtonSquareMeters(newtonsquaremeters: QuantityValue) -> BendingStiffness:
        """ Get BendingStiffness from NewtonSquareMeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromNewtonSquareMillimeters(newtonsquaremillimeters: QuantityValue) -> BendingStiffness:
        """ Get BendingStiffness from NewtonSquareMillimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromPoundsForceSquareFeet(poundsforcesquarefeet: QuantityValue) -> BendingStiffness:
        """ Get BendingStiffness from PoundsForceSquareFeet.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromPoundsForceSquareInches(poundsforcesquareinches: QuantityValue) -> BendingStiffness:
        """ Get BendingStiffness from PoundsForceSquareInches.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def From(value: QuantityValue, fromUnit: BendingStiffnessUnit) -> BendingStiffness:
        """ Dynamically convert from value and unit enum "BendingStiffnessUnit" to "BendingStiffness".

        :param value: Value to convert from.
        :type value: QuantityValue
        :param fromUnit: Unit to convert from.
        :type fromUnit: BendingStiffnessUnit
        :return: BendingStiffness unit value.
        :rtype: BendingStiffness
        """
        pass

    @staticmethod
    @typing.overload
    def ParseUnit(str: str) -> BendingStiffnessUnit:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str

        :exception ArgumentNullException: The value of 'str' cannot be null.
        :exception UnitsNetException: Error parsing string.
        """
        pass

    @staticmethod
    @typing.overload
    def ParseUnit(str: str, provider: IFormatProvider) -> BendingStiffnessUnit:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str
        :param provider: Format to use when parsing number and unit. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider

        :exception ArgumentNullException: The value of 'str' cannot be null.
        :exception UnitsNetException: Error parsing string.
        """
        pass

    @staticmethod
    @typing.overload
    def TryParseUnit(str: str, unit: BendingStiffnessUnit) -> typing.Tuple[BendingStiffnessUnit, bool]:
        """
        """
        pass

    @staticmethod
    @typing.overload
    def TryParseUnit(str: str, provider: IFormatProvider, unit: BendingStiffnessUnit) -> typing.Tuple[BendingStiffnessUnit, bool]:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str
        :param unit: The parsed unit if successful.
        :type unit: BendingStiffnessUnit
        :param provider: Format to use when parsing number and unit. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: True if successful, otherwise false.
        :rtype: bool
        """
        pass

    @typing.overload
    def CompareTo(self, obj: typing.Any) -> int:
        """
        """
        pass

    @typing.overload
    def CompareTo(self, other: BendingStiffness) -> int:
        """
        """
        pass

    @typing.overload
    def Equals(self, obj: typing.Any) -> bool:
        """Consider using "Function ComparisonType)" for safely comparing floating point values.
        """
        pass

    @typing.overload
    def Equals(self, other: BendingStiffness) -> bool:
        """Consider using "Function ComparisonType)" for safely comparing floating point values.
        """
        pass

    @typing.overload
    def Equals(self, other: BendingStiffness, tolerance: float, comparisonType: ComparisonType) -> bool:
        """ Compare equality to another BendingStiffness within the given absolute or relative tolerance.

         Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and as a percentage of this quantity's value. will be converted into this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of this quantity's value to be considered equal. In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm). var a = Length.FromMeters(2.0); var b = Length.FromInches(50.0); a.Equals(b, 0.01, ComparisonType.Relative);

         Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and as a fixed number in this quantity's unit. will be converted into this quantity's unit for comparison. In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm). var a = Length.FromMeters(2.0); var b = Length.FromInches(50.0); a.Equals(b, 0.01, ComparisonType.Absolute);

         Note that it is advised against specifying zero difference, due to the nature of floating point operations and using System.Double internally.

        :param other: The other quantity to compare to.
        :type other: BendingStiffness
        :param tolerance: The absolute or relative tolerance value. Must be greater than or equal to 0.
        :type tolerance: float
        :param comparisonType: The comparison type: either relative or absolute.
        :type comparisonType: ComparisonType
        :return: True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.
        :rtype: bool
        """
        pass

    def GetHashCode(self) -> int:
        """ Returns the hash code for this instance.

        :return: A hash code for the current BendingStiffness.
        :rtype: int
        """
        pass

    @typing.overload
    def As(self, unit: BendingStiffnessUnit) -> float:
        """ Convert to the unit representation .

        :return: Value converted to the specified unit.
        :rtype: float
        """
        pass

    @typing.overload
    def As(self, unitSystem: UnitSystem) -> float:
        """
        """
        pass

    @typing.overload
    def ToUnit(self, unit: BendingStiffnessUnit) -> BendingStiffness:
        """ Converts this BendingStiffness to another BendingStiffness with the unit representation .

        :return: A BendingStiffness with the specified unit.
        :rtype: BendingStiffness
        """
        pass

    @typing.overload
    def ToUnit(self, unitSystem: UnitSystem) -> BendingStiffness:
        """
        """
        pass


# noinspection PyPep8Naming
class Moment(ValueType, IQuantity[MomentUnit], IQuantity, IFormattable, IEquatable[Moment], IComparable, IComparable[Moment], IConvertible):
    """ .
    """

    Info: typing.ClassVar[QuantityInfo[MomentUnit]]

    BaseDimensions: typing.ClassVar[BaseDimensions]

    BaseUnit: typing.ClassVar[MomentUnit]

    MaxValue: typing.ClassVar[Moment]

    MinValue: typing.ClassVar[Moment]

    QuantityType: typing.ClassVar[QuantityType]

    Units: typing.ClassVar[Array[MomentUnit]]

    Zero: typing.ClassVar[Moment]

    @property
    def Value(self) -> float:
        """ The numeric value this quantity was constructed with.
        """
        pass

    @property
    def Unit(self) -> MomentUnit:
        """
        """
        pass

    @property
    def QuantityInfo(self) -> QuantityInfo[MomentUnit]:
        """
        """
        pass

    @property
    def Type(self) -> QuantityType:
        """ The "Property QuantityType" of this quantity.
        """
        pass

    @property
    def Dimensions(self) -> BaseDimensions:
        """ The "Property BaseDimensions" of this quantity.
        """
        pass

    @property
    def KilogramForceCentimeters(self) -> float:
        """ Get Moment in KilogramForceCentimeters.
        """
        pass

    @property
    def KilogramForceMeters(self) -> float:
        """ Get Moment in KilogramForceMeters.
        """
        pass

    @property
    def KilogramForceMillimeters(self) -> float:
        """ Get Moment in KilogramForceMillimeters.
        """
        pass

    @property
    def KilonewtonCentimeters(self) -> float:
        """ Get Moment in KilonewtonCentimeters.
        """
        pass

    @property
    def KilonewtonMeters(self) -> float:
        """ Get Moment in KilonewtonMeters.
        """
        pass

    @property
    def KilonewtonMillimeters(self) -> float:
        """ Get Moment in KilonewtonMillimeters.
        """
        pass

    @property
    def KilopoundForceFeet(self) -> float:
        """ Get Moment in KilopoundForceFeet.
        """
        pass

    @property
    def KilopoundForceInches(self) -> float:
        """ Get Moment in KilopoundForceInches.
        """
        pass

    @property
    def MeganewtonCentimeters(self) -> float:
        """ Get Moment in MeganewtonCentimeters.
        """
        pass

    @property
    def MeganewtonMeters(self) -> float:
        """ Get Moment in MeganewtonMeters.
        """
        pass

    @property
    def MeganewtonMillimeters(self) -> float:
        """ Get Moment in MeganewtonMillimeters.
        """
        pass

    @property
    def MegapoundForceFeet(self) -> float:
        """ Get Moment in MegapoundForceFeet.
        """
        pass

    @property
    def MegapoundForceInches(self) -> float:
        """ Get Moment in MegapoundForceInches.
        """
        pass

    @property
    def NewtonCentimeters(self) -> float:
        """ Get Moment in NewtonCentimeters.
        """
        pass

    @property
    def NewtonMeters(self) -> float:
        """ Get Moment in NewtonMeters.
        """
        pass

    @property
    def NewtonMillimeters(self) -> float:
        """ Get Moment in NewtonMillimeters.
        """
        pass

    @property
    def PoundalFeet(self) -> float:
        """ Get Moment in PoundalFeet.
        """
        pass

    @property
    def PoundForceFeet(self) -> float:
        """ Get Moment in PoundForceFeet.
        """
        pass

    @property
    def PoundForceInches(self) -> float:
        """ Get Moment in PoundForceInches.
        """
        pass

    @property
    def TonneForceCentimeters(self) -> float:
        """ Get Moment in TonneForceCentimeters.
        """
        pass

    @property
    def TonneForceMeters(self) -> float:
        """ Get Moment in TonneForceMeters.
        """
        pass

    @property
    def TonneForceMillimeters(self) -> float:
        """ Get Moment in TonneForceMillimeters.
        """
        pass

    def __init__(self, value: float, unit: MomentUnit) -> None:
        """ Creates the quantity with the given numeric value and unit.

        :param value: The numeric value to construct this quantity with.
        :type value: float
        :param unit: The unit representation to construct this quantity with.
        :type unit: MomentUnit

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    def __init__(self, value: float, unitSystem: UnitSystem) -> None:
        """Creates an instance of the quantity with the given numeric value in units compatible with the given "UnitSystem".
        If multiple compatible units were found, the first match is used.

        :param value: The numeric value to construct this quantity with.
        :type value: float
        :param unitSystem: The unit system to create the quantity with.
        :type unitSystem: UnitSystem

        :exception ArgumentNullException: The given "UnitSystem" is null.
        :exception ArgumentException: No unit was found for the given "UnitSystem".
        """
        pass

    @typing.overload
    def CompareTo(self, obj: typing.Any) -> int:
        """
        """
        pass

    @typing.overload
    def CompareTo(self, other: Moment) -> int:
        """
        """
        pass

    @typing.overload
    def Equals(self, obj: typing.Any) -> bool:
        """Consider using "Function ComparisonType)" for safely comparing floating point values.
        """
        pass

    @typing.overload
    def Equals(self, other: Moment) -> bool:
        """Consider using "Function ComparisonType)" for safely comparing floating point values.
        """
        pass

    @typing.overload
    def Equals(self, other: Moment, tolerance: float, comparisonType: ComparisonType) -> bool:
        """ Compare equality to another Moment within the given absolute or relative tolerance.

         Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and as a percentage of this quantity's value. will be converted into this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of this quantity's value to be considered equal. In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm). var a = Length.FromMeters(2.0); var b = Length.FromInches(50.0); a.Equals(b, 0.01, ComparisonType.Relative);

         Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and as a fixed number in this quantity's unit. will be converted into this quantity's unit for comparison. In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm). var a = Length.FromMeters(2.0); var b = Length.FromInches(50.0); a.Equals(b, 0.01, ComparisonType.Absolute);

         Note that it is advised against specifying zero difference, due to the nature of floating point operations and using System.Double internally.

        :param other: The other quantity to compare to.
        :type other: Moment
        :param tolerance: The absolute or relative tolerance value. Must be greater than or equal to 0.
        :type tolerance: float
        :param comparisonType: The comparison type: either relative or absolute.
        :type comparisonType: ComparisonType
        :return: True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.
        :rtype: bool
        """
        pass

    def GetHashCode(self) -> int:
        """ Returns the hash code for this instance.

        :return: A hash code for the current Moment.
        :rtype: int
        """
        pass

    @typing.overload
    def As(self, unit: MomentUnit) -> float:
        """ Convert to the unit representation .

        :return: Value converted to the specified unit.
        :rtype: float
        """
        pass

    @typing.overload
    def As(self, unitSystem: UnitSystem) -> float:
        """
        """
        pass

    @typing.overload
    def ToUnit(self, unit: MomentUnit) -> Moment:
        """ Converts this Moment to another Moment with the unit representation .

        :return: A Moment with the specified unit.
        :rtype: Moment
        """
        pass

    @typing.overload
    def ToUnit(self, unitSystem: UnitSystem) -> Moment:
        """
        """
        pass

    def ToBaseUnit(self) -> Moment:
        """ Converts the current value + unit to the base unit.
         This is typically the first step in converting from one unit to another.

        :return: The value in the base unit representation.
        :rtype: Moment
        """
        pass

    @typing.overload
    def ToString(self) -> str:
        """ Gets the default string representation of value and unit.

        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider) -> str:
        """ Gets the default string representation of value and unit using the given format provider.

        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider, significantDigitsAfterRadix: int) -> str:
        """ Get string representation of value and unit.

        :param significantDigitsAfterRadix: The number of significant digits after the radix point.
        :type significantDigitsAfterRadix: int
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider, format: str, args: Array[typing.Any]) -> str:
        """ Get string representation of value and unit.

        :param format: String format to use. Default: "{0:0.##} {1} for value and unit abbreviation respectively."
        :type format: str
        :param args: Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.
        :type args: Array[typing.Any]
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, format: str) -> str:
        """Gets the string representation of this instance in the specified format string using "Property CurrentUICulture".

        :param format: The format string.
        :type format: str
        :return: The string representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, format: str, provider: IFormatProvider) -> str:
        """Gets the string representation of this instance in the specified format string using the specified format provider, or "Property CurrentUICulture" if null.

        :param format: The format string.
        :type format: str
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: The string representation.
        :rtype: str
        """
        pass

    @staticmethod
    @typing.overload
    def GetAbbreviation(unit: MomentUnit) -> str:
        """ Get unit abbreviation string.

        :param unit: Unit to get abbreviation for.
        :type unit: MomentUnit
        :return: Unit abbreviation string.
        :rtype: str
        """
        pass

    @staticmethod
    @typing.overload
    def GetAbbreviation(unit: MomentUnit, provider: IFormatProvider) -> str:
        """ Get unit abbreviation string.

        :param unit: Unit to get abbreviation for.
        :type unit: MomentUnit
        :param provider: Format to use for localization. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: Unit abbreviation string.
        :rtype: str
        """
        pass

    @staticmethod
    def FromKilogramForceCentimeters(kilogramforcecentimeters: QuantityValue) -> Moment:
        """ Get Moment from KilogramForceCentimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromKilogramForceMeters(kilogramforcemeters: QuantityValue) -> Moment:
        """ Get Moment from KilogramForceMeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromKilogramForceMillimeters(kilogramforcemillimeters: QuantityValue) -> Moment:
        """ Get Moment from KilogramForceMillimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromKilonewtonCentimeters(kilonewtoncentimeters: QuantityValue) -> Moment:
        """ Get Moment from KilonewtonCentimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromKilonewtonMeters(kilonewtonmeters: QuantityValue) -> Moment:
        """ Get Moment from KilonewtonMeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromKilonewtonMillimeters(kilonewtonmillimeters: QuantityValue) -> Moment:
        """ Get Moment from KilonewtonMillimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromKilopoundForceFeet(kilopoundforcefeet: QuantityValue) -> Moment:
        """ Get Moment from KilopoundForceFeet.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromKilopoundForceInches(kilopoundforceinches: QuantityValue) -> Moment:
        """ Get Moment from KilopoundForceInches.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromMeganewtonCentimeters(meganewtoncentimeters: QuantityValue) -> Moment:
        """ Get Moment from MeganewtonCentimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromMeganewtonMeters(meganewtonmeters: QuantityValue) -> Moment:
        """ Get Moment from MeganewtonMeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromMeganewtonMillimeters(meganewtonmillimeters: QuantityValue) -> Moment:
        """ Get Moment from MeganewtonMillimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromMegapoundForceFeet(megapoundforcefeet: QuantityValue) -> Moment:
        """ Get Moment from MegapoundForceFeet.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromMegapoundForceInches(megapoundforceinches: QuantityValue) -> Moment:
        """ Get Moment from MegapoundForceInches.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromNewtonCentimeters(newtoncentimeters: QuantityValue) -> Moment:
        """ Get Moment from NewtonCentimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromNewtonMeters(newtonmeters: QuantityValue) -> Moment:
        """ Get Moment from NewtonMeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromNewtonMillimeters(newtonmillimeters: QuantityValue) -> Moment:
        """ Get Moment from NewtonMillimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromPoundalFeet(poundalfeet: QuantityValue) -> Moment:
        """ Get Moment from PoundalFeet.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromPoundForceFeet(poundforcefeet: QuantityValue) -> Moment:
        """ Get Moment from PoundForceFeet.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromPoundForceInches(poundforceinches: QuantityValue) -> Moment:
        """ Get Moment from PoundForceInches.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromTonneForceCentimeters(tonneforcecentimeters: QuantityValue) -> Moment:
        """ Get Moment from TonneForceCentimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromTonneForceMeters(tonneforcemeters: QuantityValue) -> Moment:
        """ Get Moment from TonneForceMeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromTonneForceMillimeters(tonneforcemillimeters: QuantityValue) -> Moment:
        """ Get Moment from TonneForceMillimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def From(value: QuantityValue, fromUnit: MomentUnit) -> Moment:
        """ Dynamically convert from value and unit enum "MomentUnit" to "Moment".

        :param value: Value to convert from.
        :type value: QuantityValue
        :param fromUnit: Unit to convert from.
        :type fromUnit: MomentUnit
        :return: Moment unit value.
        :rtype: Moment
        """
        pass

    @staticmethod
    @typing.overload
    def ParseUnit(str: str) -> MomentUnit:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str

        :exception ArgumentNullException: The value of 'str' cannot be null.
        :exception UnitsNetException: Error parsing string.
        """
        pass

    @staticmethod
    @typing.overload
    def ParseUnit(str: str, provider: IFormatProvider) -> MomentUnit:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str
        :param provider: Format to use when parsing number and unit. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider

        :exception ArgumentNullException: The value of 'str' cannot be null.
        :exception UnitsNetException: Error parsing string.
        """
        pass

    @staticmethod
    @typing.overload
    def TryParseUnit(str: str, unit: MomentUnit) -> typing.Tuple[MomentUnit, bool]:
        """
        """
        pass

    @staticmethod
    @typing.overload
    def TryParseUnit(str: str, provider: IFormatProvider, unit: MomentUnit) -> typing.Tuple[MomentUnit, bool]:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str
        :param unit: The parsed unit if successful.
        :type unit: MomentUnit
        :param provider: Format to use when parsing number and unit. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: True if successful, otherwise false.
        :rtype: bool
        """
        pass


# noinspection PyPep8Naming
class Strain(ValueType, IQuantity[StrainUnit], IQuantity, IFormattable, IEquatable[Strain], IComparable, IComparable[Strain], IConvertible):
    """ .
    """

    Info: typing.ClassVar[QuantityInfo[StrainUnit]]

    BaseDimensions: typing.ClassVar[BaseDimensions]

    BaseUnit: typing.ClassVar[StrainUnit]

    MaxValue: typing.ClassVar[Strain]

    MinValue: typing.ClassVar[Strain]

    QuantityType: typing.ClassVar[QuantityType]

    Units: typing.ClassVar[Array[StrainUnit]]

    Zero: typing.ClassVar[Strain]

    @property
    def Value(self) -> float:
        """ The numeric value this quantity was constructed with.
        """
        pass

    @property
    def Unit(self) -> StrainUnit:
        """
        """
        pass

    @property
    def QuantityInfo(self) -> QuantityInfo[StrainUnit]:
        """
        """
        pass

    @property
    def Type(self) -> QuantityType:
        """ The "Property QuantityType" of this quantity.
        """
        pass

    @property
    def Dimensions(self) -> BaseDimensions:
        """ The "Property BaseDimensions" of this quantity.
        """
        pass

    @property
    def MicroStrain(self) -> float:
        """ Get Strain in MicroStrain.
        """
        pass

    @property
    def MilliStrain(self) -> float:
        """ Get Strain in MilliStrain.
        """
        pass

    @property
    def Percent(self) -> float:
        """ Get Strain in Percent.
        """
        pass

    @property
    def Ratio(self) -> float:
        """ Get Strain in Ratio.
        """
        pass

    def __init__(self, value: float, unit: StrainUnit) -> None:
        """ Creates the quantity with the given numeric value and unit.

        :param value: The numeric value to construct this quantity with.
        :type value: float
        :param unit: The unit representation to construct this quantity with.
        :type unit: StrainUnit

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    def __init__(self, value: float, unitSystem: UnitSystem) -> None:
        """Creates an instance of the quantity with the given numeric value in units compatible with the given "UnitSystem".
        If multiple compatible units were found, the first match is used.

        :param value: The numeric value to construct this quantity with.
        :type value: float
        :param unitSystem: The unit system to create the quantity with.
        :type unitSystem: UnitSystem

        :exception ArgumentNullException: The given "UnitSystem" is null.
        :exception ArgumentException: No unit was found for the given "UnitSystem".
        """
        pass

    @typing.overload
    def ToString(self) -> str:
        """ Gets the default string representation of value and unit.

        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider) -> str:
        """ Gets the default string representation of value and unit using the given format provider.

        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider, significantDigitsAfterRadix: int) -> str:
        """ Get string representation of value and unit.

        :param significantDigitsAfterRadix: The number of significant digits after the radix point.
        :type significantDigitsAfterRadix: int
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider, format: str, args: Array[typing.Any]) -> str:
        """ Get string representation of value and unit.

        :param format: String format to use. Default: "{0:0.##} {1} for value and unit abbreviation respectively."
        :type format: str
        :param args: Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.
        :type args: Array[typing.Any]
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, format: str) -> str:
        """Gets the string representation of this instance in the specified format string using "Property CurrentUICulture".

        :param format: The format string.
        :type format: str
        :return: The string representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, format: str, provider: IFormatProvider) -> str:
        """Gets the string representation of this instance in the specified format string using the specified format provider, or "Property CurrentUICulture" if null.

        :param format: The format string.
        :type format: str
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: The string representation.
        :rtype: str
        """
        pass

    @staticmethod
    @typing.overload
    def GetAbbreviation(unit: StrainUnit) -> str:
        """ Get unit abbreviation string.

        :param unit: Unit to get abbreviation for.
        :type unit: StrainUnit
        :return: Unit abbreviation string.
        :rtype: str
        """
        pass

    @staticmethod
    @typing.overload
    def GetAbbreviation(unit: StrainUnit, provider: IFormatProvider) -> str:
        """ Get unit abbreviation string.

        :param unit: Unit to get abbreviation for.
        :type unit: StrainUnit
        :param provider: Format to use for localization. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: Unit abbreviation string.
        :rtype: str
        """
        pass

    @staticmethod
    def FromMicroStrain(microstrain: QuantityValue) -> Strain:
        """ Get Strain from MicroStrain.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromMilliStrain(millistrain: QuantityValue) -> Strain:
        """ Get Strain from MilliStrain.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromPercent(percent: QuantityValue) -> Strain:
        """ Get Strain from Percent.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromRatio(ratio: QuantityValue) -> Strain:
        """ Get Strain from Ratio.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def From(value: QuantityValue, fromUnit: StrainUnit) -> Strain:
        """ Dynamically convert from value and unit enum "StrainUnit" to "Strain".

        :param value: Value to convert from.
        :type value: QuantityValue
        :param fromUnit: Unit to convert from.
        :type fromUnit: StrainUnit
        :return: Strain unit value.
        :rtype: Strain
        """
        pass

    @staticmethod
    def ParseUnit(str: str, provider: IFormatProvider) -> StrainUnit:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str
        :param provider: Format to use when parsing number and unit. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider

        :exception ArgumentNullException: The value of 'str' cannot be null.
        :exception UnitsNetException: Error parsing string.
        """
        pass

    @staticmethod
    @typing.overload
    def TryParseUnit(str: str, unit: StrainUnit) -> typing.Tuple[StrainUnit, bool]:
        """
        """
        pass

    @staticmethod
    @typing.overload
    def TryParseUnit(str: str, provider: IFormatProvider, unit: StrainUnit) -> typing.Tuple[StrainUnit, bool]:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str
        :param unit: The parsed unit if successful.
        :type unit: StrainUnit
        :param provider: Format to use when parsing number and unit. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: True if successful, otherwise false.
        :rtype: bool
        """
        pass

    @typing.overload
    def CompareTo(self, obj: typing.Any) -> int:
        """
        """
        pass

    @typing.overload
    def CompareTo(self, other: Strain) -> int:
        """
        """
        pass

    @typing.overload
    def Equals(self, obj: typing.Any) -> bool:
        """Consider using "Function ComparisonType)" for safely comparing floating point values.
        """
        pass

    @typing.overload
    def Equals(self, other: Strain) -> bool:
        """Consider using "Function ComparisonType)" for safely comparing floating point values.
        """
        pass

    @typing.overload
    def Equals(self, other: Strain, tolerance: float, comparisonType: ComparisonType) -> bool:
        """ Compare equality to another Strain within the given absolute or relative tolerance.

         Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and as a percentage of this quantity's value. will be converted into this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of this quantity's value to be considered equal. In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm). var a = Length.FromMeters(2.0); var b = Length.FromInches(50.0); a.Equals(b, 0.01, ComparisonType.Relative);

         Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and as a fixed number in this quantity's unit. will be converted into this quantity's unit for comparison. In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm). var a = Length.FromMeters(2.0); var b = Length.FromInches(50.0); a.Equals(b, 0.01, ComparisonType.Absolute);

         Note that it is advised against specifying zero difference, due to the nature of floating point operations and using System.Double internally.

        :param other: The other quantity to compare to.
        :type other: Strain
        :param tolerance: The absolute or relative tolerance value. Must be greater than or equal to 0.
        :type tolerance: float
        :param comparisonType: The comparison type: either relative or absolute.
        :type comparisonType: ComparisonType
        :return: True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.
        :rtype: bool
        """
        pass

    def GetHashCode(self) -> int:
        """ Returns the hash code for this instance.

        :return: A hash code for the current Strain.
        :rtype: int
        """
        pass

    @typing.overload
    def As(self, unit: StrainUnit) -> float:
        """ Convert to the unit representation .

        :return: Value converted to the specified unit.
        :rtype: float
        """
        pass

    @typing.overload
    def As(self, unitSystem: UnitSystem) -> float:
        """
        """
        pass

    @typing.overload
    def ToUnit(self, unit: StrainUnit) -> Strain:
        """ Converts this Strain to another Strain with the unit representation .

        :return: A Strain with the specified unit.
        :rtype: Strain
        """
        pass

    @typing.overload
    def ToUnit(self, unitSystem: UnitSystem) -> Strain:
        """
        """
        pass

    def ToBaseUnit(self) -> Strain:
        """ Converts the current value + unit to the base unit.
         This is typically the first step in converting from one unit to another.

        :return: The value in the base unit representation.
        :rtype: Strain
        """
        pass


# noinspection PyPep8Naming
class Curvature(ValueType, IQuantity[CurvatureUnit], IQuantity, IFormattable, IEquatable[Curvature], IComparable, IComparable[Curvature], IConvertible):
    """ .
    """

    Info: typing.ClassVar[QuantityInfo[CurvatureUnit]]

    BaseDimensions: typing.ClassVar[BaseDimensions]

    BaseUnit: typing.ClassVar[CurvatureUnit]

    MaxValue: typing.ClassVar[Curvature]

    MinValue: typing.ClassVar[Curvature]

    QuantityType: typing.ClassVar[QuantityType]

    Units: typing.ClassVar[Array[CurvatureUnit]]

    Zero: typing.ClassVar[Curvature]

    @property
    def Value(self) -> float:
        """ The numeric value this quantity was constructed with.
        """
        pass

    @property
    def Unit(self) -> CurvatureUnit:
        """
        """
        pass

    @property
    def QuantityInfo(self) -> QuantityInfo[CurvatureUnit]:
        """
        """
        pass

    @property
    def Type(self) -> QuantityType:
        """ The "Property QuantityType" of this quantity.
        """
        pass

    @property
    def Dimensions(self) -> BaseDimensions:
        """ The "Property BaseDimensions" of this quantity.
        """
        pass

    @property
    def PerCentimeters(self) -> float:
        """ Get Curvature in PerCentimeters.
        """
        pass

    @property
    def PerFeet(self) -> float:
        """ Get Curvature in PerFeet.
        """
        pass

    @property
    def PerInches(self) -> float:
        """ Get Curvature in PerInches.
        """
        pass

    @property
    def PerMeters(self) -> float:
        """ Get Curvature in PerMeters.
        """
        pass

    @property
    def PerMillimeters(self) -> float:
        """ Get Curvature in PerMillimeters.
        """
        pass

    def __init__(self, value: float, unit: CurvatureUnit) -> None:
        """ Creates the quantity with the given numeric value and unit.

        :param value: The numeric value to construct this quantity with.
        :type value: float
        :param unit: The unit representation to construct this quantity with.
        :type unit: CurvatureUnit

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    def __init__(self, value: float, unitSystem: UnitSystem) -> None:
        """Creates an instance of the quantity with the given numeric value in units compatible with the given "UnitSystem".
        If multiple compatible units were found, the first match is used.

        :param value: The numeric value to construct this quantity with.
        :type value: float
        :param unitSystem: The unit system to create the quantity with.
        :type unitSystem: UnitSystem

        :exception ArgumentNullException: The given "UnitSystem" is null.
        :exception ArgumentException: No unit was found for the given "UnitSystem".
        """
        pass

    def ToBaseUnit(self) -> Curvature:
        """ Converts the current value + unit to the base unit.
         This is typically the first step in converting from one unit to another.

        :return: The value in the base unit representation.
        :rtype: Curvature
        """
        pass

    @typing.overload
    def ToString(self) -> str:
        """ Gets the default string representation of value and unit.

        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider) -> str:
        """ Gets the default string representation of value and unit using the given format provider.

        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider, significantDigitsAfterRadix: int) -> str:
        """ Get string representation of value and unit.

        :param significantDigitsAfterRadix: The number of significant digits after the radix point.
        :type significantDigitsAfterRadix: int
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider, format: str, args: Array[typing.Any]) -> str:
        """ Get string representation of value and unit.

        :param format: String format to use. Default: "{0:0.##} {1} for value and unit abbreviation respectively."
        :type format: str
        :param args: Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.
        :type args: Array[typing.Any]
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, format: str) -> str:
        """Gets the string representation of this instance in the specified format string using "Property CurrentUICulture".

        :param format: The format string.
        :type format: str
        :return: The string representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, format: str, provider: IFormatProvider) -> str:
        """Gets the string representation of this instance in the specified format string using the specified format provider, or "Property CurrentUICulture" if null.

        :param format: The format string.
        :type format: str
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: The string representation.
        :rtype: str
        """
        pass

    @staticmethod
    @typing.overload
    def GetAbbreviation(unit: CurvatureUnit) -> str:
        """ Get unit abbreviation string.

        :param unit: Unit to get abbreviation for.
        :type unit: CurvatureUnit
        :return: Unit abbreviation string.
        :rtype: str
        """
        pass

    @staticmethod
    @typing.overload
    def GetAbbreviation(unit: CurvatureUnit, provider: IFormatProvider) -> str:
        """ Get unit abbreviation string.

        :param unit: Unit to get abbreviation for.
        :type unit: CurvatureUnit
        :param provider: Format to use for localization. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: Unit abbreviation string.
        :rtype: str
        """
        pass

    @staticmethod
    def FromPerCentimeters(percentimeters: QuantityValue) -> Curvature:
        """ Get Curvature from PerCentimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromPerFeet(perfeet: QuantityValue) -> Curvature:
        """ Get Curvature from PerFeet.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromPerInches(perinches: QuantityValue) -> Curvature:
        """ Get Curvature from PerInches.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromPerMeters(permeters: QuantityValue) -> Curvature:
        """ Get Curvature from PerMeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromPerMillimeters(permillimeters: QuantityValue) -> Curvature:
        """ Get Curvature from PerMillimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def From(value: QuantityValue, fromUnit: CurvatureUnit) -> Curvature:
        """ Dynamically convert from value and unit enum "CurvatureUnit" to "Curvature".

        :param value: Value to convert from.
        :type value: QuantityValue
        :param fromUnit: Unit to convert from.
        :type fromUnit: CurvatureUnit
        :return: Curvature unit value.
        :rtype: Curvature
        """
        pass

    @staticmethod
    @typing.overload
    def ParseUnit(str: str) -> CurvatureUnit:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str

        :exception ArgumentNullException: The value of 'str' cannot be null.
        :exception UnitsNetException: Error parsing string.
        """
        pass

    @staticmethod
    @typing.overload
    def ParseUnit(str: str, provider: IFormatProvider) -> CurvatureUnit:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str
        :param provider: Format to use when parsing number and unit. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider

        :exception ArgumentNullException: The value of 'str' cannot be null.
        :exception UnitsNetException: Error parsing string.
        """
        pass

    @staticmethod
    @typing.overload
    def TryParseUnit(str: str, unit: CurvatureUnit) -> typing.Tuple[CurvatureUnit, bool]:
        """
        """
        pass

    @staticmethod
    @typing.overload
    def TryParseUnit(str: str, provider: IFormatProvider, unit: CurvatureUnit) -> typing.Tuple[CurvatureUnit, bool]:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str
        :param unit: The parsed unit if successful.
        :type unit: CurvatureUnit
        :param provider: Format to use when parsing number and unit. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: True if successful, otherwise false.
        :rtype: bool
        """
        pass

    @typing.overload
    def CompareTo(self, obj: typing.Any) -> int:
        """
        """
        pass

    @typing.overload
    def CompareTo(self, other: Curvature) -> int:
        """
        """
        pass

    @typing.overload
    def Equals(self, obj: typing.Any) -> bool:
        """Consider using "Function ComparisonType)" for safely comparing floating point values.
        """
        pass

    @typing.overload
    def Equals(self, other: Curvature) -> bool:
        """Consider using "Function ComparisonType)" for safely comparing floating point values.
        """
        pass

    @typing.overload
    def Equals(self, other: Curvature, tolerance: float, comparisonType: ComparisonType) -> bool:
        """ Compare equality to another Curvature within the given absolute or relative tolerance.

         Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and as a percentage of this quantity's value. will be converted into this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of this quantity's value to be considered equal. In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm). var a = Length.FromMeters(2.0); var b = Length.FromInches(50.0); a.Equals(b, 0.01, ComparisonType.Relative);

         Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and as a fixed number in this quantity's unit. will be converted into this quantity's unit for comparison. In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm). var a = Length.FromMeters(2.0); var b = Length.FromInches(50.0); a.Equals(b, 0.01, ComparisonType.Absolute);

         Note that it is advised against specifying zero difference, due to the nature of floating point operations and using System.Double internally.

        :param other: The other quantity to compare to.
        :type other: Curvature
        :param tolerance: The absolute or relative tolerance value. Must be greater than or equal to 0.
        :type tolerance: float
        :param comparisonType: The comparison type: either relative or absolute.
        :type comparisonType: ComparisonType
        :return: True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.
        :rtype: bool
        """
        pass

    def GetHashCode(self) -> int:
        """ Returns the hash code for this instance.

        :return: A hash code for the current Curvature.
        :rtype: int
        """
        pass

    @typing.overload
    def As(self, unit: CurvatureUnit) -> float:
        """ Convert to the unit representation .

        :return: Value converted to the specified unit.
        :rtype: float
        """
        pass

    @typing.overload
    def As(self, unitSystem: UnitSystem) -> float:
        """
        """
        pass

    @typing.overload
    def ToUnit(self, unit: CurvatureUnit) -> Curvature:
        """ Converts this Curvature to another Curvature with the unit representation .

        :return: A Curvature with the specified unit.
        :rtype: Curvature
        """
        pass

    @typing.overload
    def ToUnit(self, unitSystem: UnitSystem) -> Curvature:
        """
        """
        pass


# noinspection PyPep8Naming
class SectionModulus(ValueType, IQuantity[SectionModulusUnit], IQuantity, IFormattable, IEquatable[SectionModulus], IComparable, IComparable[SectionModulus], IConvertible):
    """ Section modulus is a geometric property for a given cross-section used in the design of beams or flexural members.
    """

    Info: typing.ClassVar[QuantityInfo[SectionModulusUnit]]

    BaseDimensions: typing.ClassVar[BaseDimensions]

    BaseUnit: typing.ClassVar[SectionModulusUnit]

    MaxValue: typing.ClassVar[SectionModulus]

    MinValue: typing.ClassVar[SectionModulus]

    QuantityType: typing.ClassVar[QuantityType]

    Units: typing.ClassVar[Array[SectionModulusUnit]]

    Zero: typing.ClassVar[SectionModulus]

    @property
    def Value(self) -> float:
        """ The numeric value this quantity was constructed with.
        """
        pass

    @property
    def Unit(self) -> SectionModulusUnit:
        """
        """
        pass

    @property
    def QuantityInfo(self) -> QuantityInfo[SectionModulusUnit]:
        """
        """
        pass

    @property
    def Type(self) -> QuantityType:
        """ The "Property QuantityType" of this quantity.
        """
        pass

    @property
    def Dimensions(self) -> BaseDimensions:
        """ The "Property BaseDimensions" of this quantity.
        """
        pass

    @property
    def CubicCentimeters(self) -> float:
        """ Get SectionModulus in CubicCentimeters.
        """
        pass

    @property
    def CubicFeet(self) -> float:
        """ Get SectionModulus in CubicFeet.
        """
        pass

    @property
    def CubicInches(self) -> float:
        """ Get SectionModulus in CubicInches.
        """
        pass

    @property
    def CubicMeters(self) -> float:
        """ Get SectionModulus in CubicMeters.
        """
        pass

    @property
    def CubicMillimeters(self) -> float:
        """ Get SectionModulus in CubicMillimeters.
        """
        pass

    def __init__(self, value: float, unit: SectionModulusUnit) -> None:
        """ Creates the quantity with the given numeric value and unit.

        :param value: The numeric value to construct this quantity with.
        :type value: float
        :param unit: The unit representation to construct this quantity with.
        :type unit: SectionModulusUnit

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    def __init__(self, value: float, unitSystem: UnitSystem) -> None:
        """Creates an instance of the quantity with the given numeric value in units compatible with the given "UnitSystem".
        If multiple compatible units were found, the first match is used.

        :param value: The numeric value to construct this quantity with.
        :type value: float
        :param unitSystem: The unit system to create the quantity with.
        :type unitSystem: UnitSystem

        :exception ArgumentNullException: The given "UnitSystem" is null.
        :exception ArgumentException: No unit was found for the given "UnitSystem".
        """
        pass

    def ToBaseUnit(self) -> SectionModulus:
        """ Converts the current value + unit to the base unit.
         This is typically the first step in converting from one unit to another.

        :return: The value in the base unit representation.
        :rtype: SectionModulus
        """
        pass

    @typing.overload
    def ToString(self) -> str:
        """ Gets the default string representation of value and unit.

        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider) -> str:
        """ Gets the default string representation of value and unit using the given format provider.

        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider, significantDigitsAfterRadix: int) -> str:
        """ Get string representation of value and unit.

        :param significantDigitsAfterRadix: The number of significant digits after the radix point.
        :type significantDigitsAfterRadix: int
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, provider: IFormatProvider, format: str, args: Array[typing.Any]) -> str:
        """ Get string representation of value and unit.

        :param format: String format to use. Default: "{0:0.##} {1} for value and unit abbreviation respectively."
        :type format: str
        :param args: Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.
        :type args: Array[typing.Any]
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: String representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, format: str) -> str:
        """Gets the string representation of this instance in the specified format string using "Property CurrentUICulture".

        :param format: The format string.
        :type format: str
        :return: The string representation.
        :rtype: str
        """
        pass

    @typing.overload
    def ToString(self, format: str, provider: IFormatProvider) -> str:
        """Gets the string representation of this instance in the specified format string using the specified format provider, or "Property CurrentUICulture" if null.

        :param format: The format string.
        :type format: str
        :param provider: Format to use for localization and number formatting. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: The string representation.
        :rtype: str
        """
        pass

    @staticmethod
    @typing.overload
    def GetAbbreviation(unit: SectionModulusUnit) -> str:
        """ Get unit abbreviation string.

        :param unit: Unit to get abbreviation for.
        :type unit: SectionModulusUnit
        :return: Unit abbreviation string.
        :rtype: str
        """
        pass

    @staticmethod
    @typing.overload
    def GetAbbreviation(unit: SectionModulusUnit, provider: IFormatProvider) -> str:
        """ Get unit abbreviation string.

        :param unit: Unit to get abbreviation for.
        :type unit: SectionModulusUnit
        :param provider: Format to use for localization. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: Unit abbreviation string.
        :rtype: str
        """
        pass

    @staticmethod
    def FromCubicCentimeters(cubiccentimeters: QuantityValue) -> SectionModulus:
        """ Get SectionModulus from CubicCentimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromCubicFeet(cubicfeet: QuantityValue) -> SectionModulus:
        """ Get SectionModulus from CubicFeet.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromCubicInches(cubicinches: QuantityValue) -> SectionModulus:
        """ Get SectionModulus from CubicInches.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromCubicMeters(cubicmeters: QuantityValue) -> SectionModulus:
        """ Get SectionModulus from CubicMeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def FromCubicMillimeters(cubicmillimeters: QuantityValue) -> SectionModulus:
        """ Get SectionModulus from CubicMillimeters.

        :exception ArgumentException: If value is NaN or Infinity.
        """
        pass

    @staticmethod
    def From(value: QuantityValue, fromUnit: SectionModulusUnit) -> SectionModulus:
        """ Dynamically convert from value and unit enum "SectionModulusUnit" to "SectionModulus".

        :param value: Value to convert from.
        :type value: QuantityValue
        :param fromUnit: Unit to convert from.
        :type fromUnit: SectionModulusUnit
        :return: SectionModulus unit value.
        :rtype: SectionModulus
        """
        pass

    @staticmethod
    @typing.overload
    def ParseUnit(str: str) -> SectionModulusUnit:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str

        :exception ArgumentNullException: The value of 'str' cannot be null.
        :exception UnitsNetException: Error parsing string.
        """
        pass

    @staticmethod
    @typing.overload
    def ParseUnit(str: str, provider: IFormatProvider) -> SectionModulusUnit:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str
        :param provider: Format to use when parsing number and unit. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider

        :exception ArgumentNullException: The value of 'str' cannot be null.
        :exception UnitsNetException: Error parsing string.
        """
        pass

    @staticmethod
    @typing.overload
    def TryParseUnit(str: str, unit: SectionModulusUnit) -> typing.Tuple[SectionModulusUnit, bool]:
        """
        """
        pass

    @staticmethod
    @typing.overload
    def TryParseUnit(str: str, provider: IFormatProvider, unit: SectionModulusUnit) -> typing.Tuple[SectionModulusUnit, bool]:
        """ Parse a unit string.

        :param str: String to parse. Typically in the form: {number} {unit}
        :type str: str
        :param unit: The parsed unit if successful.
        :type unit: SectionModulusUnit
        :param provider: Format to use when parsing number and unit. Defaults to "Property CurrentUICulture" if null.
        :type provider: IFormatProvider
        :return: True if successful, otherwise false.
        :rtype: bool
        """
        pass

    @typing.overload
    def CompareTo(self, obj: typing.Any) -> int:
        """
        """
        pass

    @typing.overload
    def CompareTo(self, other: SectionModulus) -> int:
        """
        """
        pass

    @typing.overload
    def Equals(self, obj: typing.Any) -> bool:
        """Consider using "Function ComparisonType)" for safely comparing floating point values.
        """
        pass

    @typing.overload
    def Equals(self, other: SectionModulus) -> bool:
        """Consider using "Function ComparisonType)" for safely comparing floating point values.
        """
        pass

    @typing.overload
    def Equals(self, other: SectionModulus, tolerance: float, comparisonType: ComparisonType) -> bool:
        """ Compare equality to another SectionModulus within the given absolute or relative tolerance.

         Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and as a percentage of this quantity's value. will be converted into this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of this quantity's value to be considered equal. In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm). var a = Length.FromMeters(2.0); var b = Length.FromInches(50.0); a.Equals(b, 0.01, ComparisonType.Relative);

         Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and as a fixed number in this quantity's unit. will be converted into this quantity's unit for comparison. In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm). var a = Length.FromMeters(2.0); var b = Length.FromInches(50.0); a.Equals(b, 0.01, ComparisonType.Absolute);

         Note that it is advised against specifying zero difference, due to the nature of floating point operations and using System.Double internally.

        :param other: The other quantity to compare to.
        :type other: SectionModulus
        :param tolerance: The absolute or relative tolerance value. Must be greater than or equal to 0.
        :type tolerance: float
        :param comparisonType: The comparison type: either relative or absolute.
        :type comparisonType: ComparisonType
        :return: True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.
        :rtype: bool
        """
        pass

    def GetHashCode(self) -> int:
        """ Returns the hash code for this instance.

        :return: A hash code for the current SectionModulus.
        :rtype: int
        """
        pass

    @typing.overload
    def As(self, unit: SectionModulusUnit) -> float:
        """ Convert to the unit representation .

        :return: Value converted to the specified unit.
        :rtype: float
        """
        pass

    @typing.overload
    def As(self, unitSystem: UnitSystem) -> float:
        """
        """
        pass

    @typing.overload
    def ToUnit(self, unit: SectionModulusUnit) -> SectionModulus:
        """ Converts this SectionModulus to another SectionModulus with the unit representation .

        :return: A SectionModulus with the specified unit.
        :rtype: SectionModulus
        """
        pass

    @typing.overload
    def ToUnit(self, unitSystem: UnitSystem) -> SectionModulus:
        """
        """
        pass


# noinspection PyPep8Naming
class AxialStiffnessUnit(Enum, IComparable, IFormattable, IConvertible):

    value__: int = ...

    Undefined: AxialStiffnessUnit = ...

    Decanewton: AxialStiffnessUnit = ...

    Dyn: AxialStiffnessUnit = ...

    KilogramForce: AxialStiffnessUnit = ...

    Kilonewton: AxialStiffnessUnit = ...

    KiloPond: AxialStiffnessUnit = ...

    KilopoundForce: AxialStiffnessUnit = ...

    Meganewton: AxialStiffnessUnit = ...

    Micronewton: AxialStiffnessUnit = ...

    Millinewton: AxialStiffnessUnit = ...

    Newton: AxialStiffnessUnit = ...

    OunceForce: AxialStiffnessUnit = ...

    Poundal: AxialStiffnessUnit = ...

    PoundForce: AxialStiffnessUnit = ...

    ShortTonForce: AxialStiffnessUnit = ...
    """ The short ton-force is a unit of force equal to 2,000 pounds-force (907.18474 kgf), that is most commonly used in the United States – known there simply as the ton or US ton.
    https://en.wikipedia.org/wiki/Ton-force#Short_ton-force
    """

    TonneForce: AxialStiffnessUnit = ...


# noinspection PyPep8Naming
class BendingStiffnessUnit(Enum, IComparable, IFormattable, IConvertible):

    value__: int = ...

    Undefined: BendingStiffnessUnit = ...

    KilonewtonSquareMeter: BendingStiffnessUnit = ...

    KilonewtonSquareMillimeter: BendingStiffnessUnit = ...

    NewtonSquareMeter: BendingStiffnessUnit = ...

    NewtonSquareMillimeter: BendingStiffnessUnit = ...

    PoundForceSquareFoot: BendingStiffnessUnit = ...

    PoundForceSquareInch: BendingStiffnessUnit = ...


# noinspection PyPep8Naming
class CurvatureUnit(Enum, IComparable, IFormattable, IConvertible):

    value__: int = ...

    Undefined: CurvatureUnit = ...

    PerCentimeter: CurvatureUnit = ...

    PerFoot: CurvatureUnit = ...

    PerInch: CurvatureUnit = ...

    PerMeter: CurvatureUnit = ...

    PerMillimeter: CurvatureUnit = ...


# noinspection PyPep8Naming
class MomentUnit(Enum, IComparable, IFormattable, IConvertible):

    value__: int = ...

    Undefined: MomentUnit = ...

    KilogramForceCentimeter: MomentUnit = ...

    KilogramForceMeter: MomentUnit = ...

    KilogramForceMillimeter: MomentUnit = ...

    KilonewtonCentimeter: MomentUnit = ...

    KilonewtonMeter: MomentUnit = ...

    KilonewtonMillimeter: MomentUnit = ...

    KilopoundForceFoot: MomentUnit = ...

    KilopoundForceInch: MomentUnit = ...

    MeganewtonCentimeter: MomentUnit = ...

    MeganewtonMeter: MomentUnit = ...

    MeganewtonMillimeter: MomentUnit = ...

    MegapoundForceFoot: MomentUnit = ...

    MegapoundForceInch: MomentUnit = ...

    NewtonCentimeter: MomentUnit = ...

    NewtonMeter: MomentUnit = ...

    NewtonMillimeter: MomentUnit = ...

    PoundalFoot: MomentUnit = ...

    PoundForceFoot: MomentUnit = ...

    PoundForceInch: MomentUnit = ...

    TonneForceCentimeter: MomentUnit = ...

    TonneForceMeter: MomentUnit = ...

    TonneForceMillimeter: MomentUnit = ...


# noinspection PyPep8Naming
class SectionModulusUnit(Enum, IComparable, IFormattable, IConvertible):

    value__: int = ...

    Undefined: SectionModulusUnit = ...

    CubicCentimeter: SectionModulusUnit = ...

    CubicFoot: SectionModulusUnit = ...

    CubicInch: SectionModulusUnit = ...

    CubicMeter: SectionModulusUnit = ...

    CubicMillimeter: SectionModulusUnit = ...


# noinspection PyPep8Naming
class StrainUnit(Enum, IComparable, IFormattable, IConvertible):

    value__: int = ...

    Undefined: StrainUnit = ...

    MicroStrain: StrainUnit = ...

    MilliStrain: StrainUnit = ...

    Percent: StrainUnit = ...

    Ratio: StrainUnit = ...
