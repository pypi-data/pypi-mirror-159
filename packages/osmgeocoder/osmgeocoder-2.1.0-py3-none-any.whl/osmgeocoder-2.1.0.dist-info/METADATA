Metadata-Version: 2.1
Name: osmgeocoder
Version: 2.1.0
Summary: OpenStreetMap and OpenAddresses.io based geocoder
Home-page: https://github.com/dunkelstern/osmgeocoder
Author: Johannes Schriewer
Author-email: hallo@dunkelstern.de
License: LICENSE.txt
Keywords: osm openstreetmap geocoding geocoder openaddresses.io
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: psycopg2 (>=2.8)
Requires-Dist: pyproj (>=1.9)
Requires-Dist: Shapely (>=1.6)
Requires-Dist: requests (>=2.18)
Requires-Dist: PyYAML (>=5.0)
Requires-Dist: pystache (>=0.5)
Requires-Dist: python-geohash (>=0.8.5)


Python implementation for a OSM / Openaddresses.io Geocoder.

This geocoder is implemented in PostgreSQL DB functions as much as possible, there is a simple API and an example flask app included.

You will need PostgreSQL 9.5+ (or 11.0+ for Openaddresses.io) with PostGIS installed as well as some disk space and data-files from OpenStreetMap and (optionally) OpenAddresses.io.

Data import will be done via [Omniscale's imposm3](https://github.com/omniscale/imposm3) and a supplied python script to import the openaddresses.io data.

Optionally you can use the [libpostal machine learning address classifier](https://github.com/openvenues/libpostal) to parse addresses supplied as input to the forward geocoder.

For formatting the addresses from the reverse geocoder the `worldwide.yml` from [OpenCageData address-formatting repository](https://github.com/OpenCageData/address-formatting) is used to format the address according to customs in the country that is been encoded.

See `README.md` in the [repository](https://github.com/dunkelstern/osmgeocoder) for more information.
        

