{"version":3,"file":"0f4e21bb.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;AAoEA;;AApEA;ACYA;AAGA;;ACeA;;;AAKA;;;;AAKA;AACA;AACA;AACA;;;;AAIA;AAEA;AACA;;AAIA;;;;;AAMA;;AAGA;;;AAIA;;AASA;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAxEA","sources":["webpack://home-assistant-frontend/./src/components/ha-card.ts","webpack://home-assistant-frontend/./src/components/ha-state-icon.ts","webpack://home-assistant-frontend/./src/panels/config/dashboard/ha-config-updates.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-card\")\nexport class HaCard extends LitElement {\n  @property() public header?: string;\n\n  @property({ type: Boolean, reflect: true }) public outlined = false;\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 4px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0px 2px 1px -1px rgba(0, 0, 0, 0.2),\n          0px 1px 1px 0px rgba(0, 0, 0, 0.14),\n          0px 1px 3px 0px rgba(0, 0, 0, 0.12)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      :host([outlined]) {\n        box-shadow: none;\n        border-width: var(--ha-card-border-width, 1px);\n        border-style: solid;\n        border-color: var(\n          --ha-card-border-color,\n          var(--divider-color, #e0e0e0)\n        );\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 48px;\n        padding: 12px 16px 16px;\n        display: block;\n        margin-block-start: 0px;\n        margin-block-end: 0px;\n        font-weight: normal;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid var(--divider-color, #e8e8e8);\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`<h1 class=\"card-header\">${this.header}</h1>`\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { stateIconPath } from \"../common/entity/state_icon_path\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-state-icon\")\nexport class HaStateIcon extends LitElement {\n  @property({ attribute: false }) public state?: HassEntity;\n\n  @property() public icon?: string;\n\n  protected render(): TemplateResult {\n    if (this.icon || this.state?.attributes.icon) {\n      return html`<ha-icon\n        .icon=${this.icon || this.state?.attributes.icon}\n      ></ha-icon>`;\n    }\n    return html`<ha-svg-icon .path=${stateIconPath(this.state)}></ha-svg-icon>`;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-icon\": HaStateIcon;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/entity/state-badge\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-icon-next\";\nimport type { UpdateEntity } from \"../../../data/update\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-list-item\";\n\n@customElement(\"ha-config-updates\")\nclass HaConfigUpdates extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ attribute: false })\n  public updateEntities?: UpdateEntity[];\n\n  @property({ type: Number })\n  public total?: number;\n\n  protected render(): TemplateResult {\n    if (!this.updateEntities?.length) {\n      return html``;\n    }\n\n    const updates = this.updateEntities;\n\n    return html`\n      <div class=\"title\">\n        ${this.hass.localize(\"ui.panel.config.updates.title\", {\n          count: this.total || this.updateEntities.length,\n        })}\n      </div>\n      <mwc-list>\n        ${updates.map(\n          (entity) => html`\n            <ha-list-item\n              twoline\n              graphic=\"avatar\"\n              class=${entity.attributes.skipped_version ? \"skipped\" : \"\"}\n              .entity_id=${entity.entity_id}\n              .hasMeta=${!this.narrow}\n              @click=${this._openMoreInfo}\n            >\n              <state-badge\n                slot=\"graphic\"\n                .title=${entity.attributes.title ||\n                entity.attributes.friendly_name}\n                .stateObj=${entity}\n                class=${this.narrow && entity.attributes.in_progress\n                  ? \"updating\"\n                  : \"\"}\n              ></state-badge>\n              ${this.narrow && entity.attributes.in_progress\n                ? html`<ha-circular-progress\n                    active\n                    size=\"small\"\n                    slot=\"graphic\"\n                    class=\"absolute\"\n                  ></ha-circular-progress>`\n                : \"\"}\n              <span\n                >${entity.attributes.title ||\n                entity.attributes.friendly_name}</span\n              >\n              <span slot=\"secondary\">\n                ${this.hass.localize(\n                  \"ui.panel.config.updates.version_available\",\n                  {\n                    version_available: entity.attributes.latest_version,\n                  }\n                )}${entity.attributes.skipped_version\n                  ? `(${this.hass.localize(\"ui.panel.config.updates.skipped\")})`\n                  : \"\"}\n              </span>\n              ${!this.narrow\n                ? entity.attributes.in_progress\n                  ? html`<ha-circular-progress\n                      active\n                      size=\"small\"\n                      slot=\"meta\"\n                    ></ha-circular-progress>`\n                  : html`<ha-icon-next slot=\"meta\"></ha-icon-next>`\n                : \"\"}\n            </ha-list-item>\n          `\n        )}\n      </mwc-list>\n    `;\n  }\n\n  private _openMoreInfo(ev: MouseEvent): void {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: (ev.currentTarget as any).entity_id,\n    });\n  }\n\n  static get styles(): CSSResultGroup[] {\n    return [\n      css`\n        :host {\n          --mdc-list-vertical-padding: 0;\n        }\n        .title {\n          font-size: 16px;\n          padding: 16px;\n          padding-bottom: 0;\n        }\n        .skipped {\n          background: var(--secondary-background-color);\n        }\n        ha-icon-next {\n          color: var(--secondary-text-color);\n          height: 24px;\n          width: 24px;\n        }\n        button.show-more {\n          color: var(--primary-color);\n          text-align: left;\n          cursor: pointer;\n          background: none;\n          border-width: initial;\n          border-style: none;\n          border-color: initial;\n          border-image: initial;\n          padding: 16px;\n          font: inherit;\n        }\n        button.show-more:focus {\n          outline: none;\n          text-decoration: underline;\n        }\n        ha-list-item {\n          cursor: pointer;\n          font-size: 16px;\n        }\n        ha-circular-progress.absolute {\n          position: absolute;\n        }\n        state-badge.updating {\n          opacity: 0.5;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-updates\": HaConfigUpdates;\n  }\n}\n"],"names":[],"sourceRoot":""}