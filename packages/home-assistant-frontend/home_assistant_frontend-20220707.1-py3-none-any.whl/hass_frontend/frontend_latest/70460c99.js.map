{"version":3,"file":"70460c99.js","mappings":";;;;AAMA;;;;;;;;;;;;;ACCA;;;;;AC2DA;AACA;;;;;;;;AAlCA;AAMA;;;AAuCA;;;AAMA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AAEA;;;AAIA;;AAEA;AArEA;;;;;;;;;;;;;;;;AAgBA;;;ACLA;;AAGA;;AAEA;;;;;;;AAQA;AACA;AACA;;;;AAIA;AACA;;;;AA1BA;;;;;;;;;;;;;;;AAZA;;;ACoDA;;;AAGA;;AAGA;;;AAMA;;;AAGA;;;AAGA;;;AAIA;;;AAKA;;;AAKA;AACA;AACA;;;;AAIA;AAEA;;;AAKA;;;;;;AAUA;AACA;AACA;;;;;AAjBA;AAuBA;;;;AAMA;;;;AAMA;AAEA;;;;AAKA;;;AAKA;;AAGA;;;AAKA;;;;;AAOA;;;;AAKA;;;;AAIA;;;AAKA;AACA;;;;;AAKA;;;;;;;;AAUA;AACA;AACA;;;;AAZA;AAmBA;;AAQA;AAGA;;AAIA;;;;;AASA;AACA;;;;ACjPA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ADqBA;;;;AE8BA;;;AAGA;;;;;;AAMA;AACA;AACA;;;;;;;AAOA;AACA;AAEA;;;;AA5BA;;;;;;;;;;;;;AApBA;;;ACgDA;;AAIA;AAEA;AACA;AACA;AAGA;AACA;;;AAIA;AAEA;;AAxBA;AA+BA;AAGA;;AAGA;AAEA;AAKA;;;AAIA;AACA;;AAEA;AAEA;;AAKA;;AAKA;;;AAOA;AACA;AAEA;;AAEA;;AAEA;;;;;AAMA;AAEA;;;AAIA;;;AAKA;AACA;;;AAGA;;;;;AAOA;;;AAKA;AACA;;;AAGA;;;;;AAKA;;;AAKA;AACA;;;AAGA;;;;;AAMA;;;;;;;AASA;;;AAIA;AAEA;;AAGA;AAEA;AAEA;AAGA;;;AAIA;AACA;AAEA;;AAvMA;;AAyOA;;;;;AAKA;;;AAKA;AACA;;AAEA;AACA;;;;;AAKA;;;AAKA;AACA;;AAEA;AACA;;;;;AAKA;;;;AAMA;AACA;;AAEA;AACA;;;;;AAKA;;;;AAKA;AAGA;AACA;AACA;;;;;;AAMA;AAGA;AACA;AACA;;;;;;AAMA;AAGA;AACA;AACA;;;AAGA;;AA5TA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACdA;AACA;AACA;;;AAGA;AAEA;AACA;;AAEA;AAEA;AACA;;;;;;;;;;;;;;;;;;AAxBA","sources":["webpack://home-assistant-frontend/./src/components/ha-checkbox.ts","webpack://home-assistant-frontend/./src/components/ha-formfield.ts","webpack://home-assistant-frontend/./src/components/ha-network.ts","webpack://home-assistant-frontend/./src/panels/config/network/ha-config-network.ts","webpack://home-assistant-frontend/./src/panels/config/network/ha-config-url-form.ts","webpack://home-assistant-frontend/./src/common/string/is_ip_address.ts","webpack://home-assistant-frontend/./src/panels/config/network/supervisor-hostname.ts","webpack://home-assistant-frontend/./src/panels/config/network/supervisor-network.ts","webpack://home-assistant-frontend/./src/panels/config/network/ha-config-section-network.ts"],"sourcesContent":["import { CheckboxBase } from \"@material/mwc-checkbox/mwc-checkbox-base\";\nimport { styles } from \"@material/mwc-checkbox/mwc-checkbox.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends CheckboxBase {\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--primary-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { FormfieldBase } from \"@material/mwc-formfield/mwc-formfield-base\";\nimport { styles } from \"@material/mwc-formfield/mwc-formfield.css\";\nimport { css } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n@customElement(\"ha-formfield\")\nexport class HaFormfield extends FormfieldBase {\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      switch (input.tagName) {\n        case \"HA-CHECKBOX\":\n        case \"HA-RADIO\":\n          (input as any).checked = !(input as any).checked;\n          fireEvent(input, \"change\");\n          break;\n        default:\n          input.click();\n          break;\n      }\n    }\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host(:not([alignEnd])) ::slotted(ha-switch) {\n        margin-right: 10px;\n        margin-inline-end: 10px;\n        margin-inline-start: inline;\n      }\n      .mdc-form-field > label {\n        direction: var(--direction);\n        margin-inline-start: 0;\n        margin-inline-end: auto;\n        padding-inline-start: 4px;\n        padding-inline-end: 0;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-formfield\": HaFormfield;\n  }\n}\n","import { mdiStar } from \"@mdi/js\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  nothing,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport {\n  Adapter,\n  IPv4ConfiguredAddress,\n  IPv6ConfiguredAddress,\n  NetworkConfig,\n} from \"../data/network\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-checkbox\";\nimport type { HaCheckbox } from \"./ha-checkbox\";\nimport \"./ha-settings-row\";\nimport \"./ha-svg-icon\";\n\nconst format_addresses = (\n  addresses: IPv6ConfiguredAddress[] | IPv4ConfiguredAddress[]\n): TemplateResult =>\n  html`${addresses.map((address, i) => [\n    html`<span>${address.address}/${address.network_prefix}</span>`,\n    i < addresses.length - 1 ? \", \" : nothing,\n  ])}`;\n\nconst format_auto_detected_interfaces = (\n  adapters: Adapter[]\n): Array<TemplateResult | string> =>\n  adapters.map((adapter) =>\n    adapter.auto\n      ? html`${adapter.name}\n        (${format_addresses([...adapter.ipv4, ...adapter.ipv6])})`\n      : \"\"\n  );\n\ndeclare global {\n  interface HASSDomEvents {\n    \"network-config-changed\": { configured_adapters: string[] };\n  }\n}\n@customElement(\"ha-network\")\nexport class HaNetwork extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public networkConfig?: NetworkConfig;\n\n  @state() private _expanded?: boolean;\n\n  protected render(): TemplateResult {\n    if (this.networkConfig === undefined) {\n      return html``;\n    }\n    const configured_adapters = this.networkConfig.configured_adapters || [];\n    return html`\n      <ha-settings-row>\n        <span slot=\"prefix\">\n          <ha-checkbox\n            id=\"auto_configure\"\n            @change=${this._handleAutoConfigureCheckboxClick}\n            .checked=${!configured_adapters.length}\n            name=\"auto_configure\"\n          >\n          </ha-checkbox>\n        </span>\n        <span slot=\"heading\" data-for=\"auto_configure\"> Auto Configure </span>\n        <span slot=\"description\" data-for=\"auto_configure\">\n          Detected:\n          ${format_auto_detected_interfaces(this.networkConfig.adapters)}\n        </span>\n      </ha-settings-row>\n      ${configured_adapters.length || this._expanded\n        ? this.networkConfig.adapters.map(\n            (adapter) =>\n              html`<ha-settings-row>\n                <span slot=\"prefix\">\n                  <ha-checkbox\n                    id=${adapter.name}\n                    @change=${this._handleAdapterCheckboxClick}\n                    .checked=${configured_adapters.includes(adapter.name)}\n                    .adapter=${adapter.name}\n                    name=${adapter.name}\n                  >\n                  </ha-checkbox>\n                </span>\n                <span slot=\"heading\">\n                  Adapter: ${adapter.name}\n                  ${adapter.default\n                    ? html`<ha-svg-icon .path=${mdiStar}></ha-svg-icon>\n                        (Default)`\n                    : \"\"}\n                </span>\n                <span slot=\"description\">\n                  ${format_addresses([...adapter.ipv4, ...adapter.ipv6])}\n                </span>\n              </ha-settings-row>`\n          )\n        : \"\"}\n    `;\n  }\n\n  private _handleAutoConfigureCheckboxClick(ev: Event) {\n    const checkbox = ev.currentTarget as HaCheckbox;\n    if (this.networkConfig === undefined) {\n      return;\n    }\n\n    let configured_adapters = [...this.networkConfig.configured_adapters];\n\n    if (checkbox.checked) {\n      this._expanded = false;\n      configured_adapters = [];\n    } else {\n      this._expanded = true;\n      for (const adapter of this.networkConfig.adapters) {\n        if (adapter.default) {\n          configured_adapters = [adapter.name];\n          break;\n        }\n      }\n    }\n\n    fireEvent(this, \"network-config-changed\", {\n      configured_adapters: configured_adapters,\n    });\n  }\n\n  private _handleAdapterCheckboxClick(ev: Event) {\n    const checkbox = ev.currentTarget as HaCheckbox;\n    const adapter_name = (checkbox as any).name;\n    if (this.networkConfig === undefined) {\n      return;\n    }\n\n    const configured_adapters = [...this.networkConfig.configured_adapters];\n\n    if (checkbox.checked) {\n      configured_adapters.push(adapter_name);\n    } else {\n      const index = configured_adapters.indexOf(adapter_name, 0);\n      configured_adapters.splice(index, 1);\n    }\n\n    fireEvent(this, \"network-config-changed\", {\n      configured_adapters: configured_adapters,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n          --paper-time-input-justify-content: flex-end;\n          --settings-row-content-display: contents;\n          --settings-row-prefix-display: contents;\n        }\n\n        span[slot=\"heading\"],\n        span[slot=\"description\"] {\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-network\": HaNetwork;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-network\";\nimport \"../../../components/ha-settings-row\";\nimport { fetchNetworkInfo } from \"../../../data/hassio/network\";\nimport {\n  getNetworkConfig,\n  NetworkConfig,\n  setNetworkConfig,\n} from \"../../../data/network\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-network\")\nclass ConfigNetwork extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _networkConfig?: NetworkConfig;\n\n  @state() private _error?: { code: string; message: string };\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass.userData?.showAdvanced ||\n      !isComponentLoaded(this.hass, \"network\")\n    ) {\n      return html``;\n    }\n\n    return html`\n      <ha-card outlined header=\"Network Adapter\">\n        <div class=\"card-content\">\n          ${this._error\n            ? html`\n                <ha-alert alert-type=\"error\"\n                  >${this._error.message || this._error.code}</ha-alert\n                >\n              `\n            : \"\"}\n          <p>\n            Configure which network adapters integrations will use. Currently\n            this setting only affects multicast traffic. A restart is required\n            for these settings to apply.\n          </p>\n          <ha-network\n            @network-config-changed=${this._configChanged}\n            .hass=${this.hass}\n            .networkConfig=${this._networkConfig}\n          ></ha-network>\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._save}>\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.save_button\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (isComponentLoaded(this.hass, \"network\")) {\n      this._load();\n    }\n  }\n\n  private async _load() {\n    this._error = undefined;\n    try {\n      const coreNetwork = await getNetworkConfig(this.hass);\n      if (isComponentLoaded(this.hass, \"hassio\")) {\n        const supervisorNetwork = await fetchNetworkInfo(this.hass);\n        const interfaces = new Set(\n          supervisorNetwork.interfaces.map((int) => int.interface)\n        );\n        if (interfaces.size) {\n          coreNetwork.adapters = coreNetwork.adapters.filter((adapter) =>\n            interfaces.has(adapter.name)\n          );\n        }\n      }\n      this._networkConfig = coreNetwork;\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private async _save() {\n    this._error = undefined;\n    try {\n      await setNetworkConfig(\n        this.hass,\n        this._networkConfig?.configured_adapters || []\n      );\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private _configChanged(event: CustomEvent): void {\n    this._networkConfig = {\n      ...this._networkConfig!,\n      configured_adapters: event.detail.configured_adapters,\n    };\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n\n        .card-actions {\n          display: flex;\n          flex-direction: row-reverse;\n          justify-content: space-between;\n          align-items: center;\n        }\n      `, // row-reverse so we tab first to \"save\"\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-network\": ConfigNetwork;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { isIPAddress } from \"../../../common/string/is_ip_address\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-switch\";\nimport \"../../../components/ha-textfield\";\nimport type { HaTextField } from \"../../../components/ha-textfield\";\nimport { CloudStatus, fetchCloudStatus } from \"../../../data/cloud\";\nimport { saveCoreConfig } from \"../../../data/core\";\nimport type { PolymerChangedEvent } from \"../../../polymer-types\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-url-form\")\nclass ConfigUrlForm extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _error?: string;\n\n  @state() private _working = false;\n\n  @state() private _external_url?: string;\n\n  @state() private _internal_url?: string;\n\n  @state() private _cloudStatus?: CloudStatus | null;\n\n  @state() private _showCustomExternalUrl = false;\n\n  @state() private _showCustomInternalUrl = false;\n\n  protected render(): TemplateResult {\n    const canEdit = [\"storage\", \"default\"].includes(\n      this.hass.config.config_source\n    );\n    const disabled = this._working || !canEdit;\n\n    if (!this.hass.userData?.showAdvanced || this._cloudStatus === undefined) {\n      return html``;\n    }\n\n    const internalUrl = this._internalUrlValue;\n    const externalUrl = this._externalUrlValue;\n    let hasCloud: boolean;\n    let remoteEnabled: boolean;\n    let httpUseHttps: boolean;\n\n    if (this._cloudStatus === null) {\n      hasCloud = false;\n      remoteEnabled = false;\n      httpUseHttps = false;\n    } else {\n      httpUseHttps = this._cloudStatus.http_use_ssl;\n\n      if (this._cloudStatus.logged_in) {\n        hasCloud = true;\n        remoteEnabled =\n          this._cloudStatus.active_subscription &&\n          this._cloudStatus.prefs.remote_enabled;\n      } else {\n        hasCloud = false;\n        remoteEnabled = false;\n      }\n    }\n\n    return html`\n      <ha-card\n        outlined\n        .header=${this.hass.localize(\"ui.panel.config.url.caption\")}\n      >\n        <div class=\"card-content\">\n          ${!canEdit\n            ? html`\n                <p>\n                  ${this.hass.localize(\n                    \"ui.panel.config.core.section.core.core_config.edit_requires_storage\"\n                  )}\n                </p>\n              `\n            : \"\"}\n          ${this._error ? html`<div class=\"error\">${this._error}</div>` : \"\"}\n\n          <div class=\"description\">\n            ${this.hass.localize(\"ui.panel.config.url.description\")}\n          </div>\n\n          ${hasCloud\n            ? html`\n                <div class=\"row\">\n                  <div class=\"flex\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.url.external_url_label\"\n                    )}\n                  </div>\n                  <ha-formfield\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.url.external_use_ha_cloud\"\n                    )}\n                  >\n                    <ha-switch\n                      .disabled=${disabled}\n                      .checked=${externalUrl === null}\n                      @change=${this._toggleCloud}\n                    ></ha-switch>\n                  </ha-formfield>\n                </div>\n              `\n            : \"\"}\n          ${!this._showCustomExternalUrl\n            ? \"\"\n            : html`\n                <div class=\"row\">\n                  <div class=\"flex\">\n                    ${hasCloud\n                      ? \"\"\n                      : this.hass.localize(\n                          \"ui.panel.config.url.external_url_label\"\n                        )}\n                  </div>\n                  <ha-textfield\n                    class=\"flex\"\n                    name=\"external_url\"\n                    type=\"url\"\n                    .disabled=${disabled}\n                    .value=${externalUrl || \"\"}\n                    @change=${this._handleChange}\n                    placeholder=\"https://example.duckdns.org:8123\"\n                  >\n                  </ha-textfield>\n                </div>\n              `}\n          ${hasCloud || !isComponentLoaded(this.hass, \"cloud\")\n            ? \"\"\n            : html`\n                <div class=\"row\">\n                  <div class=\"flex\"></div>\n                  <a href=\"/config/cloud\"\n                    >${this.hass.localize(\n                      \"ui.panel.config.url.external_get_ha_cloud\"\n                    )}</a\n                  >\n                </div>\n              `}\n          ${!this._showCustomExternalUrl && hasCloud\n            ? html`\n                ${remoteEnabled\n                  ? html`\n                      <div class=\"row\">\n                        <div class=\"flex\"></div>\n                        <a href=\"/config/cloud\"\n                          >${this.hass.localize(\n                            \"ui.panel.config.url.manage_ha_cloud\"\n                          )}</a\n                        >\n                      </div>\n                    `\n                  : html`\n                      <ha-alert alert-type=\"error\">\n                        ${this.hass.localize(\n                          \"ui.panel.config.url.ha_cloud_remote_not_enabled\"\n                        )}\n                        <a href=\"/config/cloud\" slot=\"action\"\n                          ><mwc-button\n                            .label=${this.hass.localize(\n                              \"ui.panel.config.url.enable_remote\"\n                            )}\n                          ></mwc-button\n                        ></a>\n                      </ha-alert>\n                    `}\n              `\n            : \"\"}\n\n          <div class=\"row\">\n            <div class=\"flex\">\n              ${this.hass.localize(\"ui.panel.config.url.internal_url_label\")}\n            </div>\n\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.panel.config.url.internal_url_automatic\"\n              )}\n            >\n              <ha-switch\n                .checked=${internalUrl === null}\n                @change=${this._toggleInternalAutomatic}\n              ></ha-switch>\n            </ha-formfield>\n          </div>\n\n          ${!this._showCustomInternalUrl\n            ? \"\"\n            : html`\n                <div class=\"row\">\n                  <div class=\"flex\"></div>\n                  <ha-textfield\n                    class=\"flex\"\n                    name=\"internal_url\"\n                    type=\"url\"\n                    placeholder=\"http://<some IP address>:8123\"\n                    .disabled=${disabled}\n                    .value=${internalUrl || \"\"}\n                    @change=${this._handleChange}\n                  >\n                  </ha-textfield>\n                </div>\n              `}\n          ${\n            // If the user has configured a cert, show an error if\n            httpUseHttps && // there is no internal url configured\n            (!internalUrl ||\n              // the internal url does not start with https\n              !internalUrl.startsWith(\"https://\") ||\n              // the internal url points at an IP address\n              isIPAddress(new URL(internalUrl).hostname))\n              ? html`\n                  <ha-alert\n                    .alertType=${this._showCustomInternalUrl\n                      ? \"info\"\n                      : \"warning\"}\n                    .title=${this.hass.localize(\n                      \"ui.panel.config.url.intenral_url_https_error_title\"\n                    )}\n                  >\n                    ${this.hass.localize(\n                      \"ui.panel.config.url.internal_url_https_error_description\"\n                    )}\n                  </ha-alert>\n                `\n              : \"\"\n          }\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._save} .disabled=${disabled}>\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.save_button\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected override firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n\n    this._showCustomInternalUrl = this._internalUrlValue !== null;\n\n    if (isComponentLoaded(this.hass, \"cloud\")) {\n      fetchCloudStatus(this.hass).then((cloudStatus) => {\n        this._cloudStatus = cloudStatus;\n        if (cloudStatus.logged_in) {\n          this._showCustomExternalUrl = this._externalUrlValue !== null;\n        } else {\n          this._showCustomExternalUrl = true;\n        }\n      });\n    } else {\n      this._cloudStatus = null;\n      this._showCustomExternalUrl = true;\n    }\n  }\n\n  private get _internalUrlValue() {\n    return this._internal_url !== undefined\n      ? this._internal_url\n      : this.hass.config.internal_url;\n  }\n\n  private get _externalUrlValue() {\n    return this._external_url !== undefined\n      ? this._external_url\n      : this.hass.config.external_url;\n  }\n\n  private _toggleCloud(ev) {\n    this._showCustomExternalUrl = !ev.currentTarget.checked;\n  }\n\n  private _toggleInternalAutomatic(ev) {\n    this._showCustomInternalUrl = !ev.currentTarget.checked;\n  }\n\n  private _handleChange(ev: PolymerChangedEvent<string>) {\n    const target = ev.currentTarget as HaTextField;\n    this[`_${target.name}`] = target.value || null;\n  }\n\n  private async _save() {\n    this._working = true;\n    this._error = undefined;\n    try {\n      await saveCoreConfig(this.hass, {\n        external_url: this._showCustomExternalUrl\n          ? this._external_url || null\n          : null,\n        internal_url: this._showCustomInternalUrl\n          ? this._internal_url || null\n          : null,\n      });\n    } catch (err: any) {\n      this._error = err.message || err;\n    } finally {\n      this._working = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .description {\n        margin-bottom: 1em;\n      }\n      .row {\n        display: flex;\n        flex-direction: row;\n        margin: 0 -8px;\n        align-items: center;\n        padding: 8px 0;\n      }\n\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n\n      .flex {\n        flex: 1;\n      }\n\n      .row > * {\n        margin: 0 8px;\n      }\n      .error {\n        color: var(--error-color);\n      }\n\n      .card-actions {\n        text-align: right;\n      }\n\n      a {\n        color: var(--primary-color);\n        text-decoration: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-url-form\": ConfigUrlForm;\n  }\n}\n","const regexp =\n  /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/;\n\nexport const isIPAddress = (input: string): boolean => regexp.test(input);\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"@material/mwc-tab\";\nimport \"@material/mwc-tab-bar\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-header-bar\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-radio\";\nimport \"../../../components/ha-related-items\";\nimport \"../../../components/ha-settings-row\";\nimport \"../../../components/ha-textfield\";\nimport { extractApiErrorMessage } from \"../../../data/hassio/common\";\nimport {\n  changeHostOptions,\n  fetchHassioHostInfo,\n} from \"../../../data/hassio/host\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"supervisor-hostname\")\nexport class HassioHostname extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) narrow!: boolean;\n\n  @state() private _processing = false;\n\n  @state() private _hostname?: string;\n\n  protected firstUpdated() {\n    this._fetchHostInfo();\n  }\n\n  private async _fetchHostInfo() {\n    const hostInfo = await fetchHassioHostInfo(this.hass);\n    this._hostname = hostInfo.hostname;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._hostname) {\n      return html``;\n    }\n\n    return html`\n      <ha-card\n        class=\"no-padding\"\n        outlined\n        .header=${this.hass.localize(\"ui.panel.config.network.hostname.title\")}\n      >\n        <div>\n          <ha-settings-row .narrow=${this.narrow}>\n            <span slot=\"heading\">Hostname</span>\n            <span slot=\"description\"\n              >The name your instance will have on your network</span\n            >\n            <ha-textfield\n              .disabled=${this._processing}\n              .value=${this._hostname}\n              @change=${this._handleChange}\n              placeholder=\"homeassistant\"\n            >\n            </ha-textfield>\n          </ha-settings-row>\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._save} .disabled=${this._processing}>\n            ${this._processing\n              ? html`<ha-circular-progress active size=\"small\">\n                </ha-circular-progress>`\n              : this.hass.localize(\"ui.common.save\")}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private _handleChange(ev) {\n    this._hostname = ev.target.value;\n  }\n\n  private async _save() {\n    this._processing = true;\n    try {\n      await changeHostOptions(this.hass, { hostname: this._hostname });\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.network.hostname.failed_to_set_hostname\"\n        ),\n        text: extractApiErrorMessage(err),\n      });\n    } finally {\n      this._processing = false;\n    }\n  }\n\n  static styles: CSSResultGroup = css`\n    ha-textfield {\n      width: 100%;\n    }\n    .card-actions {\n      display: flex;\n      flex-direction: row-reverse;\n      justify-content: space-between;\n      align-items: center;\n    }\n    ha-settings-row {\n      border-top: none;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"supervisor-hostname\": HassioHostname;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"@material/mwc-tab\";\nimport \"@material/mwc-tab-bar\";\nimport { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { cache } from \"lit/directives/cache\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-header-bar\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-radio\";\nimport \"../../../components/ha-related-items\";\nimport { extractApiErrorMessage } from \"../../../data/hassio/common\";\nimport {\n  AccessPoints,\n  accesspointScan,\n  fetchNetworkInfo,\n  NetworkInterface,\n  updateNetworkInterface,\n  WifiConfiguration,\n} from \"../../../data/hassio/network\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../../../components/ha-card\";\n\nconst IP_VERSIONS = [\"ipv4\", \"ipv6\"];\n\n@customElement(\"supervisor-network\")\nexport class HassioNetwork extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _accessPoints?: AccessPoints;\n\n  @state() private _curTabIndex = 0;\n\n  @state() private _dirty = false;\n\n  @state() private _interface?: NetworkInterface;\n\n  @state() private _interfaces!: NetworkInterface[];\n\n  @state() private _processing = false;\n\n  @state() private _scanning = false;\n\n  @state() private _wifiConfiguration?: WifiConfiguration;\n\n  protected firstUpdated() {\n    this._fetchNetworkInfo();\n  }\n\n  private async _fetchNetworkInfo() {\n    const network = await fetchNetworkInfo(this.hass);\n    this._interfaces = network.interfaces.sort((a, b) =>\n      a.primary > b.primary ? -1 : 1\n    );\n    this._interface = { ...this._interfaces[this._curTabIndex] };\n  }\n\n  protected render(): TemplateResult {\n    if (!this._interface) {\n      return html``;\n    }\n\n    return html`\n      <ha-card\n        outlined\n        .header=${this.hass.localize(\n          \"ui.panel.config.network.supervisor.title\"\n        )}\n      >\n        ${this._interfaces.length > 1\n          ? html`<mwc-tab-bar\n              .activeIndex=${this._curTabIndex}\n              @MDCTabBar:activated=${this._handleTabActivated}\n              >${this._interfaces.map(\n                (device) =>\n                  html`<mwc-tab\n                    .id=${device.interface}\n                    .label=${device.interface}\n                  >\n                  </mwc-tab>`\n              )}\n            </mwc-tab-bar>`\n          : \"\"}\n        ${cache(this._renderTab())}\n      </ha-card>\n    `;\n  }\n\n  private _renderTab() {\n    return html`<div class=\"card-content\">\n        ${IP_VERSIONS.map((version) =>\n          this._interface![version] ? this._renderIPConfiguration(version) : \"\"\n        )}\n        ${this._interface?.type === \"wireless\"\n          ? html`\n              <ha-expansion-panel header=\"Wi-Fi\" outlined>\n                ${this._interface?.wifi?.ssid\n                  ? html`<p>\n                      ${this.hass.localize(\n                        \"ui.panel.config.network.supervisor.connected_to\",\n                        \"ssid\",\n                        this._interface?.wifi?.ssid\n                      )}\n                    </p>`\n                  : \"\"}\n                <mwc-button\n                  class=\"scan\"\n                  @click=${this._scanForAP}\n                  .disabled=${this._scanning}\n                >\n                  ${this._scanning\n                    ? html`<ha-circular-progress active size=\"small\">\n                      </ha-circular-progress>`\n                    : this.hass.localize(\n                        \"ui.panel.config.network.supervisor.scan_ap\"\n                      )}\n                </mwc-button>\n                ${this._accessPoints &&\n                this._accessPoints.accesspoints &&\n                this._accessPoints.accesspoints.length !== 0\n                  ? html`\n                      <mwc-list>\n                        ${this._accessPoints.accesspoints\n                          .filter((ap) => ap.ssid)\n                          .map(\n                            (ap) =>\n                              html`\n                                <mwc-list-item\n                                  twoline\n                                  @click=${this._selectAP}\n                                  .activated=${ap.ssid ===\n                                  this._wifiConfiguration?.ssid}\n                                  .ap=${ap}\n                                >\n                                  <span>${ap.ssid}</span>\n                                  <span slot=\"secondary\">\n                                    ${ap.mac} - Strength: ${ap.signal}\n                                  </span>\n                                </mwc-list-item>\n                              `\n                          )}\n                      </mwc-list>\n                    `\n                  : \"\"}\n                ${this._wifiConfiguration\n                  ? html`\n                      <div class=\"radio-row\">\n                        <ha-formfield\n                          .label=${this.hass.localize(\n                            \"ui.panel.config.network.supervisor.open\"\n                          )}\n                        >\n                          <ha-radio\n                            @change=${this._handleRadioValueChangedAp}\n                            .ap=${this._wifiConfiguration}\n                            value=\"open\"\n                            name=\"auth\"\n                            .checked=${this._wifiConfiguration.auth ===\n                              undefined ||\n                            this._wifiConfiguration.auth === \"open\"}\n                          >\n                          </ha-radio>\n                        </ha-formfield>\n                        <ha-formfield\n                          .label=${this.hass.localize(\n                            \"ui.panel.config.network.supervisor.wep\"\n                          )}\n                        >\n                          <ha-radio\n                            @change=${this._handleRadioValueChangedAp}\n                            .ap=${this._wifiConfiguration}\n                            value=\"wep\"\n                            name=\"auth\"\n                            .checked=${this._wifiConfiguration.auth === \"wep\"}\n                          >\n                          </ha-radio>\n                        </ha-formfield>\n                        <ha-formfield\n                          .label=${this.hass.localize(\n                            \"ui.panel.config.network.supervisor.wpa\"\n                          )}\n                        >\n                          <ha-radio\n                            @change=${this._handleRadioValueChangedAp}\n                            .ap=${this._wifiConfiguration}\n                            value=\"wpa-psk\"\n                            name=\"auth\"\n                            .checked=${this._wifiConfiguration.auth ===\n                            \"wpa-psk\"}\n                          >\n                          </ha-radio>\n                        </ha-formfield>\n                      </div>\n                      ${this._wifiConfiguration.auth === \"wpa-psk\" ||\n                      this._wifiConfiguration.auth === \"wep\"\n                        ? html`\n                            <paper-input\n                              class=\"flex-auto\"\n                              type=\"password\"\n                              id=\"psk\"\n                              label=\"Password\"\n                              version=\"wifi\"\n                              @value-changed=${this\n                                ._handleInputValueChangedWifi}\n                            >\n                            </paper-input>\n                          `\n                        : \"\"}\n                    `\n                  : \"\"}\n              </ha-expansion-panel>\n            `\n          : \"\"}\n        ${this._dirty\n          ? html`<ha-alert alert-type=\"warning\">\n              ${this.hass.localize(\n                \"ui.panel.config.network.supervisor.warning\"\n              )}\n            </ha-alert>`\n          : \"\"}\n      </div>\n      <div class=\"card-actions\">\n        <mwc-button @click=${this._updateNetwork} .disabled=${!this._dirty}>\n          ${this._processing\n            ? html`<ha-circular-progress active size=\"small\">\n              </ha-circular-progress>`\n            : this.hass.localize(\"ui.common.save\")}\n        </mwc-button>\n      </div>`;\n  }\n\n  private _selectAP(event) {\n    this._wifiConfiguration = event.currentTarget.ap;\n    this._dirty = true;\n  }\n\n  private async _scanForAP() {\n    if (!this._interface) {\n      return;\n    }\n    this._scanning = true;\n    try {\n      this._accessPoints = await accesspointScan(\n        this.hass,\n        this._interface.interface\n      );\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: \"Failed to scan for accesspoints\",\n        text: extractApiErrorMessage(err),\n      });\n    } finally {\n      this._scanning = false;\n    }\n  }\n\n  private _renderIPConfiguration(version: string) {\n    return html`\n      <ha-expansion-panel\n        .header=${`IPv${version.charAt(version.length - 1)}`}\n        outlined\n      >\n        <div class=\"radio-row\">\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.config.network.supervisor.dhcp\"\n            )}\n          >\n            <ha-radio\n              @change=${this._handleRadioValueChanged}\n              .version=${version}\n              value=\"auto\"\n              name=\"${version}method\"\n              .checked=${this._interface![version]?.method === \"auto\"}\n            >\n            </ha-radio>\n          </ha-formfield>\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.config.network.supervisor.static\"\n            )}\n          >\n            <ha-radio\n              @change=${this._handleRadioValueChanged}\n              .version=${version}\n              value=\"static\"\n              name=\"${version}method\"\n              .checked=${this._interface![version]?.method === \"static\"}\n            >\n            </ha-radio>\n          </ha-formfield>\n          <ha-formfield\n            .label=${this.hass.localize(\n              \"ui.panel.config.network.supervisor.disabled\"\n            )}\n            class=\"warning\"\n          >\n            <ha-radio\n              @change=${this._handleRadioValueChanged}\n              .version=${version}\n              value=\"disabled\"\n              name=\"${version}method\"\n              .checked=${this._interface![version]?.method === \"disabled\"}\n            >\n            </ha-radio>\n          </ha-formfield>\n        </div>\n        ${this._interface![version].method === \"static\"\n          ? html`\n              <paper-input\n                class=\"flex-auto\"\n                id=\"address\"\n                .label=${this.hass.localize(\n                  \"ui.panel.config.network.supervisor.ip_netmask\"\n                )}\n                .version=${version}\n                .value=${this._toString(this._interface![version].address)}\n                @value-changed=${this._handleInputValueChanged}\n              >\n              </paper-input>\n              <paper-input\n                class=\"flex-auto\"\n                id=\"gateway\"\n                .label=${this.hass.localize(\n                  \"ui.panel.config.network.supervisor.gateway\"\n                )}\n                .version=${version}\n                .value=${this._interface![version].gateway}\n                @value-changed=${this._handleInputValueChanged}\n              >\n              </paper-input>\n              <paper-input\n                class=\"flex-auto\"\n                id=\"nameservers\"\n                .label=${this.hass.localize(\n                  \"ui.panel.config.network.supervisor.dns_servers\"\n                )}\n                .version=${version}\n                .value=${this._toString(this._interface![version].nameservers)}\n                @value-changed=${this._handleInputValueChanged}\n              >\n              </paper-input>\n            `\n          : \"\"}\n      </ha-expansion-panel>\n    `;\n  }\n\n  _toArray(data: string | string[]): string[] {\n    if (Array.isArray(data)) {\n      if (data && typeof data[0] === \"string\") {\n        data = data[0];\n      }\n    }\n    if (!data) {\n      return [];\n    }\n    if (typeof data === \"string\") {\n      return data.replace(/ /g, \"\").split(\",\");\n    }\n    return data;\n  }\n\n  _toString(data: string | string[]): string {\n    if (!data) {\n      return \"\";\n    }\n    if (Array.isArray(data)) {\n      return data.join(\", \");\n    }\n    return data;\n  }\n\n  private async _updateNetwork() {\n    this._processing = true;\n    let interfaceOptions: Partial<NetworkInterface> = {};\n\n    IP_VERSIONS.forEach((version) => {\n      interfaceOptions[version] = {\n        method: this._interface![version]?.method || \"auto\",\n      };\n      if (this._interface![version]?.method === \"static\") {\n        interfaceOptions[version] = {\n          ...interfaceOptions[version],\n          address: this._toArray(this._interface![version]?.address),\n          gateway: this._interface![version]?.gateway,\n          nameservers: this._toArray(this._interface![version]?.nameservers),\n        };\n      }\n    });\n\n    if (this._wifiConfiguration) {\n      interfaceOptions = {\n        ...interfaceOptions,\n        wifi: {\n          ssid: this._wifiConfiguration.ssid,\n          mode: this._wifiConfiguration.mode,\n          auth: this._wifiConfiguration.auth || \"open\",\n        },\n      };\n      if (interfaceOptions.wifi!.auth !== \"open\") {\n        interfaceOptions.wifi = {\n          ...interfaceOptions.wifi,\n          psk: this._wifiConfiguration.psk,\n        };\n      }\n    }\n\n    interfaceOptions.enabled =\n      this._wifiConfiguration !== undefined ||\n      interfaceOptions.ipv4?.method !== \"disabled\" ||\n      interfaceOptions.ipv6?.method !== \"disabled\";\n\n    try {\n      await updateNetworkInterface(\n        this.hass,\n        this._interface!.interface,\n        interfaceOptions\n      );\n      this._dirty = false;\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.network.supervisor.failed_to_change\"\n        ),\n        text: extractApiErrorMessage(err),\n      });\n    } finally {\n      this._processing = false;\n    }\n  }\n\n  private async _handleTabActivated(ev: CustomEvent): Promise<void> {\n    if (this._dirty) {\n      const confirm = await showConfirmationDialog(this, {\n        text: this.hass.localize(\"ui.panel.config.network.supervisor.unsaved\"),\n        confirmText: this.hass.localize(\"ui.common.yes\"),\n        dismissText: this.hass.localize(\"ui.common.no\"),\n      });\n      if (!confirm) {\n        this.requestUpdate(\"_interface\");\n        return;\n      }\n    }\n    this._curTabIndex = ev.detail.index;\n    this._interface = { ...this._interfaces[ev.detail.index] };\n  }\n\n  private _handleRadioValueChanged(ev: CustomEvent): void {\n    const value = (ev.target as any).value as \"disabled\" | \"auto\" | \"static\";\n    const version = (ev.target as any).version as \"ipv4\" | \"ipv6\";\n\n    if (\n      !value ||\n      !this._interface ||\n      this._interface[version]!.method === value\n    ) {\n      return;\n    }\n    this._dirty = true;\n\n    this._interface[version]!.method = value;\n    this.requestUpdate(\"_interface\");\n  }\n\n  private _handleRadioValueChangedAp(ev: CustomEvent): void {\n    const value = (ev.target as any).value as string as\n      | \"open\"\n      | \"wep\"\n      | \"wpa-psk\";\n    this._wifiConfiguration!.auth = value;\n    this._dirty = true;\n    this.requestUpdate(\"_wifiConfiguration\");\n  }\n\n  private _handleInputValueChanged(ev: CustomEvent): void {\n    const value: string | null | undefined = (ev.target as PaperInputElement)\n      .value;\n    const version = (ev.target as any).version as \"ipv4\" | \"ipv6\";\n    const id = (ev.target as PaperInputElement).id;\n\n    if (\n      !value ||\n      !this._interface ||\n      this._toString(this._interface[version]![id]) === this._toString(value)\n    ) {\n      return;\n    }\n\n    this._dirty = true;\n    this._interface[version]![id] = value;\n  }\n\n  private _handleInputValueChangedWifi(ev: CustomEvent): void {\n    const value: string | null | undefined = (ev.target as PaperInputElement)\n      .value;\n    const id = (ev.target as PaperInputElement).id;\n\n    if (\n      !value ||\n      !this._wifiConfiguration ||\n      this._wifiConfiguration![id] === value\n    ) {\n      return;\n    }\n    this._dirty = true;\n    this._wifiConfiguration![id] = value;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        ha-header-bar {\n          --mdc-theme-on-primary: var(--primary-text-color);\n          --mdc-theme-primary: var(--mdc-theme-surface);\n          flex-shrink: 0;\n        }\n\n        mwc-tab-bar {\n          border-bottom: 1px solid\n            var(--mdc-dialog-scroll-divider-color, rgba(0, 0, 0, 0.12));\n          margin-bottom: 24px;\n        }\n\n        .content {\n          display: block;\n          padding: 20px 24px;\n        }\n\n        mwc-button.warning {\n          --mdc-theme-primary: var(--error-color);\n        }\n\n        mwc-button.scan {\n          margin-left: 8px;\n        }\n\n        :host([rtl]) app-toolbar {\n          direction: rtl;\n          text-align: right;\n        }\n        ha-expansion-panel {\n          --expansion-panel-summary-padding: 0 16px;\n          margin: 4px 0;\n        }\n        paper-input {\n          padding: 0 14px;\n        }\n        mwc-list-item {\n          --mdc-list-side-padding: 10px;\n        }\n        .card-actions {\n          display: flex;\n          flex-direction: row-reverse;\n          justify-content: space-between;\n          align-items: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"supervisor-network\": HassioNetwork;\n  }\n}\n","import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../layouts/hass-subpage\";\nimport type { HomeAssistant, Route } from \"../../../types\";\nimport \"./ha-config-network\";\nimport \"./ha-config-url-form\";\nimport \"./supervisor-hostname\";\nimport \"./supervisor-network\";\n\n@customElement(\"ha-config-section-network\")\nclass HaConfigSectionNetwork extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.hass.localize(\"ui.panel.config.network.caption\")}\n      >\n        <div class=\"content\">\n          ${isComponentLoaded(this.hass, \"hassio\")\n            ? html`<supervisor-hostname\n                  .hass=${this.hass}\n                  .narrow=${this.narrow}\n                ></supervisor-hostname>\n                <supervisor-network .hass=${this.hass}></supervisor-network>`\n            : \"\"}\n          <ha-config-url-form .hass=${this.hass}></ha-config-url-form>\n          <ha-config-network .hass=${this.hass}></ha-config-network>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  static styles = css`\n    .content {\n      padding: 28px 20px 0;\n      max-width: 1040px;\n      margin: 0 auto;\n    }\n    supervisor-hostname,\n    supervisor-network,\n    ha-config-url-form,\n    ha-config-network {\n      display: block;\n      margin: 0 auto;\n      margin-bottom: 24px;\n      max-width: 600px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-section-network\": HaConfigSectionNetwork;\n  }\n}\n"],"names":[],"sourceRoot":""}