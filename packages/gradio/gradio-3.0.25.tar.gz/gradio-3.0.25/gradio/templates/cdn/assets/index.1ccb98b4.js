import { S as SvelteComponent, i as init, s as safe_not_equal, U as create_slot, f as element, b as attr, t as toggle_class, c as insert, P as update_slot_base, Q as get_all_dirty_from_scope, R as get_slot_changes, v as transition_in, w as transition_out, e as detach } from './index.b7e8b606.js';
import { c as create_classes } from './styles.db46e346.js';

/* src/components/Row/Row.svelte generated by Svelte v3.47.0 */

function create_fragment(ctx) {
	let div;
	let div_class_value;
	let current;
	const default_slot_template = /*#slots*/ ctx[5].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[4], null);

	return {
		c() {
			div = element("div");
			if (default_slot) default_slot.c();
			attr(div, "class", div_class_value = "flex md:flex-row gr-gap gr-form-gap row w-full " + create_classes(/*style*/ ctx[0]));
			attr(div, "id", /*elem_id*/ ctx[1]);
			toggle_class(div, "mobile-row", /*style*/ ctx[0].mobile_collapse === false);
			toggle_class(div, "unequal-height", /*style*/ ctx[0].equal_height === false);
			toggle_class(div, "flex-col", /*style*/ ctx[0].mobile_collapse);
			toggle_class(div, "!hidden", !/*visible*/ ctx[2]);
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (default_slot) {
				default_slot.m(div, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 16)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[4],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[4])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[4], dirty, null),
						null
					);
				}
			}

			if (!current || dirty & /*style*/ 1 && div_class_value !== (div_class_value = "flex md:flex-row gr-gap gr-form-gap row w-full " + create_classes(/*style*/ ctx[0]))) {
				attr(div, "class", div_class_value);
			}

			if (!current || dirty & /*elem_id*/ 2) {
				attr(div, "id", /*elem_id*/ ctx[1]);
			}

			if (dirty & /*style, style*/ 1) {
				toggle_class(div, "mobile-row", /*style*/ ctx[0].mobile_collapse === false);
			}

			if (dirty & /*style, style*/ 1) {
				toggle_class(div, "unequal-height", /*style*/ ctx[0].equal_height === false);
			}

			if (dirty & /*style, style*/ 1) {
				toggle_class(div, "flex-col", /*style*/ ctx[0].mobile_collapse);
			}

			if (dirty & /*style, visible*/ 5) {
				toggle_class(div, "!hidden", !/*visible*/ ctx[2]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	let { parent = null } = $$props;
	let { style = {} } = $$props;
	let { elem_id } = $$props;
	let { visible = true } = $$props;

	if (typeof style.mobile_collapse !== "boolean") {
		style.mobile_collapse = true;
	}

	$$self.$$set = $$props => {
		if ('parent' in $$props) $$invalidate(3, parent = $$props.parent);
		if ('style' in $$props) $$invalidate(0, style = $$props.style);
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('$$scope' in $$props) $$invalidate(4, $$scope = $$props.$$scope);
	};

	return [style, elem_id, visible, parent, $$scope, slots];
}

class Row extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			parent: 3,
			style: 0,
			elem_id: 1,
			visible: 2
		});
	}
}

var Row$1 = Row;

const modes = ["static"];

export { Row$1 as Component, modes };
