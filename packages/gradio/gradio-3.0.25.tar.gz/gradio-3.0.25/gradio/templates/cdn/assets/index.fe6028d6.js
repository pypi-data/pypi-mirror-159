import { S as SvelteComponent, i as init, s as safe_not_equal, D as binding_callbacks, J as bind, q as create_component, u as mount_component, G as add_flush_callback, v as transition_in, w as transition_out, x as destroy_component, A as createEventDispatcher, U as create_slot, P as update_slot_base, Q as get_all_dirty_from_scope, R as get_slot_changes, F as bubble } from './index.b7e8b606.js';
import { T as Tabs } from './Tabs.09378a31.js';

/* src/components/Tabs/Tabs.svelte generated by Svelte v3.47.0 */

function create_default_slot(ctx) {
	let current;
	const default_slot_template = /*#slots*/ ctx[3].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[6], null);

	return {
		c() {
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 64)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[6],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[6])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[6], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment(ctx) {
	let tabs;
	let updating_selected;
	let current;

	function tabs_selected_binding(value) {
		/*tabs_selected_binding*/ ctx[4](value);
	}

	let tabs_props = {
		elem_id: /*elem_id*/ ctx[1],
		visible: /*visible*/ ctx[2],
		$$slots: { default: [create_default_slot] },
		$$scope: { ctx }
	};

	if (/*selected*/ ctx[0] !== void 0) {
		tabs_props.selected = /*selected*/ ctx[0];
	}

	tabs = new Tabs({ props: tabs_props });
	binding_callbacks.push(() => bind(tabs, 'selected', tabs_selected_binding));
	tabs.$on("change", /*change_handler*/ ctx[5]);

	return {
		c() {
			create_component(tabs.$$.fragment);
		},
		m(target, anchor) {
			mount_component(tabs, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const tabs_changes = {};
			if (dirty & /*elem_id*/ 2) tabs_changes.elem_id = /*elem_id*/ ctx[1];
			if (dirty & /*visible*/ 4) tabs_changes.visible = /*visible*/ ctx[2];

			if (dirty & /*$$scope*/ 64) {
				tabs_changes.$$scope = { dirty, ctx };
			}

			if (!updating_selected && dirty & /*selected*/ 1) {
				updating_selected = true;
				tabs_changes.selected = /*selected*/ ctx[0];
				add_flush_callback(() => updating_selected = false);
			}

			tabs.$set(tabs_changes);
		},
		i(local) {
			if (current) return;
			transition_in(tabs.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(tabs.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(tabs, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	const dispatch = createEventDispatcher();
	let { elem_id = "" } = $$props;
	let { visible = true } = $$props;
	let { selected } = $$props;

	function tabs_selected_binding(value) {
		selected = value;
		$$invalidate(0, selected);
	}

	function change_handler(event) {
		bubble.call(this, $$self, event);
	}

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('visible' in $$props) $$invalidate(2, visible = $$props.visible);
		if ('selected' in $$props) $$invalidate(0, selected = $$props.selected);
		if ('$$scope' in $$props) $$invalidate(6, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selected*/ 1) {
			dispatch("prop_change", { selected });
		}
	};

	return [
		selected,
		elem_id,
		visible,
		slots,
		tabs_selected_binding,
		change_handler,
		$$scope
	];
}

class Tabs_1 extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { elem_id: 1, visible: 2, selected: 0 });
	}
}

var Tabs_1$1 = Tabs_1;

const modes = ["static"];

export { Tabs_1$1 as Component, modes };
