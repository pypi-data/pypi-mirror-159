# coding: utf-8

"""
    Insights Service API -test

    ---  ## Introduction to PlotRisk  PlotRisk is a module, which ease to create plot for the given area of interest and also   facilitate to check satellite indices, weather and yield data.    **Note**``  Indices, Weather and Yield data can be accessed based on features & subscriptions user has opted while onborading company.  ``    ### Important Definitions    **Plot** - A piece of land, represented by geojson structure i.e. Polygon, Multipolygon or a circle.    **Satellite metrics** - Satellite insights for the plots.    **Yield** - Yield mapping refers to the process of collecting georeferenced data on crop yield and characteristics, such as moisture content, while the crop is being harvested with an onboard yield monitor.    **Weather** - Weather data provides information about the weather and climate of a plot.    **GDD** - GDD (_Cumulative growing degree days_) is an index calculated from temperature data and is used to estimate the time needed for a crop or other organisms to reach a certain stage of development.      ### Prerequisites    1. Users who have already onboarded onto **SMARTFARM_PLUS**, enabled **PlotRisk** feature for atleast few plots will be able  to use these APIs.  ---  ## Resources  A resource is an entity that has a set of exposed operations. The entity can represent an actual object (account, users..) or a set of logical operations collated together. It is up to the specification user to decide whether sub-resources should be referred to as part of their main resource or as a resource of their own. For example, assume the following URL set:     ```    /users         -GET                   POST                    /users/{id}    -GET                   PATCH                   DELETE   ```  For more details, see [CRUD Operations](https://docs.microsoft.com/en-us/iis-administration/api/crud) to learn more about it.    ---  ## Trying the API  You can use [Swagger UI](https://swagger.io/tools/swagger-ui/) or any third party client such as [Postman](https://www.postman.com/), [cURL](https://curl.se/) etc. to test the REST APIs.    **Swagger UI**    **Step 1.** Generate access tokens using **/token** resource      **Info** : ``If you are a SMARTFARM_PLUS user, you can request for tokens using tenant,username,password  ``    **Step 2.** Copy **_access_token_** from **Step 1**, then click on **Authorize** button and paste the token.    **Step 3.** Select an API resource and click on **_Try it out_**.    **Step 4.** Fill the headers such as _**TenantType**_, _**OrgId**_ & _**X-Api-Key**_.    **Info** :        TenantType is SF_PLUS_API, if user is onboarded onto SMARTFARM_PLUS platform            X-Api-Key can be obtained from Step 1        OrgId can be sf_plus_<tenant>. For example if tenant name is test, OrgId can be sf_plus_test  ``    **Step 5.**  Query parameters are optional. It filters result based on provided parameter value.  ```   e.g.   {           \"size\": 300,           \"page\": 0,          }             e.g.   {          }            ```   **Step 6.** Click on **Execute**    **Curl**  ```  curl -X 'GET' \\  'http://localhost:8085/api/v1/crops' \\  -H 'accept: application/json' \\  -H 'TenantType: SMARTRISK' \\  -H 'orgId: test' \\  -H 'X-Api-Key: qwjokooopppp' \\  -H 'Authorization: Bearer jklkopalkddlplplllllllllll2340k'  ```  Using a graphical tool such as Postman, it is possible to import the API specifications directly:    - Download the API specification by clicking the **swagger.json** hypelink at top of this document  - Import the JSON specification in the graphical tool of your choice.  - In *Postman*, you can click the import button at the top    ---  ## Authentication  The API authentication process validates the identity of the client attempting to make a connection by using an authentication protocol.  **Access Token** is required to access PlotRisk APIs & same can be generated by following API on passing valid request payload (see Token API)  ```  POST   /tokens  ```    For more details, see [Authentication and Authorization](https://swagger.io/docs/specification/authentication/).    ---  ## Errors  The REST API reports errors by returning an appropriate HTTP response code, for example 404 (Not Found), and a JSON response. Any HTTP response code that is not in the range 200 - 299 is considered an error.    For more details on HTTP Status code, see [HTTP Status Codes](https://restfulapi.net/http-status-codes/)   # noqa: E501

    OpenAPI spec version: v1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from insights_python_client.api_client import ApiClient


class MetricsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def list_all2(self, tenant_type, x_api_key, **kwargs):  # noqa: E501
        """Get satellite metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all2(tenant_type, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_type: TenantType is an identifier to track API usage. Valid input : 'SF_PLUS_API' (required)
        :param str x_api_key: Security key to grant access to APIs (required)
        :param str org_id: OrgId represents unique Id for a company or entity
        :param int page: Page represents page no. in a paginated response.Page starts from 0, valid page can be zero or a positive number.
        :param int size: Size represents the number of records that are displayed when a page loads,it can be between 10 to 300. Default size is 50.
        :param str sort_by: Sort the result based on given field/fields in natural sorting order (ASC). Maximum 2 fields are allowed.
        :param str order_by: Order the result in ascending or descending format. Default order is 'ASC'
        :param str ids: Id is the unique identifier for each record, e.g. ids= 4d35861 or 4d35861,61e6c83
        :param str boundary_ids: Unique identifier for plot, e.g. boundaryIds = 4d35861
        :param str captured_date_time: Indicates timestamp when satellite insights processed, e.g. date = 2021-12-23T00:00:00Z
        :param str min_cloud_coverage: Cloud coverage refers the fraction of sky covered with clouds, filters record where cloudCoverge >= minCloudCoverage
        :param str max_cloud_coverage: Cloud coverage refers the fraction of sky covered with clouds, filters record where cloudCoverge <= maxCloudCoverage
        :param list select: Select specific field or fields to return as part of result, e.g select = fieldName 
        :return: SatelliteMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_all2_with_http_info(tenant_type, x_api_key, **kwargs)  # noqa: E501
        else:
            (data) = self.list_all2_with_http_info(tenant_type, x_api_key, **kwargs)  # noqa: E501
            return data

    def list_all2_with_http_info(self, tenant_type, x_api_key, **kwargs):  # noqa: E501
        """Get satellite metrics  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_all2_with_http_info(tenant_type, x_api_key, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str tenant_type: TenantType is an identifier to track API usage. Valid input : 'SF_PLUS_API' (required)
        :param str x_api_key: Security key to grant access to APIs (required)
        :param str org_id: OrgId represents unique Id for a company or entity
        :param int page: Page represents page no. in a paginated response.Page starts from 0, valid page can be zero or a positive number.
        :param int size: Size represents the number of records that are displayed when a page loads,it can be between 10 to 300. Default size is 50.
        :param str sort_by: Sort the result based on given field/fields in natural sorting order (ASC). Maximum 2 fields are allowed.
        :param str order_by: Order the result in ascending or descending format. Default order is 'ASC'
        :param str ids: Id is the unique identifier for each record, e.g. ids= 4d35861 or 4d35861,61e6c83
        :param str boundary_ids: Unique identifier for plot, e.g. boundaryIds = 4d35861
        :param str captured_date_time: Indicates timestamp when satellite insights processed, e.g. date = 2021-12-23T00:00:00Z
        :param str min_cloud_coverage: Cloud coverage refers the fraction of sky covered with clouds, filters record where cloudCoverge >= minCloudCoverage
        :param str max_cloud_coverage: Cloud coverage refers the fraction of sky covered with clouds, filters record where cloudCoverge <= maxCloudCoverage
        :param list select: Select specific field or fields to return as part of result, e.g select = fieldName 
        :return: SatelliteMetricsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tenant_type', 'x_api_key', 'org_id', 'page', 'size', 'sort_by', 'order_by', 'ids', 'boundary_ids', 'captured_date_time', 'min_cloud_coverage', 'max_cloud_coverage', 'select']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_all2" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tenant_type' is set
        if ('tenant_type' not in params or
                params['tenant_type'] is None):
            raise ValueError("Missing the required parameter `tenant_type` when calling `list_all2`")  # noqa: E501
        # verify the required parameter 'x_api_key' is set
        if ('x_api_key' not in params or
                params['x_api_key'] is None):
            raise ValueError("Missing the required parameter `x_api_key` when calling `list_all2`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'size' in params:
            query_params.append(('size', params['size']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('orderBy', params['order_by']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
        if 'boundary_ids' in params:
            query_params.append(('boundaryIds', params['boundary_ids']))  # noqa: E501
        if 'captured_date_time' in params:
            query_params.append(('capturedDateTime', params['captured_date_time']))  # noqa: E501
        if 'min_cloud_coverage' in params:
            query_params.append(('minCloudCoverage', params['min_cloud_coverage']))  # noqa: E501
        if 'max_cloud_coverage' in params:
            query_params.append(('maxCloudCoverage', params['max_cloud_coverage']))  # noqa: E501
        if 'select' in params:
            query_params.append(('select', params['select']))  # noqa: E501

        header_params = {}
        if 'tenant_type' in params:
            header_params['Tenant-Type'] = params['tenant_type']  # noqa: E501
        if 'org_id' in params:
            header_params['Org-Id'] = params['org_id']  # noqa: E501
        if 'x_api_key' in params:
            header_params['X-Api-Key'] = params['x_api_key']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/satellite', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, object)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
