# Vagrantfile generator
# Adrian Ramos
# https://github.com/aramcap/vagrantgen

Vagrant.configure("2") do |config|
    config.vm.synced_folder ".", "/vagrant", disabled: true

{% for project in projects %}
{% for vm in project['vms'] %}
    config.vm.define "{{ project['projectname'] }}{{ vm['name'] }}" do |node|
        node.vm.hostname = "{{ project['projectname'] }}{{ vm['name'] }}"
{% if project['provider'] == 'libvirt' %}
        node.vm.box = "{{ vm['box'] }}"
        node.vm.provider "libvirt" do |provider|
            provider.uri = 'qemu:///system'
            provider.qemu_use_session = false
            provider.driver = 'kvm'
            provider.memory = "{{ vm['mem'] }}"
            provider.cpus = "{{ vm['cpu'] }}"
{% if vm.disks %}
{% for disk in vm['disks'] %}   
            provider.storage :file, :size => '{{ disk['size'] }}', :path => '{{ project['projectname'] }}{{ vm['name'] }}-{{ disk['name'] }}'
{% endfor %}
{% endif %}
        end
{% elif project['provider'] == 'virtualbox' %}
        node.vm.box = "{{ vm['box'] }}"
        node.vm.provider "virtualbox" do |provider|
            provider.memory = "{{ vm['mem'] }}"
            provider.cpus = "{{ vm['cpu'] }}"
{% if vm.disks %}
            unless File.exist?("{{ vm.disks[0]['name'] }}")
                provider.customize ["storagectl", :id,  "--name", "SATA", "--add", "sata"]
            end
{% for disk in vm['disks'] %}
            unless File.exist?("{{ disk['name'] }}")
                provider.customize ["createhd", "--filename", "{{ disk['name'] }}", "--size", {{ disk['size'] }} * 1024]
            end
            provider.customize ["storageattach", :id,  "--storagectl", "SATA", "--port", {{ loop.index }}, "--type", "hdd", "--medium", "{{ disk['name'] }}"]
{% endfor %}
{% endif %}
        end
{% elif project['provider'] == 'docker' %}
        node.ssh.username = "vagrant"
        node.ssh.password = "vagrant"
        node.vm.provider "docker" do |provider|
            provider.image = "{{ vm['box'] }}"
            provider.has_ssh = true
{% if vm.ports %}
            provider.ports = "{{ vm['ports'] }}"
{% endif %}
        end
{% else %}
        fail Vagrant::Errors::VagrantError.new, "Provider '{{ project['provider'] }}' unknown or not configured in VF_generator"
{% endif %}
{% if vm.ssh_guest_port %}
        node.ssh.guest_port = {{ vm['ssh_guest_port'] }}
        node.vm.network "forwarded_port", guest: {{ vm['ssh_guest_port'] }}, host: {{ vm['ssh_guest_port'] }}
{% endif %}
{% if vm.net %}
{% for net in vm['net'] %}
{% if net['network'] == 'private_network' %}
        node.vm.network "private_network", ip: "{{ net['ip'] }}"
{% elif net['network'] == 'public_network' %}
{% if net.ip %}
        node.vm.network "public_network", type: "bridge", dev: "{{ net['dev'] }}",  mode: "bridge", ip: "{{ net['ip'] }}"
{% else %}
        node.vm.network "public_network", type: "bridge", dev: "{{ net['dev'] }}",  mode: "bridge"
{% endif %}
{% elif net['network'] == 'forwarded_port' %}
{% if net.host_ip %}
        node.vm.network "forwarded_port", guest: {{ net['guest'] }}, host: {{ net['host'] }}, host_ip: "{{ net['host_ip'] }}"
{% else %}
        node.vm.network "forwarded_port", guest: {{ net['guest'] }}, host: {{ net['host'] }}
{% endif %}
{% else %}
        fail Vagrant::Errors::VagrantError.new, "Network '{{ net['network'] }}' unknown or not configured in VF_generator"
{% endif %}
{% endfor %}
{% endif %}
{% if vm.provision %}
{% for provision in vm['provision'] %}
{% if provision['provisioner'] == 'shell-inline' %}
        node.vm.provision "shell", inline: "{{ provision['payload'] }}"
{% elif provision['provisioner'] == 'shell-external' %}
        node.vm.provision "shell", path: "{{ provision['payload'] }}"
{% elif provision['provisioner'] == 'ansible' %}
        node.vm.provision "ansible" do |ansible|
            ansible.compatibility_mode = "2.0"
            ansible.playbook = "{{ provision['payload'] }}"
{% if project['provider'] == 'docker' %}
            ansible.inventory_path = "inventory"
{% endif %}
        end
{% else %}
        fail Vagrant::Errors::VagrantError.new, "Provisioner '{{ provision['provisioner'] }}' unknown or not configured in VF_generator"
{% endif %}
{% endfor %}
{% endif %}
    end
{% endfor %}
{% endfor %}
end
