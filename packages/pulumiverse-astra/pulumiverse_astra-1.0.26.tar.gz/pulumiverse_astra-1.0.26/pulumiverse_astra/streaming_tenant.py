# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['StreamingTenantArgs', 'StreamingTenant']

@pulumi.input_type
class StreamingTenantArgs:
    def __init__(__self__, *,
                 cloud_provider: pulumi.Input[str],
                 region: pulumi.Input[str],
                 tenant_name: pulumi.Input[str],
                 topic: pulumi.Input[str],
                 user_email: pulumi.Input[str]):
        """
        The set of arguments for constructing a StreamingTenant resource.
        :param pulumi.Input[str] cloud_provider: Cloud provider
        :param pulumi.Input[str] region: cloud region
        :param pulumi.Input[str] tenant_name: Streaming tenant name.
        :param pulumi.Input[str] topic: Streaming tenant topic.
        :param pulumi.Input[str] user_email: User email for tenant.
        """
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "tenant_name", tenant_name)
        pulumi.set(__self__, "topic", topic)
        pulumi.set(__self__, "user_email", user_email)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Input[str]:
        """
        Cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: pulumi.Input[str]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        cloud region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> pulumi.Input[str]:
        """
        Streaming tenant name.
        """
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "tenant_name", value)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        """
        Streaming tenant topic.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> pulumi.Input[str]:
        """
        User email for tenant.
        """
        return pulumi.get(self, "user_email")

    @user_email.setter
    def user_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "user_email", value)


@pulumi.input_type
class _StreamingTenantState:
    def __init__(__self__, *,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 user_email: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StreamingTenant resources.
        :param pulumi.Input[str] cloud_provider: Cloud provider
        :param pulumi.Input[str] region: cloud region
        :param pulumi.Input[str] tenant_name: Streaming tenant name.
        :param pulumi.Input[str] topic: Streaming tenant topic.
        :param pulumi.Input[str] user_email: User email for tenant.
        """
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if tenant_name is not None:
            pulumi.set(__self__, "tenant_name", tenant_name)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if user_email is not None:
            pulumi.set(__self__, "user_email", user_email)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[str]]:
        """
        Cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cloud_provider", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        """
        cloud region
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> Optional[pulumi.Input[str]]:
        """
        Streaming tenant name.
        """
        return pulumi.get(self, "tenant_name")

    @tenant_name.setter
    def tenant_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_name", value)

    @property
    @pulumi.getter
    def topic(self) -> Optional[pulumi.Input[str]]:
        """
        Streaming tenant topic.
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> Optional[pulumi.Input[str]]:
        """
        User email for tenant.
        """
        return pulumi.get(self, "user_email")

    @user_email.setter
    def user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "user_email", value)


class StreamingTenant(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 user_email: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        `StreamingTenant` creates an Astra Streaming tenant.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_astra as astra

        streaming_tenant_1 = astra.StreamingTenant("streamingTenant-1",
            cloud_provider="gcp",
            region="useast-4",
            tenant_name="terraformtest",
            topic="terraformtest",
            user_email="seb@datastax.com")
        ```

        ## Import

        ```sh
         $ pulumi import astra:index/streamingTenant:StreamingTenant example tenant_name
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_provider: Cloud provider
        :param pulumi.Input[str] region: cloud region
        :param pulumi.Input[str] tenant_name: Streaming tenant name.
        :param pulumi.Input[str] topic: Streaming tenant topic.
        :param pulumi.Input[str] user_email: User email for tenant.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StreamingTenantArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        `StreamingTenant` creates an Astra Streaming tenant.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_astra as astra

        streaming_tenant_1 = astra.StreamingTenant("streamingTenant-1",
            cloud_provider="gcp",
            region="useast-4",
            tenant_name="terraformtest",
            topic="terraformtest",
            user_email="seb@datastax.com")
        ```

        ## Import

        ```sh
         $ pulumi import astra:index/streamingTenant:StreamingTenant example tenant_name
        ```

        :param str resource_name: The name of the resource.
        :param StreamingTenantArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StreamingTenantArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cloud_provider: Optional[pulumi.Input[str]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 tenant_name: Optional[pulumi.Input[str]] = None,
                 topic: Optional[pulumi.Input[str]] = None,
                 user_email: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.plugin_download_url is None:
            opts.plugin_download_url = _utilities.get_plugin_download_url()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StreamingTenantArgs.__new__(StreamingTenantArgs)

            if cloud_provider is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_provider'")
            __props__.__dict__["cloud_provider"] = cloud_provider
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            if tenant_name is None and not opts.urn:
                raise TypeError("Missing required property 'tenant_name'")
            __props__.__dict__["tenant_name"] = tenant_name
            if topic is None and not opts.urn:
                raise TypeError("Missing required property 'topic'")
            __props__.__dict__["topic"] = topic
            if user_email is None and not opts.urn:
                raise TypeError("Missing required property 'user_email'")
            __props__.__dict__["user_email"] = user_email
        super(StreamingTenant, __self__).__init__(
            'astra:index/streamingTenant:StreamingTenant',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cloud_provider: Optional[pulumi.Input[str]] = None,
            region: Optional[pulumi.Input[str]] = None,
            tenant_name: Optional[pulumi.Input[str]] = None,
            topic: Optional[pulumi.Input[str]] = None,
            user_email: Optional[pulumi.Input[str]] = None) -> 'StreamingTenant':
        """
        Get an existing StreamingTenant resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cloud_provider: Cloud provider
        :param pulumi.Input[str] region: cloud region
        :param pulumi.Input[str] tenant_name: Streaming tenant name.
        :param pulumi.Input[str] topic: Streaming tenant topic.
        :param pulumi.Input[str] user_email: User email for tenant.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StreamingTenantState.__new__(_StreamingTenantState)

        __props__.__dict__["cloud_provider"] = cloud_provider
        __props__.__dict__["region"] = region
        __props__.__dict__["tenant_name"] = tenant_name
        __props__.__dict__["topic"] = topic
        __props__.__dict__["user_email"] = user_email
        return StreamingTenant(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Output[str]:
        """
        Cloud provider
        """
        return pulumi.get(self, "cloud_provider")

    @property
    @pulumi.getter
    def region(self) -> pulumi.Output[str]:
        """
        cloud region
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="tenantName")
    def tenant_name(self) -> pulumi.Output[str]:
        """
        Streaming tenant name.
        """
        return pulumi.get(self, "tenant_name")

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Output[str]:
        """
        Streaming tenant topic.
        """
        return pulumi.get(self, "topic")

    @property
    @pulumi.getter(name="userEmail")
    def user_email(self) -> pulumi.Output[str]:
        """
        User email for tenant.
        """
        return pulumi.get(self, "user_email")

