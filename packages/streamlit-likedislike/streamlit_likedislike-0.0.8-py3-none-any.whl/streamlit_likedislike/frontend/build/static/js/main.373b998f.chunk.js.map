{"version":3,"sources":["LikeDislikeComponent.tsx","index.tsx"],"names":["st_likedislike","props","render","like_url","args","dislike_url","defaultValue","console","log","onClick","like","className","state","green","id","xmlns","width","height","fill","viewBox","d","dislike","red","setState","fetch","then","response","json","data","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"uQAkBMA,G,wDACJ,WAAmBC,GAAwB,IAAD,uBACxC,cAAMA,IAgBDC,OAAS,WAGd,IAAMC,EAAW,EAAKF,MAAMG,KAAX,SACXC,EAAc,EAAKJ,MAAMG,KAAX,YACdE,EAAe,EAAKL,MAAMG,KAAX,QAMrB,OALAG,QAAQC,IAAIF,GAMV,8BACE,6BACI,4BAAQG,QAAS,kBAAM,EAAKC,KAAKP,IAAWQ,UAAW,EAAKC,MAAMC,MAAQ,cAAgB,QAASC,GAAG,SAClG,yBAAKC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,KAAK,eAAeP,UAAU,4BAA4BQ,QAAQ,aAC7H,0BAAMC,EAAE,urBAHpB,WAOI,4BAAQX,QAAS,kBAAM,EAAKY,QAAQhB,IAAcM,UAAW,EAAKC,MAAMU,IAAM,YAAc,QAASR,GAAG,OACpG,yBAAKC,MAAM,6BAA6BC,MAAM,KAAKC,OAAO,KAAKC,KAAK,eAAeP,UAAU,8BAA8BQ,QAAQ,aAC/H,0BAAMC,EAAE,msBAvCgB,EAgDlCC,QAAU,SAAChB,GACZ,EAAKO,MAAMU,MACd,EAAKC,SAAS,CACZV,OAAO,EACPS,KAAK,IAGPE,MAAMnB,GACLoB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIrB,QAAQC,IAAIoB,MAE1BC,IAAUC,kBAAkB,cA3DU,EA+DlCpB,KAAO,SAACP,GACT,EAAKS,MAAMC,QACd,EAAKU,SAAS,CACZV,OAAQ,EAAKD,MAAMC,MACnBS,KAAK,IAGPE,MAAMrB,GACLsB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAIrB,QAAQC,IAAIoB,MAE1BC,IAAUC,kBAAkB,WAtE9B,IAAMxB,EAAe,EAAKL,MAAMG,KAAX,QAJmB,OAOtC,EAAKQ,MADa,YAAhBN,EACW,CAAEO,OAAO,EAAOS,KAAK,GACT,SAAhBhB,EACI,CAAEO,OAAO,EAAMS,KAAK,GAEpB,CAAET,OAAO,EAAOS,KAAK,GAGpCf,QAAQC,IAAIF,GAd4B,E,uBADfyB,MAqFdC,cAAwBhC,GCnGvCiC,IAAS/B,OACP,kBAAC,IAAMgC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.373b998f.chunk.js","sourcesContent":["import {\r\n  ComponentProps,\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\nimport \"./styles.css\"\r\n\r\ninterface State {\r\n  green: boolean\r\n  red: boolean\r\n}\r\n\r\n/**\r\n * This is a React-based component template. The `render()` function is called\r\n * automatically when your component should be re-rendered.\r\n */\r\nclass st_likedislike extends StreamlitComponentBase<State> {\r\n  public constructor(props: ComponentProps) {\r\n    super(props)\r\n\r\n    // Determine our initially selected index\r\n    const defaultValue = this.props.args[\"default\"] as string\r\n\r\n    if (defaultValue == \"Disliked\") {\r\n      this.state = { green: false, red: true }\r\n    } else if (defaultValue == \"Liked\") {\r\n      this.state = { green: true, red: false}\r\n    } else {\r\n      this.state = { green: false, red: false }\r\n    }\r\n\r\n    console.log(defaultValue)\r\n  }\r\n\r\n  public render = (): ReactNode => {\r\n    // Arguments that are passed to the plugin in Python are accessible\r\n    // via `this.props.args`. Here, we access the \"name\" arg.\r\n    const like_url = this.props.args[\"like_url\"]\r\n    const dislike_url = this.props.args[\"dislike_url\"]\r\n    const defaultValue = this.props.args[\"default\"] as string\r\n    console.log(defaultValue)\r\n    // Show a button and some text.\r\n    // When the button is clicked, we'll increment our \"numClicks\" state\r\n    // variable, and send its new value back to Streamlit, where it'll\r\n    // be available to the Python program.\r\n    return (\r\n      <span>\r\n        <div>\r\n            <button onClick={() => this.like(like_url)} className={this.state.green ? 'ldbtn green' : 'ldbtn'} id=\"green\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-hand-thumbs-up-fill\" viewBox=\"0 0 16 16\">\r\n                    <path d=\"M6.956 1.745C7.021.81 7.908.087 8.864.325l.261.066c.463.116.874.456 1.012.965.22.816.533 2.511.062 4.51a9.84 9.84 0 0 1 .443-.051c.713-.065 1.669-.072 2.516.21.518.173.994.681 1.2 1.273.184.532.16 1.162-.234 1.733.058.119.103.242.138.363.077.27.113.567.113.856 0 .289-.036.586-.113.856-.039.135-.09.273-.16.404.169.387.107.819-.003 1.148a3.163 3.163 0 0 1-.488.901c.054.152.076.312.076.465 0 .305-.089.625-.253.912C13.1 15.522 12.437 16 11.5 16H8c-.605 0-1.07-.081-1.466-.218a4.82 4.82 0 0 1-.97-.484l-.048-.03c-.504-.307-.999-.609-2.068-.722C2.682 14.464 2 13.846 2 13V9c0-.85.685-1.432 1.357-1.615.849-.232 1.574-.787 2.132-1.41.56-.627.914-1.28 1.039-1.639.199-.575.356-1.539.428-2.59z\"/>\r\n                </svg>\r\n            </button>\r\n            &nbsp;&nbsp;\r\n            <button onClick={() => this.dislike(dislike_url)} className={this.state.red ? 'ldbtn red' : 'ldbtn'} id=\"red\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" fill=\"currentColor\" className=\"bi bi-hand-thumbs-down-fill\" viewBox=\"0 0 16 16\">\r\n                    <path d=\"M6.956 14.534c.065.936.952 1.659 1.908 1.42l.261-.065a1.378 1.378 0 0 0 1.012-.965c.22-.816.533-2.512.062-4.51.136.02.285.037.443.051.713.065 1.669.071 2.516-.211.518-.173.994-.68 1.2-1.272a1.896 1.896 0 0 0-.234-1.734c.058-.118.103-.242.138-.362.077-.27.113-.568.113-.856 0-.29-.036-.586-.113-.857a2.094 2.094 0 0 0-.16-.403c.169-.387.107-.82-.003-1.149a3.162 3.162 0 0 0-.488-.9c.054-.153.076-.313.076-.465a1.86 1.86 0 0 0-.253-.912C13.1.757 12.437.28 11.5.28H8c-.605 0-1.07.08-1.466.217a4.823 4.823 0 0 0-.97.485l-.048.029c-.504.308-.999.61-2.068.723C2.682 1.815 2 2.434 2 3.279v4c0 .851.685 1.433 1.357 1.616.849.232 1.574.787 2.132 1.41.56.626.914 1.28 1.039 1.638.199.575.356 1.54.428 2.591z\"/>\r\n                </svg>\r\n            </button>\r\n        </div>\r\n      </span>\r\n    )\r\n  }\r\n\r\n  /** Click handler for our \"Click Me!\" button. */\r\n  private dislike = (dislike_url: string): void => {\r\n    if (!this.state.red) {\r\n      this.setState({\r\n        green: false,\r\n        red: true\r\n      })\r\n\r\n      fetch(dislike_url)\r\n      .then(response => response.json())\r\n      .then(data => console.log(data))\r\n\r\n      Streamlit.setComponentValue(\"Disliked\")\r\n    }\r\n  }\r\n\r\n  private like = (like_url: string): void => {\r\n    if (!this.state.green) {\r\n      this.setState({\r\n        green: !this.state.green,\r\n        red: false\r\n      })\r\n\r\n      fetch(like_url)\r\n      .then(response => response.json())\r\n      .then(data => console.log(data))\r\n\r\n      Streamlit.setComponentValue(\"Liked\")\r\n    }\r\n  }\r\n}\r\n\r\n// \"withStreamlitConnection\" is a wrapper function. It bootstraps the\r\n// connection between your component and the Streamlit app, and handles\r\n// passing arguments from Python -> Component.\r\n//\r\n// You don't need to edit withStreamlitConnection (but you're welcome to!).\r\nexport default withStreamlitConnection(st_likedislike)\r\n","import React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport MyComponent from \"./LikeDislikeComponent\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <MyComponent />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n)\r\n"],"sourceRoot":""}