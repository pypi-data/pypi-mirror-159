# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/07_regularizer.ipynb (unless otherwise specified).

__all__ = ['RegularizationCallback']

# Cell
from fastai.vision.all import *
from fastai.callback.all import *
from ..sparse.criteria import *

import torch
import torch.nn as nn
import torch.nn.functional as F

# Cell
class RegularizationCallback(Callback):
    def __init__(self, granularity, wd=0.01):
        store_attr()

    def after_loss(self):
        reg = self.get_norm()
        self.learn.loss_grad += reg
        self.learn.loss = self.learn.loss_grad.clone()

    def get_norm(self):
        return self.wd*torch.stack([large_final(m, self.granularity).sum() for m in self.learn.modules() if isinstance(m, nn.Conv2d)]).sum()