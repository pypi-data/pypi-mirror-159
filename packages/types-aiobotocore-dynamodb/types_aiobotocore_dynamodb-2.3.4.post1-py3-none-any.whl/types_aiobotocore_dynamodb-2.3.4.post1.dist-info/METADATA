Metadata-Version: 2.1
Name: types-aiobotocore-dynamodb
Version: 2.3.4.post1
Summary: Type annotations for aiobotocore.DynamoDB 2.3.4 service generated with mypy-boto3-builder 7.8.0
Home-page: https://github.com/youtype/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_dynamodb/
Project-URL: Source, https://github.com/youtype/mypy_boto3_builder
Project-URL: Tracker, https://github.com/youtype/mypy_boto3_builder/issues
Keywords: aiobotocore dynamodb type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions (>=4.1.0)

<a id="types-aiobotocore-dynamodb"></a>

# types-aiobotocore-dynamodb

[![PyPI - types-aiobotocore-dynamodb](https://img.shields.io/pypi/v/types-aiobotocore-dynamodb.svg?color=blue)](https://pypi.org/project/types-aiobotocore-dynamodb)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-dynamodb.svg?color=blue)](https://pypi.org/project/types-aiobotocore-dynamodb)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-dynamodb?color=blue)](https://pypistats.org/packages/types-aiobotocore-dynamodb)

![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[aiobotocore.DynamoDB 2.3.4](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/dynamodb.html#DynamoDB)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 7.8.0](https://github.com/youtype/mypy_boto3_builder).

More information can be found on
[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in
[types-aiobotocore-dynamodb docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_dynamodb/).

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)

- [types-aiobotocore-dynamodb](#types-aiobotocore-dynamodb)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
    - [From conda-forge](#from-conda-forge)
  - [How to uninstall](#how-to-uninstall)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Emacs](#emacs)
    - [Sublime Text](#sublime-text)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
    - [Service Resource annotations](#service-resource-annotations)
    - [Other resources annotations](#other-resources-annotations)
    - [Collections annotations](#collections-annotations)
    - [Literals](#literals)
    - [Typed dictionaries](#typed-dictionaries)
  - [How it works](#how-it-works)
  - [What's new](#what's-new)
    - [Implemented features](#implemented-features)
    - [Latest changes](#latest-changes)
  - [Versioning](#versioning)
  - [Thank you](#thank-you)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `DynamoDB`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `DynamoDB` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[dynamodb]'


# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[dynamodb]'


# standalone installation
python -m pip install types-aiobotocore-dynamodb
```

<a id="from-conda-forge"></a>

### From conda-forge

Installing `types-aiobotocore-dynamodb` from the `conda-forge` channel can be
achieved by adding `conda-forge` to your channels with:

```bash
conda config --add channels conda-forge
conda config --set channel_priority strict
```

Once the `conda-forge` channel has been enabled, `types-aiobotocore-dynamodb`
can be installed with:

```bash
conda install types-aiobotocore-dynamodb
```

It is possible to list all of the versions of `types-aiobotocore-dynamodb`
available on your platform with:

```bash
conda search types-aiobotocore-dynamodb --channel conda-forge
```

<a id="how-to-uninstall"></a>

## How to uninstall

```bash
python -m pip uninstall -y types-aiobotocore-dynamodb
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[dynamodb]` in your environment:

```bash
python -m pip install 'types-aiobotocore[dynamodb]'
```

Both type checking and code completion should now work. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pycharm"></a>

### PyCharm

Install `types-aiobotocore-lite[dynamodb]` in your environment:

```bash
python -m pip install 'types-aiobotocore-lite[dynamodb]'`
```

Both type checking and code completion should now work. Explicit type
annotations **are required**.

Use `types-aiobotocore` package instead for implicit type discovery.

<a id="emacs"></a>

### Emacs

- Install `types-aiobotocore` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[dynamodb]'
```

- Install [use-package](https://github.com/jwiegley/use-package),
  [lsp](https://github.com/emacs-lsp/lsp-mode/),
  [company](https://github.com/company-mode/company-mode) and
  [flycheck](https://github.com/flycheck/flycheck) packages
- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package

```elisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp)))  ; or lsp-deferred
  :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3"))
  )
```

- Make sure emacs uses the environment where you have installed
  `types-aiobotocore`

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="sublime-text"></a>

### Sublime Text

- Install `types-aiobotocore[dynamodb]` with services you use in your
  environment:

```bash
python -m pip install 'types-aiobotocore[dynamodb]'
```

- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) package

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[dynamodb]` in your environment:

```bash
python -m pip install 'types-aiobotocore[dynamodb]'`
```

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `npm i -g pyright`
- Install `types-aiobotocore[dynamodb]` in your environment:

```bash
python -m pip install 'types-aiobotocore[dynamodb]'
```

Optionally, you can install `types-aiobotocore` to `typings` folder.

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`DynamoDBClient` provides annotations for `session.create_client("dynamodb")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_dynamodb import DynamoDBClient

session = get_session()
async with session.create_client("dynamodb") as client:
    client: DynamoDBClient
    # now client usage is checked by mypy and IDE should provide code completion
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_dynamodb.paginator` module contains type annotations for all
paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_dynamodb import DynamoDBClient
from types_aiobotocore_dynamodb.paginator import (
    ListBackupsPaginator,
    ListTablesPaginator,
    ListTagsOfResourcePaginator,
    QueryPaginator,
    ScanPaginator,
)

session = get_session()
async with session.create_client("dynamodb") as client:
    client: DynamoDBClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        list_backups_paginator: ListBackupsPaginator = client.get_paginator("list_backups")
        list_tables_paginator: ListTablesPaginator = client.get_paginator("list_tables")
        list_tags_of_resource_paginator: ListTagsOfResourcePaginator = client.get_paginator("list_tags_of_resource")
        query_paginator: QueryPaginator = client.get_paginator("query")
        scan_paginator: ScanPaginator = client.get_paginator("scan")
    ```


### Waiters annotations

`types_aiobotocore_dynamodb.waiter` module contains type annotations for all waiters.

```python
from aiobotocore.session import get_session

from types_aiobotocore_dynamodb.client import DynamoDBClient
from types_aiobotocore_dynamodb.waiter import (
    TableExistsWaiter,
    TableNotExistsWaiter,
)

session = get_session()
async with session.create_client("dynamodb") as client:
    client: DynamoDBClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        table_exists_waiter: TableExistsWaiter = client.get_waiter("table_exists")
        table_not_exists_waiter: TableNotExistsWaiter = client.get_waiter("table_not_exists")
    ```


<a id="service-resource-annotations"></a>

### Service Resource annotations

`DynamoDBServiceResource` provides annotations for `aiobotocore.resource("dynamodb")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_dynamodb import DynamoDBServiceResource

session = get_session()
async with session.resource("dynamodb") as resource:
    resource: DynamoDBServiceResource
    # now resource usage is checked by mypy and IDE should provide code completion
````

<a id="other-resources-annotations"></a>

### Other resources annotations

`types_aiobotocore_dynamodb.service_resource` module contains type annotations
for all resources.

```python
from aiobotocore.session import get_session

from types_aiobotocore_dynamodb import DynamoDBServiceResource
from types_aiobotocore_dynamodb.service_resource import (
    Table,
)

session = get_session()
async with session.resource("dynamodb") as resource:
    resource: DynamoDBServiceResource

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
    my_table: Table = resource.Table(...)
```

<a id="collections-annotations"></a>

### Collections annotations

`types_aiobotocore_dynamodb.service_resource` module contains type annotations
for all `DynamoDBServiceResource` collections.

```python
from aiobotocore.session import get_session

from types_aiobotocore_dynamodb import DynamoDBServiceResource
from types_aiobotocore_dynamodb.service_resource import (
    ServiceResourceTablesCollection,
)

session = get_session()
async with session.resource("dynamodb") as resource:
    resource: DynamoDBServiceResource

# Explicit type annotations are optional here
# Type should be correctly discovered by mypy and IDEs
    tables: dynamodb_resources.ServiceResourceTablesCollection = resource.tables
```

<a id="literals"></a>

### Literals

`types_aiobotocore_dynamodb.literals` module contains literals extracted from
shapes that can be used in user code for type checking.

```python
from types_aiobotocore_dynamodb.literals import (
    AttributeActionType,
    BackupStatusType,
    BackupTypeFilterType,
    BackupTypeType,
    BatchStatementErrorCodeEnumType,
    BillingModeType,
    ComparisonOperatorType,
    ConditionalOperatorType,
    ContinuousBackupsStatusType,
    ContributorInsightsActionType,
    ContributorInsightsStatusType,
    DestinationStatusType,
    ExportFormatType,
    ExportStatusType,
    GlobalTableStatusType,
    IndexStatusType,
    KeyTypeType,
    ListBackupsPaginatorName,
    ListTablesPaginatorName,
    ListTagsOfResourcePaginatorName,
    PointInTimeRecoveryStatusType,
    ProjectionTypeType,
    QueryPaginatorName,
    ReplicaStatusType,
    ReturnConsumedCapacityType,
    ReturnItemCollectionMetricsType,
    ReturnValueType,
    ReturnValuesOnConditionCheckFailureType,
    S3SseAlgorithmType,
    SSEStatusType,
    SSETypeType,
    ScalarAttributeTypeType,
    ScanPaginatorName,
    SelectType,
    StreamViewTypeType,
    TableClassType,
    TableExistsWaiterName,
    TableNotExistsWaiterName,
    TableStatusType,
    TimeToLiveStatusType,
    DynamoDBServiceName,
    ServiceName,
    ResourceServiceName,
    PaginatorName,
    WaiterName,
    RegionName,
)

def check_value(value: AttributeActionType) -> bool:
    ...
```

<a id="typed-dictionaries"></a>

### Typed dictionaries

`types_aiobotocore_dynamodb.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_dynamodb.type_defs import (
    ResponseMetadataTypeDef,
    ArchivalSummaryTableTypeDef,
    ArchivalSummaryTypeDef,
    AttributeDefinitionServiceResourceTypeDef,
    AttributeDefinitionTableTypeDef,
    AttributeDefinitionTypeDef,
    AttributeValueTypeDef,
    AttributeValueUpdateTableTypeDef,
    AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionTypeDef,
    AutoScalingTargetTrackingScalingPolicyConfigurationUpdateTypeDef,
    BackupDetailsTypeDef,
    BackupSummaryTableTypeDef,
    BackupSummaryTypeDef,
    KeysAndAttributesServiceResourceTypeDef,
    BatchStatementErrorTypeDef,
    ItemCollectionMetricsServiceResourceTypeDef,
    BillingModeSummaryTableTypeDef,
    BillingModeSummaryTypeDef,
    CapacityServiceResourceTypeDef,
    CapacityTableTypeDef,
    CapacityTypeDef,
    ConditionTableTypeDef,
    PointInTimeRecoveryDescriptionTypeDef,
    ContributorInsightsSummaryTypeDef,
    CreateBackupInputRequestTypeDef,
    KeySchemaElementTableTypeDef,
    ProjectionTableTypeDef,
    ProvisionedThroughputTableTypeDef,
    KeySchemaElementTypeDef,
    ProjectionTypeDef,
    ProvisionedThroughputTypeDef,
    ReplicaTypeDef,
    CreateReplicaActionTypeDef,
    ProvisionedThroughputOverrideTableTypeDef,
    ProvisionedThroughputOverrideTypeDef,
    SSESpecificationTypeDef,
    StreamSpecificationTypeDef,
    TagTypeDef,
    KeySchemaElementServiceResourceTypeDef,
    ProvisionedThroughputServiceResourceTypeDef,
    SSESpecificationServiceResourceTypeDef,
    StreamSpecificationServiceResourceTypeDef,
    TagServiceResourceTypeDef,
    DeleteBackupInputRequestTypeDef,
    DeleteGlobalSecondaryIndexActionTableTypeDef,
    DeleteGlobalSecondaryIndexActionTypeDef,
    ExpectedAttributeValueTableTypeDef,
    ItemCollectionMetricsTableTypeDef,
    DeleteReplicaActionTypeDef,
    DeleteReplicationGroupMemberActionTableTypeDef,
    DeleteReplicationGroupMemberActionTypeDef,
    DeleteRequestServiceResourceTypeDef,
    DeleteTableInputRequestTypeDef,
    DescribeBackupInputRequestTypeDef,
    DescribeContinuousBackupsInputRequestTypeDef,
    DescribeContributorInsightsInputRequestTypeDef,
    FailureExceptionTypeDef,
    EndpointTypeDef,
    DescribeExportInputRequestTypeDef,
    ExportDescriptionTypeDef,
    DescribeGlobalTableInputRequestTypeDef,
    DescribeGlobalTableSettingsInputRequestTypeDef,
    DescribeKinesisStreamingDestinationInputRequestTypeDef,
    KinesisDataStreamDestinationTypeDef,
    DescribeTableInputRequestTypeDef,
    WaiterConfigTypeDef,
    DescribeTableReplicaAutoScalingInputRequestTypeDef,
    DescribeTimeToLiveInputRequestTypeDef,
    TimeToLiveDescriptionTypeDef,
    ExportSummaryTypeDef,
    ExportTableToPointInTimeInputRequestTypeDef,
    GetItemInputTableGetItemTypeDef,
    ProvisionedThroughputDescriptionTableTypeDef,
    ProvisionedThroughputDescriptionTypeDef,
    ProjectionServiceResourceTypeDef,
    KinesisStreamingDestinationInputRequestTypeDef,
    PaginatorConfigTypeDef,
    ListBackupsInputRequestTypeDef,
    ListContributorInsightsInputRequestTypeDef,
    ListExportsInputRequestTypeDef,
    ListGlobalTablesInputRequestTypeDef,
    ListTablesInputRequestTypeDef,
    ListTagsOfResourceInputRequestTypeDef,
    TagTableTypeDef,
    PointInTimeRecoverySpecificationTypeDef,
    PutRequestServiceResourceTypeDef,
    TableClassSummaryTableTypeDef,
    TableClassSummaryTypeDef,
    RestoreSummaryTableTypeDef,
    RestoreSummaryTypeDef,
    SSEDescriptionTableTypeDef,
    SSEDescriptionTypeDef,
    SSESpecificationTableTypeDef,
    ServiceResourceTableRequestTypeDef,
    StreamSpecificationTableTypeDef,
    TableBatchWriterRequestTypeDef,
    TimeToLiveSpecificationTypeDef,
    UntagResourceInputRequestTypeDef,
    UpdateContributorInsightsInputRequestTypeDef,
    ArchivalSummaryResponseMetadataTypeDef,
    BillingModeSummaryResponseMetadataTypeDef,
    DescribeLimitsOutputTypeDef,
    EmptyResponseMetadataTypeDef,
    KinesisStreamingDestinationOutputTypeDef,
    ListTablesOutputTableTypeDef,
    ListTablesOutputTypeDef,
    ProvisionedThroughputDescriptionResponseMetadataTypeDef,
    RestoreSummaryResponseMetadataTypeDef,
    SSEDescriptionResponseMetadataTypeDef,
    StreamSpecificationResponseMetadataTypeDef,
    TableClassSummaryResponseMetadataTypeDef,
    UpdateContributorInsightsOutputTypeDef,
    AttributeValueUpdateTypeDef,
    BatchStatementRequestTypeDef,
    ConditionCheckTypeDef,
    ConditionTypeDef,
    DeleteRequestTypeDef,
    DeleteTypeDef,
    ExecuteStatementInputRequestTypeDef,
    ExpectedAttributeValueTypeDef,
    GetItemInputRequestTypeDef,
    GetTypeDef,
    ItemCollectionMetricsTypeDef,
    ItemResponseTypeDef,
    KeysAndAttributesTypeDef,
    ParameterizedStatementTypeDef,
    PutRequestTypeDef,
    PutTypeDef,
    UpdateTypeDef,
    AutoScalingPolicyDescriptionTypeDef,
    AutoScalingPolicyUpdateTypeDef,
    CreateBackupOutputTypeDef,
    ListBackupsOutputTableTypeDef,
    ListBackupsOutputTypeDef,
    BatchGetItemInputServiceResourceBatchGetItemTypeDef,
    BatchStatementResponseTypeDef,
    ConsumedCapacityServiceResourceTypeDef,
    ConsumedCapacityTableTypeDef,
    ConsumedCapacityTypeDef,
    QueryInputTableQueryTypeDef,
    ScanInputTableScanTypeDef,
    ContinuousBackupsDescriptionTypeDef,
    ListContributorInsightsOutputTypeDef,
    LocalSecondaryIndexDescriptionTableTypeDef,
    CreateGlobalSecondaryIndexActionTableTypeDef,
    UpdateGlobalSecondaryIndexActionTableTypeDef,
    LocalSecondaryIndexDescriptionTypeDef,
    LocalSecondaryIndexInfoTypeDef,
    LocalSecondaryIndexTypeDef,
    CreateGlobalSecondaryIndexActionTypeDef,
    GlobalSecondaryIndexInfoTypeDef,
    GlobalSecondaryIndexTypeDef,
    SourceTableDetailsTypeDef,
    UpdateGlobalSecondaryIndexActionTypeDef,
    CreateGlobalTableInputRequestTypeDef,
    GlobalTableTypeDef,
    ReplicaGlobalSecondaryIndexDescriptionTableTypeDef,
    ReplicaGlobalSecondaryIndexTableTypeDef,
    ReplicaGlobalSecondaryIndexDescriptionTypeDef,
    ReplicaGlobalSecondaryIndexTypeDef,
    ListTagsOfResourceOutputTypeDef,
    TagResourceInputRequestTypeDef,
    DeleteItemInputTableDeleteItemTypeDef,
    PutItemInputTablePutItemTypeDef,
    UpdateItemInputTableUpdateItemTypeDef,
    ReplicaUpdateTypeDef,
    DescribeContributorInsightsOutputTypeDef,
    DescribeEndpointsResponseTypeDef,
    DescribeExportOutputTypeDef,
    ExportTableToPointInTimeOutputTypeDef,
    DescribeKinesisStreamingDestinationOutputTypeDef,
    DescribeTableInputTableExistsWaitTypeDef,
    DescribeTableInputTableNotExistsWaitTypeDef,
    DescribeTimeToLiveOutputTypeDef,
    ListExportsOutputTypeDef,
    GlobalSecondaryIndexDescriptionTableTypeDef,
    GlobalSecondaryIndexDescriptionTypeDef,
    GlobalSecondaryIndexServiceResourceTypeDef,
    LocalSecondaryIndexServiceResourceTypeDef,
    ListBackupsInputListBackupsPaginateTypeDef,
    ListTablesInputListTablesPaginateTypeDef,
    ListTagsOfResourceInputListTagsOfResourcePaginateTypeDef,
    QueryInputQueryPaginateTypeDef,
    ScanInputScanPaginateTypeDef,
    ListTagsOfResourceOutputTableTypeDef,
    UpdateContinuousBackupsInputRequestTypeDef,
    WriteRequestServiceResourceTypeDef,
    UpdateTimeToLiveInputRequestTypeDef,
    UpdateTimeToLiveOutputTypeDef,
    BatchExecuteStatementInputRequestTypeDef,
    QueryInputRequestTypeDef,
    ScanInputRequestTypeDef,
    DeleteItemInputRequestTypeDef,
    PutItemInputRequestTypeDef,
    UpdateItemInputRequestTypeDef,
    TransactGetItemTypeDef,
    BatchGetItemInputRequestTypeDef,
    ExecuteTransactionInputRequestTypeDef,
    WriteRequestTypeDef,
    TransactWriteItemTypeDef,
    AutoScalingSettingsDescriptionTypeDef,
    AutoScalingSettingsUpdateTypeDef,
    BatchGetItemOutputServiceResourceTypeDef,
    DeleteItemOutputTableTypeDef,
    GetItemOutputTableTypeDef,
    PutItemOutputTableTypeDef,
    QueryOutputTableTypeDef,
    ScanOutputTableTypeDef,
    UpdateItemOutputTableTypeDef,
    BatchExecuteStatementOutputTypeDef,
    BatchGetItemOutputTypeDef,
    DeleteItemOutputTypeDef,
    ExecuteStatementOutputTypeDef,
    ExecuteTransactionOutputTypeDef,
    GetItemOutputTypeDef,
    PutItemOutputTypeDef,
    QueryOutputTypeDef,
    ScanOutputTypeDef,
    TransactGetItemsOutputTypeDef,
    TransactWriteItemsOutputTypeDef,
    UpdateItemOutputTypeDef,
    DescribeContinuousBackupsOutputTypeDef,
    UpdateContinuousBackupsOutputTypeDef,
    GlobalSecondaryIndexUpdateTableTypeDef,
    SourceTableFeatureDetailsTypeDef,
    CreateTableInputRequestTypeDef,
    RestoreTableFromBackupInputRequestTypeDef,
    RestoreTableToPointInTimeInputRequestTypeDef,
    GlobalSecondaryIndexUpdateTypeDef,
    ListGlobalTablesOutputTypeDef,
    ReplicaDescriptionTableTypeDef,
    CreateReplicationGroupMemberActionTableTypeDef,
    UpdateReplicationGroupMemberActionTableTypeDef,
    ReplicaDescriptionTypeDef,
    CreateReplicationGroupMemberActionTypeDef,
    UpdateReplicationGroupMemberActionTypeDef,
    UpdateGlobalTableInputRequestTypeDef,
    CreateTableInputServiceResourceCreateTableTypeDef,
    BatchWriteItemInputServiceResourceBatchWriteItemTypeDef,
    BatchWriteItemOutputServiceResourceTypeDef,
    TransactGetItemsInputRequestTypeDef,
    BatchWriteItemInputRequestTypeDef,
    BatchWriteItemOutputTypeDef,
    TransactWriteItemsInputRequestTypeDef,
    ReplicaGlobalSecondaryIndexAutoScalingDescriptionTypeDef,
    ReplicaGlobalSecondaryIndexSettingsDescriptionTypeDef,
    GlobalSecondaryIndexAutoScalingUpdateTypeDef,
    GlobalTableGlobalSecondaryIndexSettingsUpdateTypeDef,
    ReplicaGlobalSecondaryIndexAutoScalingUpdateTypeDef,
    ReplicaGlobalSecondaryIndexSettingsUpdateTypeDef,
    BackupDescriptionTypeDef,
    TableDescriptionTableTypeDef,
    ReplicationGroupUpdateTableTypeDef,
    GlobalTableDescriptionTypeDef,
    TableDescriptionTypeDef,
    ReplicationGroupUpdateTypeDef,
    ReplicaAutoScalingDescriptionTypeDef,
    ReplicaSettingsDescriptionTypeDef,
    ReplicaAutoScalingUpdateTypeDef,
    ReplicaSettingsUpdateTypeDef,
    DeleteBackupOutputTypeDef,
    DescribeBackupOutputTypeDef,
    DeleteTableOutputTableTypeDef,
    UpdateTableInputTableUpdateTypeDef,
    CreateGlobalTableOutputTypeDef,
    DescribeGlobalTableOutputTypeDef,
    UpdateGlobalTableOutputTypeDef,
    CreateTableOutputTypeDef,
    DeleteTableOutputTypeDef,
    DescribeTableOutputTypeDef,
    RestoreTableFromBackupOutputTypeDef,
    RestoreTableToPointInTimeOutputTypeDef,
    UpdateTableOutputTypeDef,
    UpdateTableInputRequestTypeDef,
    TableAutoScalingDescriptionTypeDef,
    DescribeGlobalTableSettingsOutputTypeDef,
    UpdateGlobalTableSettingsOutputTypeDef,
    UpdateTableReplicaAutoScalingInputRequestTypeDef,
    UpdateGlobalTableSettingsInputRequestTypeDef,
    DescribeTableReplicaAutoScalingOutputTypeDef,
    UpdateTableReplicaAutoScalingOutputTypeDef,
)

def get_structure() -> ResponseMetadataTypeDef:
    return {
      ...
    }
```

<a id="how-it-works"></a>

## How it works

Fully automated
[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefully
generates type annotations for each service, patiently waiting for
`aiobotocore` updates. It delivers a drop-in type annotations for you and makes
sure that:

- All available `aiobotocore` services are covered.
- Each public class and method of every `aiobotocore` service gets valid type
  annotations extracted from the documentation (blame `botocore` docs if types
  are incorrect).
- Type annotations include up-to-date documentation.
- Link to documentation is provided for every method.
- Code is processed by [black](https://github.com/psf/black) and
  [isort](https://github.com/PyCQA/isort) for readability.

<a id="what's-new"></a>

## What's new

<a id="implemented-features"></a>

### Implemented features

- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries
- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`
  compatibility
- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type
  annotations for each service
- Generated `TypeDefs` for each service
- Generated `Literals` for each service
- Auto discovery of types for `boto3.client` and `boto3.session` calls
- Auto discovery of types for `session.client` and `session.session` calls
- Auto discovery of types for `client.get_waiter` and `client.get_paginator`
  calls
- Auto discovery of types for `ServiceResource` and `Resource` collections
- Auto discovery of types for `aiobotocore.Session.create_client` calls

<a id="latest-changes"></a>

### Latest changes

Builder changelog can be found in
[Releases](https://github.com/youtype/mypy_boto3_builder/releases).

<a id="versioning"></a>

## Versioning

`types-aiobotocore-dynamodb` version is the same as related `aiobotocore`
version and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/)
format.

<a id="thank-you"></a>

## Thank you

- [Allie Fitter](https://github.com/alliefitter) for
  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),
  this package is based on top of his work
- [black](https://github.com/psf/black) developers for an awesome formatting
  tool
- [Timothy Edmund Crosley](https://github.com/timothycrosley) for
  [isort](https://github.com/PyCQA/isort) and how flexible it is
- [mypy](https://github.com/python/mypy) developers for doing all dirty work
  for us
- [pyright](https://github.com/microsoft/pyright) team for the new era of typed
  Python

<a id="documentation"></a>

## Documentation

All services type annotations can be found in
[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_dynamodb/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)
repository.


