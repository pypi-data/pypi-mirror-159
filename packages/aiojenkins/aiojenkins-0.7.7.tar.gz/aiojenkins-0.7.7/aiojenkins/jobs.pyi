from .exceptions import JenkinsNotFoundError as JenkinsNotFoundError
from .utils import construct_job_config as construct_job_config
from _typeshed import Incomplete
from typing import Any, Dict

class Jobs:
    jenkins: Incomplete
    def __init__(self, jenkins) -> None: ...
    async def get_all(self) -> Dict[str, dict]: ...
    async def get_info(self, name: str) -> dict: ...
    async def get_config(self, name: str) -> str: ...
    async def is_exists(self, name: str) -> bool: ...
    def construct_config(self, **kwargs: Any) -> str: ...
    async def create(self, name: str, config: str) -> None: ...
    async def reconfigure(self, name: str, config: str) -> None: ...
    async def delete(self, name: str) -> None: ...
    async def copy(self, name: str, new_name: str) -> None: ...
    async def rename(self, name: str, new_name: str) -> None: ...
    async def enable(self, name: str) -> None: ...
    async def disable(self, name: str) -> None: ...
