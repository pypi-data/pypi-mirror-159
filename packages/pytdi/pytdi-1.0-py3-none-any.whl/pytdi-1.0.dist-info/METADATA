Metadata-Version: 2.1
Name: pytdi
Version: 1.0
Summary: Python implementation of time-delay interferometry algorithms.
Home-page: https://gitlab.in2p3.fr/LISA/LDPG/wg6_inrep/pytdi
Author: Martin Staab
Author-email: martin.staab@aei.mpg.de
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: scipy

# PyTDI

PyTDI is a Python package which provides a toolset to perform symbolical and numerical time-delay interferometry (TDI) calculations. Its functionalities include
* definition of arbitrary linear combination of time-shifted signals (i.e., TDI combinations),
* symbolical handling of TDI combinations, and
* numerical evaluation of TDI combinations.

## Getting Started

Make sure that Python 3.7 or newer is available, disable automatic downloading of large files if [Git LFS](https://git-lfs.github.com), and install `pytdi` using [pip](https://pypi.org/project/pip/),
```
git lfs install --skip-smudge
pip install git+https://gitlab.in2p3.fr/LISA/LDPG/wg6_inrep/pytdi.git@v1.0
```

The central element of PyTDI is the `TDICombination` class, which serves as an interface to define arbitrary TDI combinations and carry out numerical calculations. PyTDI already comes with the following predefined combinations: $`\xi`$ (OB motion correction), $`\eta`$ (reduction to three lasers) and $`X_{1/2}`$ (first/second generation Michelson variables).

The following examples illustrates how to calculate the second generation Michelson combination $`X_2`$ from LISANode data.

```python
import numpy as np
import h5py
from pytdi.michelson import X2

# names of datasets in LISANode's HDF5 output
pm_names = {"sci_12": "s_c_fluctuations1", "sci_13": "s_c_fluctuations1_p",
            "sci_23": "s_c_fluctuations2", "sci_21": "s_c_fluctuations2_p",
            "sci_31": "s_c_fluctuations3", "sci_32": "s_c_fluctuations3_p",
            "ref_12": "ref_c_fluctuations1", "ref_13": "ref_c_fluctuations1_p",
            "ref_23": "ref_c_fluctuations2", "ref_21": "ref_c_fluctuations2_p",
            "ref_31": "ref_c_fluctuations3", "ref_32": "ref_c_fluctuations3_p",
            "tm_12": "tm_c_fluctuations1", "tm_13": "tm_c_fluctuations1_p",
            "tm_23": "tm_c_fluctuations2", "tm_21": "tm_c_fluctuations2_p",
            "tm_31": "tm_c_fluctuations3", "tm_32": "tm_c_fluctuations3_p"}

ranging_names = {"d_12": "ranging1", "d_13": "ranging1_p",
                 "d_23": "ranging2", "d_21": "ranging2_p",
                 "d_31": "ranging3", "d_32": "ranging3_p"}

bn_names = {"sci_12": "s_c_frequency1", "sci_13": "s_c_frequency1_p",
            "sci_23": "s_c_frequency2", "sci_21": "s_c_frequency2_p",
            "sci_31": "s_c_frequency3", "sci_32": "s_c_frequency3_p",
            "ref_12": "ref_c_frequency1", "ref_13": "ref_c_frequency1_p",
            "ref_23": "ref_c_frequency2", "ref_21": "ref_c_frequency2_p",
            "ref_31": "ref_c_frequency3", "ref_32": "ref_c_frequency3_p",
            "tm_12": "ref_c_frequency1", "tm_13": "ref_c_frequency1_p",
            "tm_23": "ref_c_frequency2", "tm_21": "ref_c_frequency2_p",
            "tm_31": "ref_c_frequency3", "tm_32": "ref_c_frequency3_p"}

# parameters
fs = 3.0
path_in = "LISA.h5"
path_out = "TDI.h5"

# import data
data = {}
traveltimes = {}
with h5py.File(path_in, 'r') as hdf5:
    times = hdf5["s_c1"][:,0]

    for key in pm_names:
        pm_name = pm_names[key]
        bn_name = bn_names[key]
        data[key] = hdf5[pm_name][:,1] * np.sign(hdf5[bn_name][:,1])

    for key, name in ranging_names.items():
        traveltimes[key] = hdf5[name][:,1]

X2_data = X2.build(data, traveltimes, fs)

# write output
with h5py.File(path_out, "w") as f:
    f.create_dataset("X2", data=np.vstack((times, X2_data)).T)
```

More in-depth documentation can be found in the [code](https://gitlab.in2p3.fr/LISA/LDPG/wg6_inrep/pytdi/-/tree/master) and in the [Wiki](https://gitlab.in2p3.fr/LISA/LDPG/wg6_inrep/pytdi/-/wikis/home).

## Contributing

### Report an issue

We use the issue-tracking management system associated with the project provided by Gitlab. If you want to report a bug or request a feature, open an issue at [https://gitlab.in2p3.fr/LISA/LDPG/wg6_inrep/pytdi/-/issues](https://gitlab.in2p3.fr/LISA/LDPG/wg6_inrep/pytdi/-/issues). You may also thumb-up or comment on existing issues.

### Development environment

We strongly recommend to use [Python virtual environments](https://docs.python.org/3/tutorial/venv.html).

To setup the development environment, use the following commands:
```
git clone git@gitlab.in2p3.fr:LISA/LDPG/wg6_inrep/pytdi.git
cd orbits
python -m venv .
source ./bin/activate
python -m pip install --upgrade pip
python -m pip install -r requirements.txt
```

### Workflow

The project's development workflow is based on the issue-tracking system provided by Gitlab, as well as peer-reviewed merge requests. This ensures high-quality standards.

Issues are solved by creating branches and opening merge requests. Only the assignee of the related issue and merge request can push commits on the branch. Once all the changes have been pushed, the "draft" specifier on the merge request is removed, and the merge request is assigned to a reviewer. They can push new changes to the branch, or request changes to the original author by re-assigning the merge request to them. When the merge request is accepted, the branch is merged onto master, deleted, and the associated issue is closed.

### Pylint and pytest

We enforce [PEP 8 (Style Guide for Python Code)](https://www.python.org/dev/peps/pep-0008/) with [Pylint](http://pylint.pycqa.org/) syntax checking, and testing of the code via unit and integration tests with the [pytest](https://docs.pytest.org/) framwork. Both are implemented in the continuous integration system. Only if all tests pass successfully a merge request can be merged.

You can run them locally
```
pylint **/*.py
pytest
```

## Contact

* Martin Staab (martin.staab@aei.mpg.de)
* Jean-Baptiste Bayle (jbayle@jpl.nasa.gov)
