from __future__ import annotations

import os
from typing import Union

from qtpy.QtCore import QObject

from ...pyside import slot

TPath = Union[os.PathLike, str]


class HotLoader:
    bootloader: TPath
    target: TPath
    temp_dirname: str
    
    def __init__(self):
        from lk_utils import relpath
        self.temp_dirname = '__lk_qtquick_scaffold__'
        self.bootloader = relpath('view.qml')
        assert os.path.exists(self.bootloader)
    
    def _check_bootloader_location(self, target: TPath):
        """
        Args:
            target: filepath to *.qml.
        
        Notes:
            我们需要准备一个 HotLoader.qml 文件, 和一个 target (.qml) 文件.
            `class:HotLoader` 会先加载 HotLoader.qml, 然后再通过 HotLoader.qml
            加载 target 文件.
            其中, HotLoader.qml 文件由本模块所在的目录下的 './LKLogger
            /HotLoader.qml' 提供; target 由用户在 `self.start` 处传入.
            
            这里有一个注意事项, target 必须使用相对路径 (相对于
            'HotLoader.qml'), 不能使用绝对路径. 否则会导致 target 文件中的所有
            relative import 语句全部无法正常工作.
            当 target 与 HotLoader.qml 同盘符时, 使用 `os.path.relpath` 即可计算
            出此相对路径. 但是二者不同盘符时, 无法使用 `os.path.relpath` 计算.
            我们的解决方法是, 复制一个 HotLoader.qml 文件到与 target 同目录下的
            `~/{self.cache_dirname}/HotLoader.qml` 路径.
        """
        # 1
        target = os.path.abspath(target)
        if self.bootloader[0] == target[0]:
            return
        
        # 2
        new_bootloader = os.path.join(
            os.path.dirname(target), self.temp_dirname, 'view.qml'
        )
        if os.path.exists(new_bootloader):
            return
        
        # 3
        print(
            'The target qml locates in a different driver with `declare_pyside'
            '.qmlside.LKLogger.HotLoader`, we will make a copy of "HotLoader'
            '.qml" in target directory:\n\t{}'.format(new_bootloader), ':v3p2'
        )
        
        new_bootloader_dir = os.path.dirname(new_bootloader)
        if not os.path.exists(new_bootloader_dir):
            os.mkdir(new_bootloader_dir)
        
        from lk_utils import dumps
        dumps('Generated by [lk-qtquick-scaffold](https://github.com/likianta/'
              'lk-qtquick-scaffold)/qmlside/hot_loader/hot_loader.py',
              f'{new_bootloader}/README.md')
        
        from shutil import copyfile
        copyfile(self.bootloader, new_bootloader)
        
        self.bootloader = new_bootloader
    
    def start(self, target: TPath, **kwargs):
        """
        args:
            kwargs:
                bg_color: str, background color of the loader.
                reload_scheme: int, 0 or 1.
        """
        self._check_bootloader_location(target)
        
        self.target = 'file:///' + os.path.abspath(target)
        
        # register hot reloader runtime functions.
        # see usages in `..LKQmSide.HotLoader`.
        from ...pyside import app
        app.register_pyobj(HotLoaderControl(self.target, **kwargs),
                           'PyHotLoaderControl')
        
        # start app
        app.start(self.bootloader)


class HotLoaderControl(QObject):
    
    def __init__(self, source: str, reload_scheme=0, bg_color='#f2f2f2'):
        """
        args:
            source: an absolute file path starts with `file:///`
        """
        super().__init__(None)
        self.reload_scheme = reload_scheme
        self.source = source
        self._bg_color = bg_color
        self._count = -1
        self._loader = None  # type: QObject | None
    
    @slot(result=str)
    def get_bg_color(self) -> str:
        return self._bg_color
    
    @slot(object)
    def set_loader(self, loader: QObject):
        self._loader = loader
    
    # @slot(object)
    # def init_load(self, loader: QObject):
    #     self._loader = loader
    #     self._loader.setProperty('source', self.source)
    
    @slot()
    def reload(self):
        assert self._loader, 'Loader is not set, did you forget to call ' \
                             '`init_load`?'
        self._count += 1
        
        if self._count == 0:
            # it's the first time to load.
            self._loader.setProperty('source', self.source)
            return
        
        print(':dvs', f'Reload target ({self._count})')
        if self.reload_scheme == 0:
            # A. use "magic count" to update url but not change the source path.
            self._loader.setProperty(
                'source', self.source + f'?magic_count={self._count}'
            )
        else:
            # B. clear component cache to force reload.
            from ...pyside import app
            self._loader.setProperty('source', '')
            app.engine.clearComponentCache()
            self._loader.setProperty('source', self.source)


hot_loader = HotLoader()
