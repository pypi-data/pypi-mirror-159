Metadata-Version: 2.1
Name: types-aiobotocore-kafka
Version: 2.3.4.post1
Summary: Type annotations for aiobotocore.Kafka 2.3.4 service generated with mypy-boto3-builder 7.8.0
Home-page: https://github.com/youtype/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_kafka/
Project-URL: Source, https://github.com/youtype/mypy_boto3_builder
Project-URL: Tracker, https://github.com/youtype/mypy_boto3_builder/issues
Keywords: aiobotocore kafka type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions (>=4.1.0)

<a id="types-aiobotocore-kafka"></a>

# types-aiobotocore-kafka

[![PyPI - types-aiobotocore-kafka](https://img.shields.io/pypi/v/types-aiobotocore-kafka.svg?color=blue)](https://pypi.org/project/types-aiobotocore-kafka)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-kafka.svg?color=blue)](https://pypi.org/project/types-aiobotocore-kafka)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-kafka?color=blue)](https://pypistats.org/packages/types-aiobotocore-kafka)

![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[aiobotocore.Kafka 2.3.4](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/kafka.html#Kafka)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 7.8.0](https://github.com/youtype/mypy_boto3_builder).

More information can be found on
[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in
[types-aiobotocore-kafka docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_kafka/).

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)

- [types-aiobotocore-kafka](#types-aiobotocore-kafka)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [How to uninstall](#how-to-uninstall)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Emacs](#emacs)
    - [Sublime Text](#sublime-text)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `Kafka`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `Kafka` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[kafka]'


# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[kafka]'


# standalone installation
python -m pip install types-aiobotocore-kafka
```

<a id="how-to-uninstall"></a>

## How to uninstall

```bash
python -m pip uninstall -y types-aiobotocore-kafka
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[kafka]` in your environment:

```bash
python -m pip install 'types-aiobotocore[kafka]'
```

Both type checking and code completion should now work. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pycharm"></a>

### PyCharm

Install `types-aiobotocore-lite[kafka]` in your environment:

```bash
python -m pip install 'types-aiobotocore-lite[kafka]'`
```

Both type checking and code completion should now work. Explicit type
annotations **are required**.

Use `types-aiobotocore` package instead for implicit type discovery.

<a id="emacs"></a>

### Emacs

- Install `types-aiobotocore` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[kafka]'
```

- Install [use-package](https://github.com/jwiegley/use-package),
  [lsp](https://github.com/emacs-lsp/lsp-mode/),
  [company](https://github.com/company-mode/company-mode) and
  [flycheck](https://github.com/flycheck/flycheck) packages
- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package

```elisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp)))  ; or lsp-deferred
  :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3"))
  )
```

- Make sure emacs uses the environment where you have installed
  `types-aiobotocore`

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="sublime-text"></a>

### Sublime Text

- Install `types-aiobotocore[kafka]` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[kafka]'
```

- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) package

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[kafka]` in your environment:

```bash
python -m pip install 'types-aiobotocore[kafka]'`
```

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `npm i -g pyright`
- Install `types-aiobotocore[kafka]` in your environment:

```bash
python -m pip install 'types-aiobotocore[kafka]'
```

Optionally, you can install `types-aiobotocore` to `typings` folder.

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`KafkaClient` provides annotations for `session.create_client("kafka")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_kafka import KafkaClient

session = get_session()
async with session.create_client("kafka") as client:
    client: KafkaClient
    # now client usage is checked by mypy and IDE should provide code completion
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_kafka.paginator` module contains type annotations for all
paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_kafka import KafkaClient
from types_aiobotocore_kafka.paginator import (
    ListClusterOperationsPaginator,
    ListClustersPaginator,
    ListClustersV2Paginator,
    ListConfigurationRevisionsPaginator,
    ListConfigurationsPaginator,
    ListKafkaVersionsPaginator,
    ListNodesPaginator,
    ListScramSecretsPaginator,
)

session = get_session()
async with session.create_client("kafka") as client:
    client: KafkaClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        list_cluster_operations_paginator: ListClusterOperationsPaginator = client.get_paginator("list_cluster_operations")
        list_clusters_paginator: ListClustersPaginator = client.get_paginator("list_clusters")
        list_clusters_v2_paginator: ListClustersV2Paginator = client.get_paginator("list_clusters_v2")
        list_configuration_revisions_paginator: ListConfigurationRevisionsPaginator = client.get_paginator("list_configuration_revisions")
        list_configurations_paginator: ListConfigurationsPaginator = client.get_paginator("list_configurations")
        list_kafka_versions_paginator: ListKafkaVersionsPaginator = client.get_paginator("list_kafka_versions")
        list_nodes_paginator: ListNodesPaginator = client.get_paginator("list_nodes")
        list_scram_secrets_paginator: ListScramSecretsPaginator = client.get_paginator("list_scram_secrets")
    ```







### Literals

`types_aiobotocore_kafka.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_kafka.literals import (
    BrokerAZDistributionType,
    ClientBrokerType,
    ClusterStateType,
    ClusterTypeType,
    ConfigurationStateType,
    EnhancedMonitoringType,
    KafkaVersionStatusType,
    ListClusterOperationsPaginatorName,
    ListClustersPaginatorName,
    ListClustersV2PaginatorName,
    ListConfigurationRevisionsPaginatorName,
    ListConfigurationsPaginatorName,
    ListKafkaVersionsPaginatorName,
    ListNodesPaginatorName,
    ListScramSecretsPaginatorName,
    NodeTypeType,
    KafkaServiceName,
    ServiceName,
    ResourceServiceName,
    PaginatorName,
    RegionName,
)

def check_value(value: BrokerAZDistributionType) -> bool:
    ...
````

### Typed dictionaries

`types_aiobotocore_kafka.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_kafka.type_defs import (
    BatchAssociateScramSecretRequestRequestTypeDef,
    ResponseMetadataTypeDef,
    UnprocessedScramSecretTypeDef,
    BatchDisassociateScramSecretRequestRequestTypeDef,
    ProvisionedThroughputTypeDef,
    CloudWatchLogsTypeDef,
    FirehoseTypeDef,
    S3TypeDef,
    BrokerSoftwareInfoTypeDef,
    TlsTypeDef,
    UnauthenticatedTypeDef,
    StateInfoTypeDef,
    ErrorInfoTypeDef,
    ClusterOperationStepInfoTypeDef,
    CompatibleKafkaVersionTypeDef,
    ConfigurationInfoTypeDef,
    ConfigurationRevisionTypeDef,
    PublicAccessTypeDef,
    CreateConfigurationRequestRequestTypeDef,
    DeleteClusterRequestRequestTypeDef,
    DeleteConfigurationRequestRequestTypeDef,
    DescribeClusterOperationRequestRequestTypeDef,
    DescribeClusterRequestRequestTypeDef,
    DescribeClusterV2RequestRequestTypeDef,
    DescribeConfigurationRequestRequestTypeDef,
    DescribeConfigurationRevisionRequestRequestTypeDef,
    EncryptionAtRestTypeDef,
    EncryptionInTransitTypeDef,
    GetBootstrapBrokersRequestRequestTypeDef,
    GetCompatibleKafkaVersionsRequestRequestTypeDef,
    IamTypeDef,
    JmxExporterInfoTypeDef,
    JmxExporterTypeDef,
    KafkaVersionTypeDef,
    PaginatorConfigTypeDef,
    ListClusterOperationsRequestRequestTypeDef,
    ListClustersRequestRequestTypeDef,
    ListClustersV2RequestRequestTypeDef,
    ListConfigurationRevisionsRequestRequestTypeDef,
    ListConfigurationsRequestRequestTypeDef,
    ListKafkaVersionsRequestRequestTypeDef,
    ListNodesRequestRequestTypeDef,
    ListScramSecretsRequestRequestTypeDef,
    ListTagsForResourceRequestRequestTypeDef,
    NodeExporterInfoTypeDef,
    NodeExporterTypeDef,
    ZookeeperNodeInfoTypeDef,
    RebootBrokerRequestRequestTypeDef,
    ScramTypeDef,
    VpcConfigTypeDef,
    TagResourceRequestRequestTypeDef,
    UntagResourceRequestRequestTypeDef,
    UpdateBrokerCountRequestRequestTypeDef,
    UpdateBrokerTypeRequestRequestTypeDef,
    UpdateConfigurationRequestRequestTypeDef,
    CreateClusterResponseTypeDef,
    CreateClusterV2ResponseTypeDef,
    DeleteClusterResponseTypeDef,
    DeleteConfigurationResponseTypeDef,
    DescribeConfigurationRevisionResponseTypeDef,
    EmptyResponseMetadataTypeDef,
    GetBootstrapBrokersResponseTypeDef,
    ListScramSecretsResponseTypeDef,
    ListTagsForResourceResponseTypeDef,
    RebootBrokerResponseTypeDef,
    UpdateBrokerCountResponseTypeDef,
    UpdateBrokerStorageResponseTypeDef,
    UpdateBrokerTypeResponseTypeDef,
    UpdateClusterConfigurationResponseTypeDef,
    UpdateClusterKafkaVersionResponseTypeDef,
    UpdateConnectivityResponseTypeDef,
    UpdateMonitoringResponseTypeDef,
    UpdateSecurityResponseTypeDef,
    BatchAssociateScramSecretResponseTypeDef,
    BatchDisassociateScramSecretResponseTypeDef,
    BrokerEBSVolumeInfoTypeDef,
    EBSStorageInfoTypeDef,
    BrokerLogsTypeDef,
    BrokerNodeInfoTypeDef,
    ClusterOperationStepTypeDef,
    GetCompatibleKafkaVersionsResponseTypeDef,
    UpdateClusterConfigurationRequestRequestTypeDef,
    UpdateClusterKafkaVersionRequestRequestTypeDef,
    ConfigurationTypeDef,
    CreateConfigurationResponseTypeDef,
    DescribeConfigurationResponseTypeDef,
    ListConfigurationRevisionsResponseTypeDef,
    UpdateConfigurationResponseTypeDef,
    ConnectivityInfoTypeDef,
    EncryptionInfoTypeDef,
    ServerlessSaslTypeDef,
    ListKafkaVersionsResponseTypeDef,
    ListClusterOperationsRequestListClusterOperationsPaginateTypeDef,
    ListClustersRequestListClustersPaginateTypeDef,
    ListClustersV2RequestListClustersV2PaginateTypeDef,
    ListConfigurationRevisionsRequestListConfigurationRevisionsPaginateTypeDef,
    ListConfigurationsRequestListConfigurationsPaginateTypeDef,
    ListKafkaVersionsRequestListKafkaVersionsPaginateTypeDef,
    ListNodesRequestListNodesPaginateTypeDef,
    ListScramSecretsRequestListScramSecretsPaginateTypeDef,
    PrometheusInfoTypeDef,
    PrometheusTypeDef,
    SaslTypeDef,
    UpdateBrokerStorageRequestRequestTypeDef,
    StorageInfoTypeDef,
    LoggingInfoTypeDef,
    NodeInfoTypeDef,
    ListConfigurationsResponseTypeDef,
    UpdateConnectivityRequestRequestTypeDef,
    ServerlessClientAuthenticationTypeDef,
    OpenMonitoringInfoTypeDef,
    OpenMonitoringTypeDef,
    ClientAuthenticationTypeDef,
    BrokerNodeGroupInfoTypeDef,
    ListNodesResponseTypeDef,
    ServerlessRequestTypeDef,
    ServerlessTypeDef,
    UpdateMonitoringRequestRequestTypeDef,
    MutableClusterInfoTypeDef,
    UpdateSecurityRequestRequestTypeDef,
    ClusterInfoTypeDef,
    CreateClusterRequestRequestTypeDef,
    ProvisionedRequestTypeDef,
    ProvisionedTypeDef,
    ClusterOperationInfoTypeDef,
    DescribeClusterResponseTypeDef,
    ListClustersResponseTypeDef,
    CreateClusterV2RequestRequestTypeDef,
    ClusterTypeDef,
    DescribeClusterOperationResponseTypeDef,
    ListClusterOperationsResponseTypeDef,
    DescribeClusterV2ResponseTypeDef,
    ListClustersV2ResponseTypeDef,
)

def get_structure() -> BatchAssociateScramSecretRequestRequestTypeDef:
    return {
      ...
    }
```

## How it works

Fully automated
[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefully
generates type annotations for each service, patiently waiting for
`aiobotocore` updates. It delivers a drop-in type annotations for you and makes
sure that:

- All available `aiobotocore` services are covered.
- Each public class and method of every `aiobotocore` service gets valid type
  annotations extracted from the documentation (blame `botocore` docs if types
  are incorrect).
- Type annotations include up-to-date documentation.
- Link to documentation is provided for every method.
- Code is processed by [black](https://github.com/psf/black) and
  [isort](https://github.com/PyCQA/isort) for readability.

## What's new

### Implemented features

- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries
- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`
  compatibility
- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type
  annotations for each service
- Generated `TypeDefs` for each service
- Generated `Literals` for each service
- Auto discovery of types for `boto3.client` and `boto3.session` calls
- Auto discovery of types for `session.client` and `session.session` calls
- Auto discovery of types for `client.get_waiter` and `client.get_paginator`
  calls
- Auto discovery of types for `ServiceResource` and `Resource` collections
- Auto discovery of types for `aiobotocore.Session.create_client` calls

### Latest changes

Builder changelog can be found in
[Releases](https://github.com/youtype/mypy_boto3_builder/releases).

## Versioning

`types-aiobotocore-kafka` version is the same as related `aiobotocore` version
and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/) format.

## Thank you

- [Allie Fitter](https://github.com/alliefitter) for
  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),
  this package is based on top of his work
- [black](https://github.com/psf/black) developers for an awesome formatting
  tool
- [Timothy Edmund Crosley](https://github.com/timothycrosley) for
  [isort](https://github.com/PyCQA/isort) and how flexible it is
- [mypy](https://github.com/python/mypy) developers for doing all dirty work
  for us
- [pyright](https://github.com/microsoft/pyright) team for the new era of typed
  Python

## Documentation

All services type annotations can be found in
[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_kafka/)

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)
repository.


