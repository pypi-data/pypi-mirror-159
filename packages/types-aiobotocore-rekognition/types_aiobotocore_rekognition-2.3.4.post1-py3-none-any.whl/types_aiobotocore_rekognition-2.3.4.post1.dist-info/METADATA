Metadata-Version: 2.1
Name: types-aiobotocore-rekognition
Version: 2.3.4.post1
Summary: Type annotations for aiobotocore.Rekognition 2.3.4 service generated with mypy-boto3-builder 7.8.0
Home-page: https://github.com/youtype/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_rekognition/
Project-URL: Source, https://github.com/youtype/mypy_boto3_builder
Project-URL: Tracker, https://github.com/youtype/mypy_boto3_builder/issues
Keywords: aiobotocore rekognition type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions (>=4.1.0)

<a id="types-aiobotocore-rekognition"></a>

# types-aiobotocore-rekognition

[![PyPI - types-aiobotocore-rekognition](https://img.shields.io/pypi/v/types-aiobotocore-rekognition.svg?color=blue)](https://pypi.org/project/types-aiobotocore-rekognition)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-rekognition.svg?color=blue)](https://pypi.org/project/types-aiobotocore-rekognition)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-rekognition?color=blue)](https://pypistats.org/packages/types-aiobotocore-rekognition)

![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[aiobotocore.Rekognition 2.3.4](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/rekognition.html#Rekognition)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 7.8.0](https://github.com/youtype/mypy_boto3_builder).

More information can be found on
[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in
[types-aiobotocore-rekognition docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_rekognition/).

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)

- [types-aiobotocore-rekognition](#types-aiobotocore-rekognition)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [How to uninstall](#how-to-uninstall)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Emacs](#emacs)
    - [Sublime Text](#sublime-text)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
    - [Literals](#literals)
    - [Typed dictionaries](#typed-dictionaries)
  - [How it works](#how-it-works)
  - [What's new](#what's-new)
    - [Implemented features](#implemented-features)
    - [Latest changes](#latest-changes)
  - [Versioning](#versioning)
  - [Thank you](#thank-you)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `Rekognition`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `Rekognition` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[rekognition]'


# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[rekognition]'


# standalone installation
python -m pip install types-aiobotocore-rekognition
```

<a id="how-to-uninstall"></a>

## How to uninstall

```bash
python -m pip uninstall -y types-aiobotocore-rekognition
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[rekognition]` in your environment:

```bash
python -m pip install 'types-aiobotocore[rekognition]'
```

Both type checking and code completion should now work. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pycharm"></a>

### PyCharm

Install `types-aiobotocore-lite[rekognition]` in your environment:

```bash
python -m pip install 'types-aiobotocore-lite[rekognition]'`
```

Both type checking and code completion should now work. Explicit type
annotations **are required**.

Use `types-aiobotocore` package instead for implicit type discovery.

<a id="emacs"></a>

### Emacs

- Install `types-aiobotocore` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[rekognition]'
```

- Install [use-package](https://github.com/jwiegley/use-package),
  [lsp](https://github.com/emacs-lsp/lsp-mode/),
  [company](https://github.com/company-mode/company-mode) and
  [flycheck](https://github.com/flycheck/flycheck) packages
- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package

```elisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp)))  ; or lsp-deferred
  :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3"))
  )
```

- Make sure emacs uses the environment where you have installed
  `types-aiobotocore`

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="sublime-text"></a>

### Sublime Text

- Install `types-aiobotocore[rekognition]` with services you use in your
  environment:

```bash
python -m pip install 'types-aiobotocore[rekognition]'
```

- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) package

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[rekognition]` in your environment:

```bash
python -m pip install 'types-aiobotocore[rekognition]'`
```

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `npm i -g pyright`
- Install `types-aiobotocore[rekognition]` in your environment:

```bash
python -m pip install 'types-aiobotocore[rekognition]'
```

Optionally, you can install `types-aiobotocore` to `typings` folder.

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`RekognitionClient` provides annotations for
`session.create_client("rekognition")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_rekognition import RekognitionClient

session = get_session()
async with session.create_client("rekognition") as client:
    client: RekognitionClient
    # now client usage is checked by mypy and IDE should provide code completion
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_rekognition.paginator` module contains type annotations for
all paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_rekognition import RekognitionClient
from types_aiobotocore_rekognition.paginator import (
    DescribeProjectVersionsPaginator,
    DescribeProjectsPaginator,
    ListCollectionsPaginator,
    ListDatasetEntriesPaginator,
    ListDatasetLabelsPaginator,
    ListFacesPaginator,
    ListStreamProcessorsPaginator,
)

session = get_session()
async with session.create_client("rekognition") as client:
    client: RekognitionClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        describe_project_versions_paginator: DescribeProjectVersionsPaginator = client.get_paginator("describe_project_versions")
        describe_projects_paginator: DescribeProjectsPaginator = client.get_paginator("describe_projects")
        list_collections_paginator: ListCollectionsPaginator = client.get_paginator("list_collections")
        list_dataset_entries_paginator: ListDatasetEntriesPaginator = client.get_paginator("list_dataset_entries")
        list_dataset_labels_paginator: ListDatasetLabelsPaginator = client.get_paginator("list_dataset_labels")
        list_faces_paginator: ListFacesPaginator = client.get_paginator("list_faces")
        list_stream_processors_paginator: ListStreamProcessorsPaginator = client.get_paginator("list_stream_processors")
    ```


### Waiters annotations

`types_aiobotocore_rekognition.waiter` module contains type annotations for all waiters.

```python
from aiobotocore.session import get_session

from types_aiobotocore_rekognition.client import RekognitionClient
from types_aiobotocore_rekognition.waiter import (
    ProjectVersionRunningWaiter,
    ProjectVersionTrainingCompletedWaiter,
)

session = get_session()
async with session.create_client("rekognition") as client:
    client: RekognitionClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        project_version_running_waiter: ProjectVersionRunningWaiter = client.get_waiter("project_version_running")
        project_version_training_completed_waiter: ProjectVersionTrainingCompletedWaiter = client.get_waiter("project_version_training_completed")
    ```





<a id="literals"></a>

### Literals

`types_aiobotocore_rekognition.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_rekognition.literals import (
    AttributeType,
    BodyPartType,
    CelebrityRecognitionSortByType,
    ContentClassifierType,
    ContentModerationSortByType,
    DatasetStatusMessageCodeType,
    DatasetStatusType,
    DatasetTypeType,
    DescribeProjectVersionsPaginatorName,
    DescribeProjectsPaginatorName,
    EmotionNameType,
    FaceAttributesType,
    FaceSearchSortByType,
    GenderTypeType,
    KnownGenderTypeType,
    LabelDetectionSortByType,
    LandmarkTypeType,
    ListCollectionsPaginatorName,
    ListDatasetEntriesPaginatorName,
    ListDatasetLabelsPaginatorName,
    ListFacesPaginatorName,
    ListStreamProcessorsPaginatorName,
    OrientationCorrectionType,
    PersonTrackingSortByType,
    ProjectStatusType,
    ProjectVersionRunningWaiterName,
    ProjectVersionStatusType,
    ProjectVersionTrainingCompletedWaiterName,
    ProtectiveEquipmentTypeType,
    QualityFilterType,
    ReasonType,
    SegmentTypeType,
    StreamProcessorStatusType,
    TechnicalCueTypeType,
    TextTypesType,
    VideoColorRangeType,
    VideoJobStatusType,
    RekognitionServiceName,
    ServiceName,
    ResourceServiceName,
    PaginatorName,
    WaiterName,
    RegionName,
)

def check_value(value: AttributeType) -> bool:
    ...
````

<a id="typed-dictionaries"></a>

### Typed dictionaries

`types_aiobotocore_rekognition.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_rekognition.type_defs import (
    AgeRangeTypeDef,
    AudioMetadataTypeDef,
    BeardTypeDef,
    BlackFrameTypeDef,
    BoundingBoxTypeDef,
    KnownGenderTypeDef,
    ResponseMetadataTypeDef,
    EmotionTypeDef,
    ImageQualityTypeDef,
    LandmarkTypeDef,
    PoseTypeDef,
    SmileTypeDef,
    ModerationLabelTypeDef,
    CoversBodyPartTypeDef,
    CreateCollectionRequestRequestTypeDef,
    CreateProjectRequestRequestTypeDef,
    OutputConfigTypeDef,
    DatasetChangesTypeDef,
    DatasetStatsTypeDef,
    DatasetLabelStatsTypeDef,
    DatasetMetadataTypeDef,
    DeleteCollectionRequestRequestTypeDef,
    DeleteDatasetRequestRequestTypeDef,
    DeleteFacesRequestRequestTypeDef,
    DeleteProjectRequestRequestTypeDef,
    DeleteProjectVersionRequestRequestTypeDef,
    DeleteStreamProcessorRequestRequestTypeDef,
    DescribeCollectionRequestRequestTypeDef,
    DescribeDatasetRequestRequestTypeDef,
    PaginatorConfigTypeDef,
    WaiterConfigTypeDef,
    DescribeProjectVersionsRequestRequestTypeDef,
    DescribeProjectsRequestRequestTypeDef,
    DescribeStreamProcessorRequestRequestTypeDef,
    HumanLoopActivationOutputTypeDef,
    ProtectiveEquipmentSummarizationAttributesTypeDef,
    ProtectiveEquipmentSummaryTypeDef,
    DetectionFilterTypeDef,
    DistributeDatasetTypeDef,
    EyeOpenTypeDef,
    EyeglassesTypeDef,
    GenderTypeDef,
    MouthOpenTypeDef,
    MustacheTypeDef,
    SunglassesTypeDef,
    FaceSearchSettingsTypeDef,
    PointTypeDef,
    GetCelebrityInfoRequestRequestTypeDef,
    GetCelebrityRecognitionRequestRequestTypeDef,
    VideoMetadataTypeDef,
    GetContentModerationRequestRequestTypeDef,
    GetFaceDetectionRequestRequestTypeDef,
    GetFaceSearchRequestRequestTypeDef,
    GetLabelDetectionRequestRequestTypeDef,
    GetPersonTrackingRequestRequestTypeDef,
    GetSegmentDetectionRequestRequestTypeDef,
    SegmentTypeInfoTypeDef,
    GetTextDetectionRequestRequestTypeDef,
    S3ObjectTypeDef,
    HumanLoopDataAttributesTypeDef,
    KinesisDataStreamTypeDef,
    KinesisVideoStreamTypeDef,
    ParentTypeDef,
    ListCollectionsRequestRequestTypeDef,
    ListDatasetEntriesRequestRequestTypeDef,
    ListDatasetLabelsRequestRequestTypeDef,
    ListFacesRequestRequestTypeDef,
    ListStreamProcessorsRequestRequestTypeDef,
    StreamProcessorTypeDef,
    ListTagsForResourceRequestRequestTypeDef,
    NotificationChannelTypeDef,
    SearchFacesRequestRequestTypeDef,
    ShotSegmentTypeDef,
    TechnicalCueSegmentTypeDef,
    StartProjectVersionRequestRequestTypeDef,
    StartShotDetectionFilterTypeDef,
    StartStreamProcessorRequestRequestTypeDef,
    StopProjectVersionRequestRequestTypeDef,
    StopStreamProcessorRequestRequestTypeDef,
    TagResourceRequestRequestTypeDef,
    UntagResourceRequestRequestTypeDef,
    StartTechnicalCueDetectionFilterTypeDef,
    ComparedSourceImageFaceTypeDef,
    FaceTypeDef,
    InstanceTypeDef,
    RegionOfInterestTypeDef,
    CreateCollectionResponseTypeDef,
    CreateDatasetResponseTypeDef,
    CreateProjectResponseTypeDef,
    CreateProjectVersionResponseTypeDef,
    CreateStreamProcessorResponseTypeDef,
    DeleteCollectionResponseTypeDef,
    DeleteFacesResponseTypeDef,
    DeleteProjectResponseTypeDef,
    DeleteProjectVersionResponseTypeDef,
    DescribeCollectionResponseTypeDef,
    GetCelebrityInfoResponseTypeDef,
    ListCollectionsResponseTypeDef,
    ListDatasetEntriesResponseTypeDef,
    ListTagsForResourceResponseTypeDef,
    StartCelebrityRecognitionResponseTypeDef,
    StartContentModerationResponseTypeDef,
    StartFaceDetectionResponseTypeDef,
    StartFaceSearchResponseTypeDef,
    StartLabelDetectionResponseTypeDef,
    StartPersonTrackingResponseTypeDef,
    StartProjectVersionResponseTypeDef,
    StartSegmentDetectionResponseTypeDef,
    StartTextDetectionResponseTypeDef,
    StopProjectVersionResponseTypeDef,
    ComparedFaceTypeDef,
    ContentModerationDetectionTypeDef,
    EquipmentDetectionTypeDef,
    UpdateDatasetEntriesRequestRequestTypeDef,
    DatasetDescriptionTypeDef,
    DatasetLabelDescriptionTypeDef,
    ProjectDescriptionTypeDef,
    DescribeProjectVersionsRequestDescribeProjectVersionsPaginateTypeDef,
    DescribeProjectsRequestDescribeProjectsPaginateTypeDef,
    ListCollectionsRequestListCollectionsPaginateTypeDef,
    ListDatasetEntriesRequestListDatasetEntriesPaginateTypeDef,
    ListDatasetLabelsRequestListDatasetLabelsPaginateTypeDef,
    ListFacesRequestListFacesPaginateTypeDef,
    ListStreamProcessorsRequestListStreamProcessorsPaginateTypeDef,
    DescribeProjectVersionsRequestProjectVersionRunningWaitTypeDef,
    DescribeProjectVersionsRequestProjectVersionTrainingCompletedWaitTypeDef,
    DetectModerationLabelsResponseTypeDef,
    DistributeDatasetEntriesRequestRequestTypeDef,
    FaceDetailTypeDef,
    StreamProcessorSettingsTypeDef,
    GeometryTypeDef,
    GroundTruthManifestTypeDef,
    ImageTypeDef,
    SummaryTypeDef,
    VideoTypeDef,
    HumanLoopConfigTypeDef,
    StreamProcessorOutputTypeDef,
    StreamProcessorInputTypeDef,
    ListStreamProcessorsResponseTypeDef,
    SegmentDetectionTypeDef,
    StartSegmentDetectionFiltersTypeDef,
    FaceMatchTypeDef,
    ListFacesResponseTypeDef,
    LabelTypeDef,
    DetectTextFiltersTypeDef,
    StartTextDetectionFiltersTypeDef,
    CelebrityTypeDef,
    CompareFacesMatchTypeDef,
    GetContentModerationResponseTypeDef,
    ProtectiveEquipmentBodyPartTypeDef,
    DescribeDatasetResponseTypeDef,
    ListDatasetLabelsResponseTypeDef,
    DescribeProjectsResponseTypeDef,
    CelebrityDetailTypeDef,
    DetectFacesResponseTypeDef,
    FaceDetectionTypeDef,
    FaceRecordTypeDef,
    PersonDetailTypeDef,
    UnindexedFaceTypeDef,
    CustomLabelTypeDef,
    TextDetectionTypeDef,
    AssetTypeDef,
    DatasetSourceTypeDef,
    CompareFacesRequestRequestTypeDef,
    DetectCustomLabelsRequestRequestTypeDef,
    DetectFacesRequestRequestTypeDef,
    DetectLabelsRequestRequestTypeDef,
    DetectProtectiveEquipmentRequestRequestTypeDef,
    IndexFacesRequestRequestTypeDef,
    RecognizeCelebritiesRequestRequestTypeDef,
    SearchFacesByImageRequestRequestTypeDef,
    EvaluationResultTypeDef,
    StartCelebrityRecognitionRequestRequestTypeDef,
    StartContentModerationRequestRequestTypeDef,
    StartFaceDetectionRequestRequestTypeDef,
    StartFaceSearchRequestRequestTypeDef,
    StartLabelDetectionRequestRequestTypeDef,
    StartPersonTrackingRequestRequestTypeDef,
    DetectModerationLabelsRequestRequestTypeDef,
    CreateStreamProcessorRequestRequestTypeDef,
    DescribeStreamProcessorResponseTypeDef,
    GetSegmentDetectionResponseTypeDef,
    StartSegmentDetectionRequestRequestTypeDef,
    SearchFacesByImageResponseTypeDef,
    SearchFacesResponseTypeDef,
    DetectLabelsResponseTypeDef,
    LabelDetectionTypeDef,
    DetectTextRequestRequestTypeDef,
    StartTextDetectionRequestRequestTypeDef,
    RecognizeCelebritiesResponseTypeDef,
    CompareFacesResponseTypeDef,
    ProtectiveEquipmentPersonTypeDef,
    CelebrityRecognitionTypeDef,
    GetFaceDetectionResponseTypeDef,
    PersonDetectionTypeDef,
    PersonMatchTypeDef,
    IndexFacesResponseTypeDef,
    DetectCustomLabelsResponseTypeDef,
    DetectTextResponseTypeDef,
    TextDetectionResultTypeDef,
    TestingDataTypeDef,
    TrainingDataTypeDef,
    ValidationDataTypeDef,
    CreateDatasetRequestRequestTypeDef,
    GetLabelDetectionResponseTypeDef,
    DetectProtectiveEquipmentResponseTypeDef,
    GetCelebrityRecognitionResponseTypeDef,
    GetPersonTrackingResponseTypeDef,
    GetFaceSearchResponseTypeDef,
    GetTextDetectionResponseTypeDef,
    CreateProjectVersionRequestRequestTypeDef,
    TestingDataResultTypeDef,
    TrainingDataResultTypeDef,
    ProjectVersionDescriptionTypeDef,
    DescribeProjectVersionsResponseTypeDef,
)

def get_structure() -> AgeRangeTypeDef:
    return {
      ...
    }
```

<a id="how-it-works"></a>

## How it works

Fully automated
[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefully
generates type annotations for each service, patiently waiting for
`aiobotocore` updates. It delivers a drop-in type annotations for you and makes
sure that:

- All available `aiobotocore` services are covered.
- Each public class and method of every `aiobotocore` service gets valid type
  annotations extracted from the documentation (blame `botocore` docs if types
  are incorrect).
- Type annotations include up-to-date documentation.
- Link to documentation is provided for every method.
- Code is processed by [black](https://github.com/psf/black) and
  [isort](https://github.com/PyCQA/isort) for readability.

<a id="what's-new"></a>

## What's new

<a id="implemented-features"></a>

### Implemented features

- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries
- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`
  compatibility
- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type
  annotations for each service
- Generated `TypeDefs` for each service
- Generated `Literals` for each service
- Auto discovery of types for `boto3.client` and `boto3.session` calls
- Auto discovery of types for `session.client` and `session.session` calls
- Auto discovery of types for `client.get_waiter` and `client.get_paginator`
  calls
- Auto discovery of types for `ServiceResource` and `Resource` collections
- Auto discovery of types for `aiobotocore.Session.create_client` calls

<a id="latest-changes"></a>

### Latest changes

Builder changelog can be found in
[Releases](https://github.com/youtype/mypy_boto3_builder/releases).

<a id="versioning"></a>

## Versioning

`types-aiobotocore-rekognition` version is the same as related `aiobotocore`
version and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/)
format.

<a id="thank-you"></a>

## Thank you

- [Allie Fitter](https://github.com/alliefitter) for
  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),
  this package is based on top of his work
- [black](https://github.com/psf/black) developers for an awesome formatting
  tool
- [Timothy Edmund Crosley](https://github.com/timothycrosley) for
  [isort](https://github.com/PyCQA/isort) and how flexible it is
- [mypy](https://github.com/python/mypy) developers for doing all dirty work
  for us
- [pyright](https://github.com/microsoft/pyright) team for the new era of typed
  Python

<a id="documentation"></a>

## Documentation

All services type annotations can be found in
[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_rekognition/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)
repository.


