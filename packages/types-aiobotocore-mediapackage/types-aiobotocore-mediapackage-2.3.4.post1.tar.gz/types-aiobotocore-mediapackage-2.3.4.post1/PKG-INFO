Metadata-Version: 2.1
Name: types-aiobotocore-mediapackage
Version: 2.3.4.post1
Summary: Type annotations for aiobotocore.MediaPackage 2.3.4 service generated with mypy-boto3-builder 7.8.0
Home-page: https://github.com/youtype/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_mediapackage/
Project-URL: Source, https://github.com/youtype/mypy_boto3_builder
Project-URL: Tracker, https://github.com/youtype/mypy_boto3_builder/issues
Keywords: aiobotocore mediapackage type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown

<a id="types-aiobotocore-mediapackage"></a>

# types-aiobotocore-mediapackage

[![PyPI - types-aiobotocore-mediapackage](https://img.shields.io/pypi/v/types-aiobotocore-mediapackage.svg?color=blue)](https://pypi.org/project/types-aiobotocore-mediapackage)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-mediapackage.svg?color=blue)](https://pypi.org/project/types-aiobotocore-mediapackage)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-mediapackage?color=blue)](https://pypistats.org/packages/types-aiobotocore-mediapackage)

![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[aiobotocore.MediaPackage 2.3.4](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/mediapackage.html#MediaPackage)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 7.8.0](https://github.com/youtype/mypy_boto3_builder).

More information can be found on
[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in
[types-aiobotocore-mediapackage docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_mediapackage/).

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)

- [types-aiobotocore-mediapackage](#types-aiobotocore-mediapackage)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [How to uninstall](#how-to-uninstall)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Emacs](#emacs)
    - [Sublime Text](#sublime-text)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `MediaPackage`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `MediaPackage` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[mediapackage]'


# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[mediapackage]'


# standalone installation
python -m pip install types-aiobotocore-mediapackage
```

<a id="how-to-uninstall"></a>

## How to uninstall

```bash
python -m pip uninstall -y types-aiobotocore-mediapackage
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[mediapackage]` in your environment:

```bash
python -m pip install 'types-aiobotocore[mediapackage]'
```

Both type checking and code completion should now work. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pycharm"></a>

### PyCharm

Install `types-aiobotocore-lite[mediapackage]` in your environment:

```bash
python -m pip install 'types-aiobotocore-lite[mediapackage]'`
```

Both type checking and code completion should now work. Explicit type
annotations **are required**.

Use `types-aiobotocore` package instead for implicit type discovery.

<a id="emacs"></a>

### Emacs

- Install `types-aiobotocore` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[mediapackage]'
```

- Install [use-package](https://github.com/jwiegley/use-package),
  [lsp](https://github.com/emacs-lsp/lsp-mode/),
  [company](https://github.com/company-mode/company-mode) and
  [flycheck](https://github.com/flycheck/flycheck) packages
- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package

```elisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp)))  ; or lsp-deferred
  :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3"))
  )
```

- Make sure emacs uses the environment where you have installed
  `types-aiobotocore`

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="sublime-text"></a>

### Sublime Text

- Install `types-aiobotocore[mediapackage]` with services you use in your
  environment:

```bash
python -m pip install 'types-aiobotocore[mediapackage]'
```

- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) package

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[mediapackage]` in your environment:

```bash
python -m pip install 'types-aiobotocore[mediapackage]'`
```

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `npm i -g pyright`
- Install `types-aiobotocore[mediapackage]` in your environment:

```bash
python -m pip install 'types-aiobotocore[mediapackage]'
```

Optionally, you can install `types-aiobotocore` to `typings` folder.

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`MediaPackageClient` provides annotations for
`session.create_client("mediapackage")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_mediapackage import MediaPackageClient

session = get_session()
async with session.create_client("mediapackage") as client:
    client: MediaPackageClient
    # now client usage is checked by mypy and IDE should provide code completion
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_mediapackage.paginator` module contains type annotations for
all paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_mediapackage import MediaPackageClient
from types_aiobotocore_mediapackage.paginator import (
    ListChannelsPaginator,
    ListHarvestJobsPaginator,
    ListOriginEndpointsPaginator,
)

session = get_session()
async with session.create_client("mediapackage") as client:
    client: MediaPackageClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        list_channels_paginator: ListChannelsPaginator = client.get_paginator("list_channels")
        list_harvest_jobs_paginator: ListHarvestJobsPaginator = client.get_paginator("list_harvest_jobs")
        list_origin_endpoints_paginator: ListOriginEndpointsPaginator = client.get_paginator("list_origin_endpoints")
    ```







### Literals

`types_aiobotocore_mediapackage.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_mediapackage.literals import (
    AdMarkersType,
    AdTriggersElementType,
    AdsOnDeliveryRestrictionsType,
    EncryptionMethodType,
    ListChannelsPaginatorName,
    ListHarvestJobsPaginatorName,
    ListOriginEndpointsPaginatorName,
    ManifestLayoutType,
    OriginationType,
    PeriodTriggersElementType,
    PlaylistTypeType,
    PresetSpeke20AudioType,
    PresetSpeke20VideoType,
    ProfileType,
    SegmentTemplateFormatType,
    StatusType,
    StreamOrderType,
    UtcTimingType,
    MediaPackageServiceName,
    ServiceName,
    ResourceServiceName,
    PaginatorName,
    RegionName,
)

def check_value(value: AdMarkersType) -> bool:
    ...
````

### Typed dictionaries

`types_aiobotocore_mediapackage.type_defs` module contains structures and
shapes assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_mediapackage.type_defs import (
    AuthorizationTypeDef,
    EgressAccessLogsTypeDef,
    IngressAccessLogsTypeDef,
    HlsManifestCreateOrUpdateParametersTypeDef,
    StreamSelectionTypeDef,
    HlsManifestTypeDef,
    ResponseMetadataTypeDef,
    CreateChannelRequestRequestTypeDef,
    S3DestinationTypeDef,
    DeleteChannelRequestRequestTypeDef,
    DeleteOriginEndpointRequestRequestTypeDef,
    DescribeChannelRequestRequestTypeDef,
    DescribeHarvestJobRequestRequestTypeDef,
    DescribeOriginEndpointRequestRequestTypeDef,
    EncryptionContractConfigurationTypeDef,
    IngestEndpointTypeDef,
    PaginatorConfigTypeDef,
    ListChannelsRequestRequestTypeDef,
    ListHarvestJobsRequestRequestTypeDef,
    ListOriginEndpointsRequestRequestTypeDef,
    ListTagsForResourceRequestRequestTypeDef,
    RotateChannelCredentialsRequestRequestTypeDef,
    RotateIngestEndpointCredentialsRequestRequestTypeDef,
    TagResourceRequestRequestTypeDef,
    UntagResourceRequestRequestTypeDef,
    UpdateChannelRequestRequestTypeDef,
    ConfigureLogsRequestRequestTypeDef,
    EmptyResponseMetadataTypeDef,
    ListTagsForResourceResponseTypeDef,
    CreateHarvestJobRequestRequestTypeDef,
    CreateHarvestJobResponseTypeDef,
    DescribeHarvestJobResponseTypeDef,
    HarvestJobTypeDef,
    SpekeKeyProviderTypeDef,
    HlsIngestTypeDef,
    ListChannelsRequestListChannelsPaginateTypeDef,
    ListHarvestJobsRequestListHarvestJobsPaginateTypeDef,
    ListOriginEndpointsRequestListOriginEndpointsPaginateTypeDef,
    ListHarvestJobsResponseTypeDef,
    CmafEncryptionTypeDef,
    DashEncryptionTypeDef,
    HlsEncryptionTypeDef,
    MssEncryptionTypeDef,
    ChannelTypeDef,
    ConfigureLogsResponseTypeDef,
    CreateChannelResponseTypeDef,
    DescribeChannelResponseTypeDef,
    RotateChannelCredentialsResponseTypeDef,
    RotateIngestEndpointCredentialsResponseTypeDef,
    UpdateChannelResponseTypeDef,
    CmafPackageCreateOrUpdateParametersTypeDef,
    CmafPackageTypeDef,
    DashPackageTypeDef,
    HlsPackageTypeDef,
    MssPackageTypeDef,
    ListChannelsResponseTypeDef,
    CreateOriginEndpointRequestRequestTypeDef,
    CreateOriginEndpointResponseTypeDef,
    DescribeOriginEndpointResponseTypeDef,
    OriginEndpointTypeDef,
    UpdateOriginEndpointRequestRequestTypeDef,
    UpdateOriginEndpointResponseTypeDef,
    ListOriginEndpointsResponseTypeDef,
)

def get_structure() -> AuthorizationTypeDef:
    return {
      ...
    }
```

## How it works

Fully automated
[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefully
generates type annotations for each service, patiently waiting for
`aiobotocore` updates. It delivers a drop-in type annotations for you and makes
sure that:

- All available `aiobotocore` services are covered.
- Each public class and method of every `aiobotocore` service gets valid type
  annotations extracted from the documentation (blame `botocore` docs if types
  are incorrect).
- Type annotations include up-to-date documentation.
- Link to documentation is provided for every method.
- Code is processed by [black](https://github.com/psf/black) and
  [isort](https://github.com/PyCQA/isort) for readability.

## What's new

### Implemented features

- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries
- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`
  compatibility
- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type
  annotations for each service
- Generated `TypeDefs` for each service
- Generated `Literals` for each service
- Auto discovery of types for `boto3.client` and `boto3.session` calls
- Auto discovery of types for `session.client` and `session.session` calls
- Auto discovery of types for `client.get_waiter` and `client.get_paginator`
  calls
- Auto discovery of types for `ServiceResource` and `Resource` collections
- Auto discovery of types for `aiobotocore.Session.create_client` calls

### Latest changes

Builder changelog can be found in
[Releases](https://github.com/youtype/mypy_boto3_builder/releases).

## Versioning

`types-aiobotocore-mediapackage` version is the same as related `aiobotocore`
version and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/)
format.

## Thank you

- [Allie Fitter](https://github.com/alliefitter) for
  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),
  this package is based on top of his work
- [black](https://github.com/psf/black) developers for an awesome formatting
  tool
- [Timothy Edmund Crosley](https://github.com/timothycrosley) for
  [isort](https://github.com/PyCQA/isort) and how flexible it is
- [mypy](https://github.com/python/mypy) developers for doing all dirty work
  for us
- [pyright](https://github.com/microsoft/pyright) team for the new era of typed
  Python

## Documentation

All services type annotations can be found in
[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_mediapackage/)

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)
repository.


