# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['azure_signin']

package_data = \
{'': ['*']}

install_requires = \
['django', 'msal>=1.18.0,<2.0.0']

setup_kwargs = {
    'name': 'django-azure-active-directory-signin',
    'version': '0.1.2',
    'description': 'Sign-in users to your Django Web app with Azure Active Directory.',
    'long_description': '# Django Azure Active Directory Sign-In\n\n[![Django 4.0.6](https://img.shields.io/badge/Django-4.0.6-green)](https://docs.djangoproject.com/en/4.0/releases/4.0.6/)\n[![License BSD 3-Clause](https://img.shields.io/badge/License-BSD%203--Clause-blue.svg)](LICENSE)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![codecov](https://codecov.io/gh/JV-conseil-Internet-Consulting/django-azure-active-directory-signin/branch/main/graph/badge.svg?token=WLCTWKAPF6)](https://codecov.io/gh/JV-conseil-Internet-Consulting/django-azure-active-directory-signin)\n[![Donate with PayPal](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/donate/?hosted_button_id=P3DGL6EANDY96)\n[![Follow JV conseil â€“ Internet Consulting on Twitter](https://img.shields.io/twitter/follow/JVconseil.svg?style=social&logo=twitter)](https://twitter.com/JVconseil)\n\nSign-in users to your Django Web app with Azure Active Directory.\n\n## Description\n\n`django-azure-active-directory-signin` is a Django app which wraps the great [MSAL](https://github.com/AzureAD/microsoft-authentication-library-for-python)\npackage to enable authentication against Microsoft\'s Azure Active Directory in Django projects.\n\n![Sign-in users to your Django Web app with Azure Active Directory](https://docs.microsoft.com/en-us/azure/active-directory/develop/media/quickstart-v2-python-webapp/python-quickstart.svg)\n\nThe app includes `login`, `logout` and `callback` authentication views, a decorator\nto protect individual views, and middleware which allows the entire site to require user\nauthentication by default, with the ability to exempt specified views.\n\nThis project is in no way affiliated with Microsoft.\n\n## Installation\n\nFrom PyPi:\n\n```bash\npip install django-azure-active-directory-signin\n```\n\n## Configuration\n\n### Azure App Registration setup\n\n- Register an app at <https://portal.azure.com/>.\n- Add a client secret and note it down.\n- Complete the Redirect URI list:\n  - `https://<your-domain>/azure-signin/callback`\n  - `https://127.0.0.1:8000/azure-signin/callback`\n  - `https://localhost:8000/azure-signin/callback`\n\n### Settings\n\nAdd the following to your `settings.py`, replacing the variables in braces with the values\nfrom your Azure app:\n\n```py\nINSTALLED_APPS += [\n    "azure_signin",\n]\n\nAZURE_SIGNIN = {\n    "CLIENT_ID": os.environ.get("CLIENT_ID"),\n    "CLIENT_SECRET": os.environ.get("CLIENT_SECRET"),\n    "TENANT_ID": os.environ.get("TENANT_ID"),\n    "RENAME_ATTRIBUTES": [\n        ("employeeNumber", "employee_id"),\n        ("affiliationNumber", "omk2"),\n    ],\n    "REDIRECT_URI": "https://<domain>/azure_signin/callback",  # Optional\n    "SCOPES": ["User.Read.All"],  # Optional\n    "AUTHORITY": "https://login.microsoftonline.com/<tenant id>",  # Optional Or https://login.microsoftonline.com/common if multi-tenant\n    "LOGOUT_REDIRECT_URI": "https://<domain>/logout",  # Optional\n    "PUBLIC_URLS": ["<public:view_name>",]  # Optional, public views accessible by non-authenticated users\n}\n\nAUTHENTICATION_BACKENDS += [\n    "azure_signin.backends.AzureSigninBackend",\n]\n\nLOGIN_URL = "azure_signin:login"\nLOGIN_REDIRECT_URL = "/" # Or any other endpoint\nLOGOUT_REDIRECT_URL = LOGIN_REDIRECT_URL\n```\n\n#### Note: You should obfuscate the credentials by using environment variables\n\n### Installed apps\n\nAdd the following to your `INSTALLED_APPS`:\n\n```py\nINSTALLED_APPS += [\n    "azure_signin",\n]\n```\n\n### Authentication backend\n\nConfigure the authentication backend:\n\n```py\nAUTHENTICATION_BACKENDS += [\n    "azure_signin.backends.AzureSigninBackend",\n]\n```\n\nCan be subclassed to customize validation rules for users.\n\n```py\nimport logging\n\nfrom azure_signin.backends import AzureSigninBackend\n\nlogger = logging.getLogger(__name__)\n\nclass CustomAzureSigninBackend(AzureSigninBackend):\n    "Subclass AzureSigninBackend to cutomize validation rules for users."\n\n    def is_valid_user(self, user: dict, *args, **kwargs) -> bool:\n        "is_valid_user"\n        output = super().is_valid_user(user, *args, **kwargs)\n        try:\n            "run extra tests here..."\n            pass\n        except Exception as e:\n            logger.exception(e)\n        logger.debug("is_valid_user: %s", output)\n        return output\n```\n\n### URLs\n\nInclude the app\'s URLs in your `urlpatterns`:\n\n```py\nfrom django.urls import path, include\n\nurlpatterns += [\n    path("azure-signin/", include("azure_signin.urls", namespace="azure_signin")),\n]\n```\n\n## Usage\n\n### Decorator\n\nTo make user authentication a requirement for accessing an individual view, decorate the\nview like so:\n\n```python\nfrom azure_signin.decorators import azure_signin_required\nfrom django.shortcuts import HttpResponse\n\n@azure_signin_required\ndef protected_view(request):\n    return HttpResponse("A view protected by the decorator")\n```\n\n### Middleware\n\nIf you want to protect your entire site by default, you can use the middleware by adding the\nfollowing to your `settings.py`:\n\n```python\nMIDDLEWARE += [\n    "azure_signin.middleware.AzureSigninMiddleware",\n]\n```\n\nMake sure you add the middleware after Django\'s `session` and `authentication` middlewares so\nthat the request includes the session and user objects. Public URLs which need to be accessed by\nnon-authenticated users should be specified in the `settings.AZURE_SIGNIN["PUBLIC_URLS"]`, as\nshown above.\n\n## Credits\n\nThis app is heavily inspired by and builds on functionality in\n<https://github.com/AgileTek/django-azure-auth>, with both feature\nimprovements and code assurance through testing.\n\n## Readings ðŸ“š\n\n- [Quickstart: Add sign-in with Microsoft to a web app](https://docs.microsoft.com/en-us/azure/active-directory/develop/web-app-quickstart?pivots=devlang-python) (docs.microsoft.com)\n- [Microsoft Graph REST API v1.0](https://docs.microsoft.com/en-us/graph/api/user-get?view=graph-rest-1.0&tabs=http#permissions) Permissions (from least to most privileged): `User.Read, User.ReadWrite, User.ReadBasic.All, User.Read.All, User.ReadWrite.All, Directory.Read.All, Directory.ReadWrite.All` (docs.microsoft.com)\n',
    'author': 'JV conseil',
    'author_email': 'contact@jv-conseil.net',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/JV-conseil-Internet-Consulting/django-azure-active-directory-signin',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.9,<4.0',
}


setup(**setup_kwargs)
