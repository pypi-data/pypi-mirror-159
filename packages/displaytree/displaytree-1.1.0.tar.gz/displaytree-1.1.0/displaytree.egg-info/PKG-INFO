Metadata-Version: 2.1
Name: displaytree
Version: 1.1.0
Summary: Python package that helps you visualize your binary tree
Home-page: https://github.com/bprajeeth/displaytree
Download-URL: https://github.com/bprajeeth/displaytree/archive/refs/tags/v1.0.0.tar.gz
Author: bprajeeth
Author-email: bprajeeth285@gmail.com
License: MIT
Keywords: BINARY,BINARY TREE,PRINT,VISUALIZE,TREE,PRINT BINARY TREE,DISPLAY
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Education
Classifier: Topic :: Software Development :: Build Tools
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 3
Description-Content-Type: text/markdown
License-File: LICENSE.txt

<p align="center">
    <h1 align="center">displaytree - python package</h1>
    
<p align="center"><img src="https://img.shields.io/badge/version-v1.1.0-orange"> <img src="https://img.shields.io/badge/-Python-blue">  <img src="https://img.shields.io/apm/l/VIM-MODE"> <p>

### **displaytree** is a **Python package** that allows us to **visualize our binarytree**.

## Compatibility ​​​🐍​
#### This package is compatible with both **Python 2** and **Python 3**

## Install ​🖥️​
```
 pip install displaytree
```
## Usage ​​📝​
```
from displaytree import binarytree
```
#### ``` binarytree(root_node, "right", "left", "value")```
- The above python syntax prints the binary tree in the shape/structure of the created tree, hence helping us to visualize our created tree.
#### There are **Four arguments** that should be passed: 
- **root_node** - Pass the root node(also an object of the node class) of the created tree.
- **right** - Pass the pointer attribute that points to the right node as a string. 
- **left** - Pass the pointer attribute that points to the left node as a string.
-  **value** - Pass the value attribute of the node which you want to be printed in each node of the tree as a string.

## Features ​​​🔥​
- No need to for any modification in the original python code.
- You can use your own NODE class for creating and operating your binary tree.
- Thus, helping us to add as many attributes in the NODE class according our requirements. 
- When a NODE is not present/NULL, it will be presented as ​​​❓​ in the tree representation.
- Equally spaced representation of the tree.
- Clean and elegant look for clear visualization
- Created with ​​​🧡​

## Operating Systems ​​​💾​
- Compatible with all major operating systems.

## Project links ​​​🔗​
- #### [Github](https://github.com/bprajeeth/displaytree)
- #### [PyPI](https://pypi.org/project/displaytree/)
