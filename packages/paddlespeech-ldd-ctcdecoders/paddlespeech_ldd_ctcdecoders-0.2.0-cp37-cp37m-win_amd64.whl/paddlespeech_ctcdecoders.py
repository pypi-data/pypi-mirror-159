# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_paddlespeech_ctcdecoders')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_paddlespeech_ctcdecoders')
    _paddlespeech_ctcdecoders = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_paddlespeech_ctcdecoders', [dirname(__file__)])
        except ImportError:
            import _paddlespeech_ctcdecoders
            return _paddlespeech_ctcdecoders
        try:
            _mod = imp.load_module('_paddlespeech_ctcdecoders', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _paddlespeech_ctcdecoders = swig_import_helper()
    del swig_import_helper
else:
    import _paddlespeech_ctcdecoders
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _paddlespeech_ctcdecoders.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _paddlespeech_ctcdecoders.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _paddlespeech_ctcdecoders.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _paddlespeech_ctcdecoders.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _paddlespeech_ctcdecoders.SwigPyIterator_equal(self, x)

    def copy(self):
        return _paddlespeech_ctcdecoders.SwigPyIterator_copy(self)

    def next(self):
        return _paddlespeech_ctcdecoders.SwigPyIterator_next(self)

    def __next__(self):
        return _paddlespeech_ctcdecoders.SwigPyIterator___next__(self)

    def previous(self):
        return _paddlespeech_ctcdecoders.SwigPyIterator_previous(self)

    def advance(self, n):
        return _paddlespeech_ctcdecoders.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _paddlespeech_ctcdecoders.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _paddlespeech_ctcdecoders.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _paddlespeech_ctcdecoders.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _paddlespeech_ctcdecoders.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _paddlespeech_ctcdecoders.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _paddlespeech_ctcdecoders.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _paddlespeech_ctcdecoders.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.DoubleVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.DoubleVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.DoubleVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.DoubleVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.DoubleVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.DoubleVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.DoubleVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.DoubleVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.DoubleVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.DoubleVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.DoubleVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.DoubleVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.DoubleVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.DoubleVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        this = _paddlespeech_ctcdecoders.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.DoubleVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.DoubleVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.DoubleVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.DoubleVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.DoubleVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _paddlespeech_ctcdecoders.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.IntVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.IntVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.IntVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.IntVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.IntVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.IntVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.IntVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.IntVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.IntVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.IntVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.IntVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.IntVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.IntVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.IntVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.IntVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.IntVector_erase(self, *args)

    def __init__(self, *args):
        this = _paddlespeech_ctcdecoders.new_IntVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.IntVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.IntVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.IntVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.IntVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.IntVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.IntVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.IntVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_IntVector
    __del__ = lambda self: None
IntVector_swigregister = _paddlespeech_ctcdecoders.IntVector_swigregister
IntVector_swigregister(IntVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.StringVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.StringVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.StringVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.StringVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.StringVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.StringVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.StringVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.StringVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.StringVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.StringVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.StringVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.StringVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.StringVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.StringVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.StringVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _paddlespeech_ctcdecoders.new_StringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.StringVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.StringVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.StringVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.StringVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.StringVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.StringVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.StringVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _paddlespeech_ctcdecoders.StringVector_swigregister
StringVector_swigregister(StringVector)

class VectorOfStructVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VectorOfStructVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VectorOfStructVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_erase(self, *args)

    def __init__(self, *args):
        this = _paddlespeech_ctcdecoders.new_VectorOfStructVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.VectorOfStructVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_VectorOfStructVector
    __del__ = lambda self: None
VectorOfStructVector_swigregister = _paddlespeech_ctcdecoders.VectorOfStructVector_swigregister
VectorOfStructVector_swigregister(VectorOfStructVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.FloatVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.FloatVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.FloatVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.FloatVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.FloatVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.FloatVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.FloatVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.FloatVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.FloatVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.FloatVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.FloatVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.FloatVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.FloatVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.FloatVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.FloatVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.FloatVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.FloatVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.FloatVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector_erase(self, *args)

    def __init__(self, *args):
        this = _paddlespeech_ctcdecoders.new_FloatVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.FloatVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.FloatVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.FloatVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.FloatVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.FloatVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.FloatVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.FloatVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_FloatVector
    __del__ = lambda self: None
FloatVector_swigregister = _paddlespeech_ctcdecoders.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class Pair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Pair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        this = _paddlespeech_ctcdecoders.new_Pair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _paddlespeech_ctcdecoders.Pair_first_set
    __swig_getmethods__["first"] = _paddlespeech_ctcdecoders.Pair_first_get
    if _newclass:
        first = _swig_property(_paddlespeech_ctcdecoders.Pair_first_get, _paddlespeech_ctcdecoders.Pair_first_set)
    __swig_setmethods__["second"] = _paddlespeech_ctcdecoders.Pair_second_set
    __swig_getmethods__["second"] = _paddlespeech_ctcdecoders.Pair_second_get
    if _newclass:
        second = _swig_property(_paddlespeech_ctcdecoders.Pair_second_get, _paddlespeech_ctcdecoders.Pair_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_Pair
    __del__ = lambda self: None
Pair_swigregister = _paddlespeech_ctcdecoders.Pair_swigregister
Pair_swigregister(Pair)

class PairFloatStringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairFloatStringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairFloatStringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_erase(self, *args)

    def __init__(self, *args):
        this = _paddlespeech_ctcdecoders.new_PairFloatStringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.PairFloatStringVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_PairFloatStringVector
    __del__ = lambda self: None
PairFloatStringVector_swigregister = _paddlespeech_ctcdecoders.PairFloatStringVector_swigregister
PairFloatStringVector_swigregister(PairFloatStringVector)

class PairDoubleStringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDoubleStringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDoubleStringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_erase(self, *args)

    def __init__(self, *args):
        this = _paddlespeech_ctcdecoders.new_PairDoubleStringVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_PairDoubleStringVector
    __del__ = lambda self: None
PairDoubleStringVector_swigregister = _paddlespeech_ctcdecoders.PairDoubleStringVector_swigregister
PairDoubleStringVector_swigregister(PairDoubleStringVector)

class PairDoubleStringVector2(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PairDoubleStringVector2, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PairDoubleStringVector2, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_erase(self, *args)

    def __init__(self, *args):
        this = _paddlespeech_ctcdecoders.new_PairDoubleStringVector2(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.PairDoubleStringVector2_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_PairDoubleStringVector2
    __del__ = lambda self: None
PairDoubleStringVector2_swigregister = _paddlespeech_ctcdecoders.PairDoubleStringVector2_swigregister
PairDoubleStringVector2_swigregister(PairDoubleStringVector2)

class DoubleVector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector3, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _paddlespeech_ctcdecoders.DoubleVector3___nonzero__(self)

    def __bool__(self):
        return _paddlespeech_ctcdecoders.DoubleVector3___bool__(self)

    def __len__(self):
        return _paddlespeech_ctcdecoders.DoubleVector3___len__(self)

    def __getslice__(self, i, j):
        return _paddlespeech_ctcdecoders.DoubleVector3___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _paddlespeech_ctcdecoders.DoubleVector3___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3___delitem__(self, *args)

    def __getitem__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3___getitem__(self, *args)

    def __setitem__(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3___setitem__(self, *args)

    def pop(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_pop(self)

    def append(self, x):
        return _paddlespeech_ctcdecoders.DoubleVector3_append(self, x)

    def empty(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_empty(self)

    def size(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_size(self)

    def swap(self, v):
        return _paddlespeech_ctcdecoders.DoubleVector3_swap(self, v)

    def begin(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_begin(self)

    def end(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_end(self)

    def rbegin(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_rbegin(self)

    def rend(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_rend(self)

    def clear(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_clear(self)

    def get_allocator(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_get_allocator(self)

    def pop_back(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_pop_back(self)

    def erase(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3_erase(self, *args)

    def __init__(self, *args):
        this = _paddlespeech_ctcdecoders.new_DoubleVector3(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        return _paddlespeech_ctcdecoders.DoubleVector3_push_back(self, x)

    def front(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_front(self)

    def back(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_back(self)

    def assign(self, n, x):
        return _paddlespeech_ctcdecoders.DoubleVector3_assign(self, n, x)

    def resize(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3_resize(self, *args)

    def insert(self, *args):
        return _paddlespeech_ctcdecoders.DoubleVector3_insert(self, *args)

    def reserve(self, n):
        return _paddlespeech_ctcdecoders.DoubleVector3_reserve(self, n)

    def capacity(self):
        return _paddlespeech_ctcdecoders.DoubleVector3_capacity(self)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_DoubleVector3
    __del__ = lambda self: None
DoubleVector3_swigregister = _paddlespeech_ctcdecoders.DoubleVector3_swigregister
DoubleVector3_swigregister(DoubleVector3)


def IntDoublePairCompSecondRev(a, b):
    return _paddlespeech_ctcdecoders.IntDoublePairCompSecondRev(a, b)
IntDoublePairCompSecondRev = _paddlespeech_ctcdecoders.IntDoublePairCompSecondRev

def StringDoublePairCompSecondRev(a, b):
    return _paddlespeech_ctcdecoders.StringDoublePairCompSecondRev(a, b)
StringDoublePairCompSecondRev = _paddlespeech_ctcdecoders.StringDoublePairCompSecondRev

def DoubleStringPairCompFirstRev(a, b):
    return _paddlespeech_ctcdecoders.DoubleStringPairCompFirstRev(a, b)
DoubleStringPairCompFirstRev = _paddlespeech_ctcdecoders.DoubleStringPairCompFirstRev
class RetriveStrEnumerateVocab(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RetriveStrEnumerateVocab, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RetriveStrEnumerateVocab, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _paddlespeech_ctcdecoders.new_RetriveStrEnumerateVocab()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Add(self, index, str):
        return _paddlespeech_ctcdecoders.RetriveStrEnumerateVocab_Add(self, index, str)
    __swig_setmethods__["vocabulary"] = _paddlespeech_ctcdecoders.RetriveStrEnumerateVocab_vocabulary_set
    __swig_getmethods__["vocabulary"] = _paddlespeech_ctcdecoders.RetriveStrEnumerateVocab_vocabulary_get
    if _newclass:
        vocabulary = _swig_property(_paddlespeech_ctcdecoders.RetriveStrEnumerateVocab_vocabulary_get, _paddlespeech_ctcdecoders.RetriveStrEnumerateVocab_vocabulary_set)
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_RetriveStrEnumerateVocab
    __del__ = lambda self: None
RetriveStrEnumerateVocab_swigregister = _paddlespeech_ctcdecoders.RetriveStrEnumerateVocab_swigregister
RetriveStrEnumerateVocab_swigregister(RetriveStrEnumerateVocab)
cvar = _paddlespeech_ctcdecoders.cvar
OOV_SCORE = cvar.OOV_SCORE
START_TOKEN = cvar.START_TOKEN
UNK_TOKEN = cvar.UNK_TOKEN
END_TOKEN = cvar.END_TOKEN

class Scorer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Scorer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Scorer, name)
    __repr__ = _swig_repr

    def __init__(self, alpha, beta, lm_path, vocabulary):
        this = _paddlespeech_ctcdecoders.new_Scorer(alpha, beta, lm_path, vocabulary)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_Scorer
    __del__ = lambda self: None

    def get_log_cond_prob(self, words):
        return _paddlespeech_ctcdecoders.Scorer_get_log_cond_prob(self, words)

    def get_sent_log_prob(self, words):
        return _paddlespeech_ctcdecoders.Scorer_get_sent_log_prob(self, words)

    def get_max_order(self):
        return _paddlespeech_ctcdecoders.Scorer_get_max_order(self)

    def get_dict_size(self):
        return _paddlespeech_ctcdecoders.Scorer_get_dict_size(self)

    def is_character_based(self):
        return _paddlespeech_ctcdecoders.Scorer_is_character_based(self)

    def reset_params(self, alpha, beta):
        return _paddlespeech_ctcdecoders.Scorer_reset_params(self, alpha, beta)

    def make_ngram(self, prefix):
        return _paddlespeech_ctcdecoders.Scorer_make_ngram(self, prefix)

    def split_labels(self, labels):
        return _paddlespeech_ctcdecoders.Scorer_split_labels(self, labels)
    __swig_setmethods__["alpha"] = _paddlespeech_ctcdecoders.Scorer_alpha_set
    __swig_getmethods__["alpha"] = _paddlespeech_ctcdecoders.Scorer_alpha_get
    if _newclass:
        alpha = _swig_property(_paddlespeech_ctcdecoders.Scorer_alpha_get, _paddlespeech_ctcdecoders.Scorer_alpha_set)
    __swig_setmethods__["beta"] = _paddlespeech_ctcdecoders.Scorer_beta_set
    __swig_getmethods__["beta"] = _paddlespeech_ctcdecoders.Scorer_beta_get
    if _newclass:
        beta = _swig_property(_paddlespeech_ctcdecoders.Scorer_beta_get, _paddlespeech_ctcdecoders.Scorer_beta_set)
    __swig_setmethods__["dictionary"] = _paddlespeech_ctcdecoders.Scorer_dictionary_set
    __swig_getmethods__["dictionary"] = _paddlespeech_ctcdecoders.Scorer_dictionary_get
    if _newclass:
        dictionary = _swig_property(_paddlespeech_ctcdecoders.Scorer_dictionary_get, _paddlespeech_ctcdecoders.Scorer_dictionary_set)
Scorer_swigregister = _paddlespeech_ctcdecoders.Scorer_swigregister
Scorer_swigregister(Scorer)


def ctc_greedy_decoding(probs_seq, vocabulary, blank_id):
    return _paddlespeech_ctcdecoders.ctc_greedy_decoding(probs_seq, vocabulary, blank_id)
ctc_greedy_decoding = _paddlespeech_ctcdecoders.ctc_greedy_decoding

def ctc_beam_search_decoding(probs_seq, vocabulary, beam_size, cutoff_prob=1.0, cutoff_top_n=40, ext_scorer=None, blank_id=0):
    return _paddlespeech_ctcdecoders.ctc_beam_search_decoding(probs_seq, vocabulary, beam_size, cutoff_prob, cutoff_top_n, ext_scorer, blank_id)
ctc_beam_search_decoding = _paddlespeech_ctcdecoders.ctc_beam_search_decoding

def ctc_beam_search_decoding_batch(probs_split, vocabulary, beam_size, num_processes, cutoff_prob=1.0, cutoff_top_n=40, ext_scorer=None, blank_id=0):
    return _paddlespeech_ctcdecoders.ctc_beam_search_decoding_batch(probs_split, vocabulary, beam_size, num_processes, cutoff_prob, cutoff_top_n, ext_scorer, blank_id)
ctc_beam_search_decoding_batch = _paddlespeech_ctcdecoders.ctc_beam_search_decoding_batch
class CtcBeamSearchDecoderStorage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CtcBeamSearchDecoderStorage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CtcBeamSearchDecoderStorage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["root"] = _paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_root_set
    __swig_getmethods__["root"] = _paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_root_get
    if _newclass:
        root = _swig_property(_paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_root_get, _paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_root_set)
    __swig_setmethods__["prefixes"] = _paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_prefixes_set
    __swig_getmethods__["prefixes"] = _paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_prefixes_get
    if _newclass:
        prefixes = _swig_property(_paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_prefixes_get, _paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_prefixes_set)

    def __init__(self):
        this = _paddlespeech_ctcdecoders.new_CtcBeamSearchDecoderStorage()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_CtcBeamSearchDecoderStorage
    __del__ = lambda self: None
CtcBeamSearchDecoderStorage_swigregister = _paddlespeech_ctcdecoders.CtcBeamSearchDecoderStorage_swigregister
CtcBeamSearchDecoderStorage_swigregister(CtcBeamSearchDecoderStorage)

class CtcBeamSearchDecoderBatch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CtcBeamSearchDecoderBatch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CtcBeamSearchDecoderBatch, name)
    __repr__ = _swig_repr

    def __init__(self, vocabulary, batch_size, beam_size, num_processes, cutoff_prob, cutoff_top_n, ext_scorer, blank_id):
        this = _paddlespeech_ctcdecoders.new_CtcBeamSearchDecoderBatch(vocabulary, batch_size, beam_size, num_processes, cutoff_prob, cutoff_top_n, ext_scorer, blank_id)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _paddlespeech_ctcdecoders.delete_CtcBeamSearchDecoderBatch
    __del__ = lambda self: None

    def next(self, probs_split, has_value):
        return _paddlespeech_ctcdecoders.CtcBeamSearchDecoderBatch_next(self, probs_split, has_value)

    def decode(self):
        return _paddlespeech_ctcdecoders.CtcBeamSearchDecoderBatch_decode(self)

    def reset_state(self, batch_size, beam_size, num_processes, cutoff_prob, cutoff_top_n):
        return _paddlespeech_ctcdecoders.CtcBeamSearchDecoderBatch_reset_state(self, batch_size, beam_size, num_processes, cutoff_prob, cutoff_top_n)
CtcBeamSearchDecoderBatch_swigregister = _paddlespeech_ctcdecoders.CtcBeamSearchDecoderBatch_swigregister
CtcBeamSearchDecoderBatch_swigregister(CtcBeamSearchDecoderBatch)


def ctc_beam_search_decode_chunk(root, prefixes, probs_seq, vocabulary, beam_size, cutoff_prob, cutoff_top_n, ext_scorer, blank_id):
    return _paddlespeech_ctcdecoders.ctc_beam_search_decode_chunk(root, prefixes, probs_seq, vocabulary, beam_size, cutoff_prob, cutoff_top_n, ext_scorer, blank_id)
ctc_beam_search_decode_chunk = _paddlespeech_ctcdecoders.ctc_beam_search_decode_chunk

def get_decode_result(prefixes, vocabulary, beam_size, ext_scorer):
    return _paddlespeech_ctcdecoders.get_decode_result(prefixes, vocabulary, beam_size, ext_scorer)
get_decode_result = _paddlespeech_ctcdecoders.get_decode_result

def free_storage(storage):
    return _paddlespeech_ctcdecoders.free_storage(storage)
free_storage = _paddlespeech_ctcdecoders.free_storage

def ctc_beam_search_decode_chunk_begin(root, ext_scorer):
    return _paddlespeech_ctcdecoders.ctc_beam_search_decode_chunk_begin(root, ext_scorer)
ctc_beam_search_decode_chunk_begin = _paddlespeech_ctcdecoders.ctc_beam_search_decode_chunk_begin
# This file is compatible with both classic and new-style classes.


