Metadata-Version: 2.1
Name: ansys-openapi-common
Version: 1.1.1
Summary: Provides a helper to create sessions for use with Ansys OpenAPI clients.
Home-page: https://github.com/pyansys/openapi-common
License: MIT
Keywords: Ansys,OpenAPI
Author: ANSYS, Inc.
Maintainer: PyAnsys Maintainers
Maintainer-email: pyansys.maintainers@ansys.com
Requires-Python: >=3.7,<4.0
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: MacOS
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Scientific/Engineering :: Information Analysis
Provides-Extra: doc
Provides-Extra: linux-kerberos
Provides-Extra: oidc
Provides-Extra: test
Requires-Dist: asgi_gssapi; (sys_platform == "linux") and (extra == "test")
Requires-Dist: covertable; extra == "test"
Requires-Dist: fastapi; extra == "test"
Requires-Dist: importlib_metadata (>=1.0); python_version < "3.8"
Requires-Dist: keyring (>=22.0,<23.0); extra == "oidc"
Requires-Dist: numpydoc (==1.2.1); extra == "doc"
Requires-Dist: psutil; extra == "test"
Requires-Dist: pyansys-sphinx-theme (==0.2.3); extra == "doc"
Requires-Dist: pydantic; extra == "test"
Requires-Dist: pyparsing (>=3.0.8,<4.0.0)
Requires-Dist: pytest-cov; extra == "test"
Requires-Dist: pytest-mock; extra == "test"
Requires-Dist: pytest; extra == "test"
Requires-Dist: python-dateutil (>=2.6.1,<3.0.0)
Requires-Dist: requests (>=2.26,<3.0)
Requires-Dist: requests-kerberos (>=0.13,<0.14); (sys_platform == "linux") and (extra == "linux-kerberos")
Requires-Dist: requests-mock; extra == "test"
Requires-Dist: requests-negotiate-sspi (>=0.5.2,<0.6.0); sys_platform == "win32"
Requires-Dist: requests-ntlm (>=1.1.0,<2.0.0)
Requires-Dist: requests_oauthlib (>=1.3,<2.0); extra == "oidc"
Requires-Dist: sphinx (==4.5.0); extra == "doc"
Requires-Dist: sphinx-copybutton (==0.5.0); extra == "doc"
Requires-Dist: sphinx-notfound-page (==0.8); extra == "doc"
Requires-Dist: sphinx_autodoc_typehints (==1.17.0); extra == "doc"
Requires-Dist: typing-extensions (>=4.1,<5.0); python_version < "3.8"
Requires-Dist: uvicorn; extra == "test"
Project-URL: Documentation, https://openapi.docs.pyansys.com
Project-URL: Repository, https://github.com/pyansys/openapi-common
Description-Content-Type: text/x-rst

Project Overview
----------------
The ``openapi-common`` repository provides the source code for authentication-aware client for OpenAPI client libraries.

The PyAnsys OpenAPI Common library is intended for use with the custom code generation
template in the `PyAnsys project <https://github.com/pyansys>`_. This library currently
supports authentication with Basic, Negotiate, NTLM, and OpenID Connect. Most features
of the underlying requests session are exposed for use. Some basic configuration is also
provided by default.

Installing the Source Repository
--------------------------------

Install ``openapi-common`` with:

.. code::

   pip install ansys-openapi-common

Alternatively, clone and install with:

.. code::

   git clone https://github.com/pyansys/openapi-common
   cd openapi-common
   pip install .


Usage
-----
The API client class is intended to be wrapped by code that implements a client library.
We suggest that you override the ``__init__()`` or ``connect()`` methods to add any
additional behavior that might be required.

Authentication is configured through the ``ApiClientFactory`` object and its ``with_xxx()``
methods. If no authentication is required, you can use the ``with_anonymous()`` method.
You can provide additional configuration with the ``SessionConfiguration`` object.

.. code:: python

   >>> from ansys.openapi.common import ApiClientFactory
   >>> session = ApiClientFactory('https://my-api.com/v1.svc')
   ...           .with_autologon()
   ...           .connect()
   <ApiClient url: https://my-api.com/v1.svc>


Supported Authentication Schemes
--------------------------------
The OpenAPI Common library supports API servers configured with no authentication, API keys,
client certificates, and basic authentication. 

Windows users can also use Windows Integrated Authentication to connect to Kerberos-enabled
APIs with their Windows credentials and to NTLM where it is supported.

Linux users can make use of Kerberos authentication via the ``[linux-kerberos]`` extra. This
will require a working installation of either MIT Kerberos or Heimdal, as well as some
platform-specific build steps. An additional requirement is a correctly configured ``krb5.keytab``
file on your system.

Windows and Linux users can authenticate with OIDC-enabled APIs by using the ``[oidc]`` extra.
Currently we support only the Authorization Code authentication flow.

.. list-table:: Authentication Methods by Platform
   :header-rows: 1

   * - Authentication Method
     - Windows
     - Linux
     - Builder method
     - Additional settings
   * - API Key
     - ✔️
     - ✔️
     - ``.with_anonymous()``
     - Set the appropriate header in ``api_session_configuration``
   * - Client Certificate
     - ✔️
     - ✔️
     - Any
     - Provide ``client_cert_path`` and optionally ``client_cert_key`` in ``api_session_configuration``
   * - Basic
     - ✔️
     - ✔️
     - ``.with_credentials()``
     -
   * - NTLM
     - ✔️
     - ❌
     - ``.with_credentials()``
     -
   * - Kerberos
     - ✔️
     - ➕ with ``[linux-kerberos]`` extra
     - ``.with_autologon()``
     -
   * - OIDC
     - ➕ with ``[oidc]`` extra
     - ➕ with ``[oidc]`` extra
     - ``.with_oidc()``
     -

Platform-specific Kerberos Configuration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Kerberos authentication should be supported wherever the MIT or Heimdal Kerberos client
can be installed. The OpenAPI Common library has been tested on the platforms listed below.
If you manage to use it on another platform, consider contributing installation steps for
your platform by making a pull request.

Ubuntu 20.04
============

Ubuntu requires the Python module ``gssapi`` to be built from source. This requires the
Kerberos headers, Python headers for the version of Python that you are using, and a
supported compiler. (GCC works well.)

You should then be able to install this module with the ``[linux-kerberos]`` extra.

.. code-block:: bash

   sudo apt install build-essentials python3.8-dev libkrb5-dev
   pip install ansys-openapi-common[linux-kerberos]

Once the installation completes, ensure that your ``krb5.conf`` file is set up correctly
for your Kerberos configuration and that you have a valid ``keytab file``, which is
normally in ``/etc/krb5.keytab``.

License
-------
The OpenAPI Common library is provided under the terms of the MIT license. You can find
the license text in the LICENSE file at the root of the repository.

