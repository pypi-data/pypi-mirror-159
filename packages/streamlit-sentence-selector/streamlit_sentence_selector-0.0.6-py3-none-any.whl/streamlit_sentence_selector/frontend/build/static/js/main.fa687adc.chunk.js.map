{"version":3,"sources":["MyComponent_new2.tsx","index.tsx"],"names":["ChildComponent","props","handleClickThisEle","selectArr","item","isSelected","useState","thisSpanIsHovering","setThisSpanIsHovering","hoverStyle","background","selectedStyle","computedNeedShowStyle","toggleHover","type","cursor","onClick","onMouseEnter","onMouseLeave","className","includes","style","border","marginRight","borderRadius","withStreamlitConnection","args","Streamlit","setComponentReady","parentPropsValue","sentences","setSelectArr","newSelectArr","filter","oldItem","console","log","setComponentValue","useEffect","setFrameHeight","lineHeight","height","padding","transitionProperty","map","index","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPASA,SAASA,EAAeC,GACpB,MAA0DA,GAAS,GAA5DC,EAAP,EAAOA,mBAAoBC,EAA3B,EAA2BA,UAAWC,EAAtC,EAAsCA,KAAMC,EAA5C,EAA4CA,WAC5C,EAAoDC,oBAAS,GAA7D,mBAAOC,EAAP,KAA2BC,EAA3B,KACMC,EAAa,CAACC,WAAY,aAC1BC,EAAgB,CAACD,WAAY,gBAE/BE,EAAwB,GAY5B,SAASC,EAAYC,GACJ,UAATA,EACAN,GAAsB,GACN,UAATM,GACPN,GAAsB,GAI9B,OAnBIH,GAAcE,EACdK,EAAqB,uCAAOH,GAAeE,GAAtB,IAAqCI,OAAQ,YAC3DV,IAAeE,EACtBK,EAAqB,2BAAOD,GAAP,IAAsBI,OAAQ,aAC3CV,GAAcE,EACtBK,EAAqB,2BAAOH,GAAP,IAAmBM,OAAQ,YACxCV,GAAeE,IACvBK,EAAwB,CAACG,OAAQ,YAajC,0BACIC,QAAS,kBAAMd,EAAmBE,IAClCa,aAAc,kBAAMJ,EAAY,UAChCK,aAAc,kBAAML,EAAY,UAChCM,UAAWhB,EAAUiB,SAAShB,GAAQ,WAAa,GACnDiB,MAAK,2BAAMT,GAAN,IAA6BU,OAAQ,oBAAqBC,YAAa,MAAOC,aAAc,SAElGpB,GAqFIqB,mBA/Ef,YAAoE,IAAtCC,EAAqC,EAArCA,KAE1BC,IAAUC,oBACV,IACIC,EADgBH,EAAbI,UAGP,EAAkCxB,mBAAc,IAAhD,mBAAOH,EAAP,KAAkB4B,EAAlB,KACA,EAAoCzB,mBAAS,IAA7C,mBAGA,SAASJ,EAAmBE,GACxB,IAAI4B,EAAe,GAGfA,EAFA7B,EAAUiB,SAAShB,GAEJD,EAAU8B,QAAO,SAACC,GAAD,OAAkBA,IAAY9B,KAGlD,sBAAOD,GAAP,CAAkBC,IAElC2B,EAAaC,GACbG,QAAQC,IAAI,iDAAZ,YAA+BJ,IAI/BL,IAAUU,kBAAV,YAAgCL,IAkBpC,OAnCA,UAgCAM,qBAAU,WACNX,IAAUY,oBAGV,yBAAKpB,UAAU,OACjB,0BACIA,UAAU,WACVE,MAAO,CACHmB,WAAY,OACZC,OAAQ,OAGRC,QAAS,MACTlB,aAAc,MACdT,OAAQ,UACR4B,mBAAoB,QAV5B,OAcKd,QAdL,IAcKA,OAdL,EAcKA,EAAkBe,KAAI,SAACxC,EAAWyC,GAC/B,OACI,kBAAC7C,EAAD,CAAgB8C,IAAKD,EACL1C,UAAWA,EACXC,KAAMA,EAAMC,WAAYF,EAAUiB,SAAShB,GAC3CF,mBAAoBA,EACpBmB,MAAO,CACHC,OAAQ,+BC9G9CyB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.fa687adc.chunk.js","sourcesContent":["import {\n    Streamlit,\n    ComponentProps,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, {ReactElement, ReactNode, useState, useEffect} from \"react\"\n\n\n// 子组件定义\nfunction ChildComponent(props: any) {\n    const {handleClickThisEle, selectArr, item, isSelected} = props || {};\n    const [thisSpanIsHovering, setThisSpanIsHovering] = useState(false);//当前span是不是正在被hover\n    const hoverStyle = {background: 'lightblue'}//hover时样式\n    const selectedStyle = {background: 'lightskyblue'}//selected时样式\n\n    let computedNeedShowStyle = {}\n    if (isSelected && thisSpanIsHovering) {\n        computedNeedShowStyle = {...hoverStyle, ...selectedStyle, cursor: 'pointer'}//既被hover又被selected时背景色以selected时的背景色为主\n    } else if (isSelected && !thisSpanIsHovering) {\n        computedNeedShowStyle = {...selectedStyle, cursor: 'pointer'}\n    } else if (!isSelected && thisSpanIsHovering) {\n        computedNeedShowStyle = {...hoverStyle, cursor: 'pointer'}\n    } else if (!isSelected && !thisSpanIsHovering) {\n        computedNeedShowStyle = {cursor: 'pointer'}\n    }\n\n    // hover事件 - 驱动hover样式变化\n    function toggleHover(type: any) {\n        if (type === 'enter') {\n            setThisSpanIsHovering(true)\n        } else if (type === 'leave') {\n            setThisSpanIsHovering(false)\n        }\n    }\n\n    return (\n        <span\n            onClick={() => handleClickThisEle(item)}\n            onMouseEnter={() => toggleHover('enter')}\n            onMouseLeave={() => toggleHover('leave')}\n            className={selectArr.includes(item) ? 'selected' : ''}\n            style={{...computedNeedShowStyle, border: '1px #cdcdcd solid', marginRight: '3px', borderRadius: '4px'}}\n        >\n          {item}\n        </span>\n    )\n}\n\n\nfunction SentencesClickLabel({args}: ComponentProps): ReactElement {\n    // const {parentPropsValue, onclickItem} = args || {};\n    Streamlit.setComponentReady()\n    const {sentences} = args\n    var parentPropsValue = sentences\n\n    const [selectArr, setSelectArr] = useState<any>([]);\n    const [hoverStyle, setHoverStyle] = useState({}); //hover样式\n\n    // 点击事件, 动态添加class颜色。并将选中的语句提交给父组件\n    function handleClickThisEle(item: any) {\n        let newSelectArr = [];\n        if (selectArr.includes(item)) {\n            //原来已经包含需要剔除\n            newSelectArr = selectArr.filter((oldItem: any) => oldItem !== item);\n        } else {\n            //原来不包含需要加入\n            newSelectArr = [...selectArr, item];\n        }\n        setSelectArr(newSelectArr);\n        console.log('你选择的语句有 => ', [...newSelectArr]);\n\n        // 抛出去给后端\n        // onclickItem([...newSelectArr]);\n        Streamlit.setComponentValue([...newSelectArr])\n    }\n\n    // hover事件-hover样式\n    function toggleHover(type: any) {\n        const nowStyle =\n            type === 'enter'\n                ? {\n                    background: 'lightblue',\n                    // padding: '3px',\n                }\n                : {};\n        setHoverStyle(nowStyle);\n    }\n\n    useEffect(() => {\n        Streamlit.setFrameHeight()\n    })\n    return (\n        <div className=\"tag\">\n      <span\n          className=\"sentence\"\n          style={{\n              lineHeight: '30px',\n              height: '30px',\n              // marginLeft: '5px',\n              // border: '1px #cdcdcd solid',\n              padding: '2px',\n              borderRadius: '4px',\n              cursor: 'pointer',\n              transitionProperty: 'all',\n          }}\n      >\n\n          {parentPropsValue?.map((item: any, index: number) => {\n              return (\n                  <ChildComponent key={index}\n                                  selectArr={selectArr}\n                                  item={item} isSelected={selectArr.includes(item)}\n                                  handleClickThisEle={handleClickThisEle}\n                                  style={{\n                                      border: '1px #cdcdcd solid'\n                                  }}\n                  />\n              );\n          })}\n      </span>\n        </div>\n        // <div>\n        //     sdfsdfsdfsd\n        // </div>\n    );\n}\n\n\nexport default withStreamlitConnection(SentencesClickLabel)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"../src/MyComponent_new2\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}