[tool]
[tool.poetry]
name = "docint"
version = "0.1.0"
homepage = "https://github.com/mukundesh/docint"
description = "Document Intelligence.."
authors = ["Mukund Deshpande <mukundesh@outlook.com>"]
readme = "README.md"
license =  "MIT"
classifiers=[
    'Development Status :: 2 - Pre-Alpha',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Natural Language :: English',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
]
packages = [
    { include = "docint" },
    { include = "tests", format = "sdist" },
]

[tool.poetry.dependencies]
python = ">=3.7.1,<4.0"

flake8 = {version = "^3.9.2", optional = true} # pinned to older version
black = {version = "^22.6.0", optional = true}
isort = {version = "^5.10.1", optional = true}
flake8-docstrings = {version = "^1.6.0", optional = true}
pytest = {version = "^7.1.2", optional = true}
pytest-cov = {version = "^3.0.0", optional = true}
tox = {version = "^3.25.1", optional = true}
mkdocs = {version = "^1.3.0", optional = true}
mkdocs-include-markdown-plugin = {version = "^3.5.2", optional = true}
mkdocs-material = {version = "^8.3.9", optional = true}
mkdocstrings = {extras = ["python"], version = "^0.19.0"}
mkdocs-material-extensions = {version = "^1.0.3", optional = true}
mkdocs-autorefs = {version = "^0.4.1", optional = true}
mkdocs-gen-files = {version = "^0.3.5", optional = true}
mkdocs-literate-nav = {version = "^0.4.1", optional = true}
mkdocs-section-index = {version = "^0.3.4", optional = true}
bump2version = {version = "^1.0.1", optional = true}
pipdeptree = {version = "^2.2.1", optional = true}
twine = {version = "^4.0.1", optional = true}
pip = {version = "^22.1.2", optional = true} # needed for github actions
build = "^0.8.0"


[tool.poetry.extras]
test = [
    "pytest",
    "black",
    "isort",
    "flake8",
    "flake8-docstrings",
    "pytest-cov"
    ]

dev = ["tox", "twine", "pip", "bump2version"]

doc = [
    "mkdocs",
    "mkdocs-include-markdown-plugin",
    "mkdocs-material",
    "mkdocstrings",
    "mkdocs-material-extension",
    "mkdocs-autorefs"
    ]

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ['py36', 'py37', 'py38', 'py39', 'py310']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 120
skip_gitignore = true
# you can skip files as below
#skip_glob = docs/conf.py

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
# uncomment the following to omit files during running
#omit =
[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "def main"
    ]

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = py37, py38, py39, py310, format, lint, build

[gh-actions]
python =
    3.10: py310
    3.9: py39
    3.8: py38, format, lint, build
    3.7: py37

[testenv]
allowlist_externals = pytest
extras =
    test
passenv = *
setenv =
    PYTHONPATH = {toxinidir}
    PYTHONWARNINGS = ignore
commands =
    pytest --cov=docint --cov-branch --cov-report=xml --cov-report=term-missing tests

[testenv:format]
allowlist_externals =
    isort
    black
extras =
    test
commands =
    isort docint tests
    black docint tests

[testenv:lint]
allowlist_externals =
    flake8
extras =
    test
commands =
    flake8 docint tests


[testenv:build]
allowlist_externals =
    poetry
    mkdocs
    twine
extras =
    doc
    dev
commands =
    poetry build
    mkdocs build
    twine check dist/*
"""
