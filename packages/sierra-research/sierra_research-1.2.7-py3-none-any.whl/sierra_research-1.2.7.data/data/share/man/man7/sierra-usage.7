.\" Man page generated from reStructuredText.
.
.TH "SIERRA-USAGE" "7" "Jul 14, 2022" "1.2.7" "SIERRA"
.SH NAME
sierra-usage \- How to use SIERRA. This covers all non-command line interface aspects.
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
This covers everything which is (mostly) Platform independent and is not
the command line interface.
.SH SIERRA PIPELINE: A PRACTICAL SUMMARY
.sp
When invoked SIERRA will run one or more stages of its execution path, as
specified via \fB\-\-pipeline\fP on the cmdline. Only the first 4 pipeline stages
will run by default. The pipeline stages are:
.SS Stage 1: Experiment Generation
.sp
SIERRA generates the Batch Experiment definition from the template
input file, Batch Criteria, and other command line options. Part of
the default pipeline.
.SS Stage 2: Experiment Execution
.sp
SIERRA runs a previously generated Batch Experiment\&. Exactly which batch
experiment SIERRA runs is determined by:
.INDENT 0.0
.IP \(bu 2
\fB\-\-controller\fP
.IP \(bu 2
\fB\-\-scenario\fP
.IP \(bu 2
\fB\-\-sierra\-root\fP
.IP \(bu 2
\fB\-\-template\-input\-file\fP
.IP \(bu 2
\fB\-\-batch\-criteria\fP
.UNINDENT
.sp
SIERRA can run the experiment on any HPC plugin or
Robot plugin\&.  Part of default pipeline.
.SS Stage 3: Experiment Post\-Processing
.sp
SIERRA post\-processes experimental results after running the batch experiment;
some parts of this can be done in parallel. This includes one or more of:
.INDENT 0.0
.IP \(bu 2
Computing statistics over/about experimental data for stage 4 for use in graph
generation in stage 4. See ln\-sierra\-usage\-cli documentation for
\fB\-\-dist\-stats\fP for details.
.IP \(bu 2
Creating images from project CSV files for rendering in stage 4. See
ln\-sierra\-usage\-rendering\-project for details.
.UNINDENT
.sp
Part of default pipeline.
.SS Stage 4: Deliverable Generation
.sp
SIERRA performs deliverable generation after processing results for a batch
experiment, which can include shiny graphs and videos. See
ln\-sierra\-usage\-vc for details about rendering capabilities.
.sp
Part of default pipeline.
.SS Stage 5: Graph Generation for Controller/Scenario Comparison
.sp
SIERRA can perform additional graph generation \fIAFTER\fP graph generation for
batch experiments has been run. This is extremely useful for generating graphs
which can be dropped immediately into academic papers without modification. Not
part of default pipeline. See ln\-sierra\-usage\-stage5 for details. This can be
used to:
.INDENT 0.0
.IP \(bu 2
Compare multiple controllers within the same \fB\-\-scenario\fP\&. See
ln\-sierra\-usage\-stage5\-intra\-scenario for details.
.IP \(bu 2
Compare a single \fB\-\-controller\fP across multiple scenarios. See
ln\-sierra\-usage\-stage5\-inter\-scenario for details.
.UNINDENT
.SH PIPELINE STAGE 5
.sp
The main idea of this pipeline stage is to "collate" the results of one or more
Summary .csv files present in different Batch Experiments into a Inter\-Batch .csv file, and then use that file to
generate graphs. Any Summary .csv that is present in multiple
Batch Experiments can be used during stage 5!  This
gives this pipeline stage tremendous flexibility as a camera\-ready graph
generation tool.
.sp
In general, stage 5 is always run separate from stages 1\-4 (i.e., a separate
SIERRA invocation), because the options are quite different, but you don\(aqt
\fIhave\fP to do this.
.sp
\fBIMPORTANT:\fP
.INDENT 0.0
.INDENT 3.5
You \fIcannot\fP use this stage before successfully running stage 4
for each of the Batch Experiments you
want to include on the final graph.
.UNINDENT
.UNINDENT
.sp
\fBWARNING:\fP
.INDENT 0.0
.INDENT 3.5
Because SIERRA never deletes stuff for you, running stage 5 is
\fINOT\fP idempotent. Running the same stage 5 invocation comparing 3
controllers in a single scenario (for example) could result in
linegraphs containing 3,6,9,..., lines with duplicated data. In
general, you want to delete the directories generated by stage 5
between successive runs. See ln\-sierra\-usage\-runtime\-exp\-tree for
details on what directories are generated.
.UNINDENT
.UNINDENT
.SS Intra\-Scenario Comparison
.sp
Intra\-scenario comparison compares the of experiments using one or more
controllers on the same \fB\-\-scenario\fP\&. To use it, you need to pass the
following options to SIERRA (see ln\-sierra\-usage\-cli for documentation):
.INDENT 0.0
.IP \(bu 2
\fB\-\-scenario\-comparison\fP
.IP \(bu 2
\fB\-\-bc\-univar\fP or \fB\-\-bc\-bivar\fP
.IP \(bu 2
\fB\-\-dist\-stats\fP (to get statistics generated during stage 3 to show up on the
final graph).
.UNINDENT
.sp
Other \fB\-\-plot\-*\fP options providing for fine\-grained control of the generated
graphs may also be of interest.
.SS Inter\-Scenario Comparison
.sp
Inter\-scenario comparison compares the same \fB\-\-controller\fP across multiple
\fB\-\-scenarios\fP\&. To use it, you need to pass the following options to SIERRA
when running stage 5 (see ln\-sierra\-usage\-cli for documentation):
.INDENT 0.0
.IP \(bu 2
\fB\-\-controller\-comparison\fP
.IP \(bu 2
\fB\-\-bc\-univar\fP or \fB\-\-bc\-bivar\fP
.IP \(bu 2
\fB\-\-dist\-stats\fP (to get statistics generated during stage 3 to show up on the
final graph).
.UNINDENT
.sp
Other \fB\-\-plot\-*\fP options providing for fine\-grained control of the generated
graphs may also be of interest.
.SH SIERRA RUNTIME DIRECTORY TREE
.sp
\fBIMPORTANT:\fP
.INDENT 0.0
.INDENT 3.5
SIERRA \fBNEVER\fP deletes directories for you.
.sp
Subsequent experiments using the same values for the following cmdline
arguments \fBWILL\fP result in the same calculated root directory for
experimental inputs and outputs, even if other parameters change (or if you
change the contents of the template input file):
.INDENT 0.0
.IP \(bu 2
\fB\-\-controller\fP
.IP \(bu 2
\fB\-\-scenario\fP
.IP \(bu 2
\fB\-\-sierra\-root\fP
.IP \(bu 2
\fB\-\-template\-input\-file\fP
.IP \(bu 2
\fB\-\-batch\-criteria\fP
.UNINDENT
.sp
SIERRA will abort stage {1,2} processing when this occurs in order to
preserve data integrity; this behavior can be overwridden with
\fB\-\-exp\-overwrite\fP, in which case the use assumes full responsibility for
ensuring the integrity of the experiment.
.sp
Always better to check the arguments before hitting ENTER. Measure twice, cut
once, as the saying goes.
.UNINDENT
.UNINDENT
.SS Default Pipeline Directory Tree (Stages 1\-4)
.sp
When SIERRA runs stages 1\-4, it creates a directory structure under whatever was
passed as \fB\-\-sierra\-root\fP\&. For the purposes of explanation, I will use the
following partial SIERRA option set to explain the experiment tree:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-sierra\-root=$HOME/exp\e
\-\-controller=CATEGORY.my_controller\e
\-\-scenario=SS.12x6\e
\-\-platform=platform.argos\e
\-\-batch\-criteria=population_size.Log8\e
\-\-n\-runs=4\e
\-\-template\-input\-file=~/my\-template.argos\e
\-\-project=fordyca
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This invocation will cause SIERRA to create the following directory structure as
it runs:
.INDENT 0.0
.IP \(bu 2
\fB$HOME/exp\fP \- This is the root of the directory structure (\fB\-\-sierra\-root\fP),
and is \fBNOT\fP deleted on subsequent runs.
.INDENT 2.0
.IP \(bu 2
\fBfordyca\fP \- Each project gets their own directory, so you can disambiguate
otherwise identical SIERRA invocations and don\(aqt overwrite the directories
for a previously used project on subsequent runs.
.INDENT 2.0
.IP \(bu 2
\fBCATEGORY.my_controller\fP \- Each controller gets their own directory in the
project root, which is \fBNOT\fP deleted on subsequent runs.
.INDENT 2.0
.IP \(bu 2
\fBmytemplate\-SS.12x6\fP \- The directory for the Batch Experiment
is named from a combination of the template input file used
(\fB\-\-template\-input\-file\fP) and the scenario (\fB\-\-scenario\fP).
.INDENT 2.0
.IP \(bu 2
\fBexp\-inputs\fP \- Root directory for Experimental
inputs; each experiment in the batch gets their own directory in here.
.INDENT 2.0
.IP \(bu 2
\fBexp0\fP \- Within the input directory for each experiment in the
batch (there are 4 such directories in this example), there will be
an input file for each Experimental Run in the experiment,
as well as a \fBcommands.txt\fP used by GNU parallel to run them all
in parallel. The leaf of the \fB\-\-template\-input\-file\fP, sans
extension, has the experimental run # appended to it
(e.g. \fBmy\-template_0.argos\fP is the input file for simulation 0).
.INDENT 2.0
.INDENT 3.5
.INDENT 0.0
.IP \(bu 2
\fBcommands.txt\fP
.IP \(bu 2
\fBmy\-template_0.argos\fP
.IP \(bu 2
\fBmy\-template_1.argos\fP
.IP \(bu 2
\fBmy\-template_2.argos\fP
.IP \(bu 2
\fBmy\-template_3.argos\fP
.UNINDENT
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBexp1\fP
.INDENT 2.0
.IP \(bu 2
\fBmy\-template_0.argos\fP
.IP \(bu 2
\fBmy\-template_1.argos\fP
.IP \(bu 2
\fBmy\-template_2.argos\fP
.IP \(bu 2
\fBmy\-template_3.argos\fP
.UNINDENT
.IP \(bu 2
\fBexp2\fP
.INDENT 2.0
.IP \(bu 2
\fB\&...\fP
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBexp\-outputs\fP \- Root directory for experimental outputs; each
experiment gets their own directory in here (just like for experiment
inputs). Directory name is controlled by the main YAML configuration.
.INDENT 2.0
.IP \(bu 2
\fBexp0\fP \- Within the output directory for each experiment in the
batch (there are 3 such directories in this example), there will be
a \fIdirectory\fP (rather than a file, as was the case for inputs) for
each experimental run\(aqs output, including metrics, grabbed frames,
etc., as configured in the XML input file.
.INDENT 2.0
.IP \(bu 2
\fBmy\-template_0_output\fP
.IP \(bu 2
\fBmy\-template_1_output\fP
.IP \(bu 2
\fBmy\-template_2_output\fP
.IP \(bu 2
\fBmy\-template_3_output\fP
.UNINDENT
.IP \(bu 2
\fBexp1\fP
.INDENT 2.0
.IP \(bu 2
\fBmy\-template_0_output\fP
.IP \(bu 2
\fBmy\-template_1_output\fP
.IP \(bu 2
\fBmy\-template_2_output\fP
.IP \(bu 2
\fBmy\-template_3_output\fP
.UNINDENT
.IP \(bu 2
\fBexp2\fP
.INDENT 2.0
.IP \(bu 2
\fB\&...\fP
.UNINDENT
.IP \(bu 2
\fBstatistics\fP \- Root directory for holding statistics calculated
during stage3 for use during stage4.
.INDENT 2.0
.IP \(bu 2
\fBexp0\fP \- Contains the results of statistics generation for exp0
(mean, stddev, etc., as configured).
.IP \(bu 2
\fBexp1\fP
.IP \(bu 2
\fBexp2\fP
.IP \(bu 2
\fB\&...\fP
.IP \(bu 2
\fBcollated\fP \- Contains Collated .csv files. During
stage4, SIERRA will draw specific columns from .csv files under
\fBstatistics\fP according to configuration, and collate them under
here for graph generation of \fIinter\fP\-experiment graphs.
.IP \(bu 2
\fBexec\fP \- Statistics about SIERRA runtime. Useful for capturing
runtime of specific experiments to better plan/schedule time on
HPC clusters.
.UNINDENT
.UNINDENT
.IP \(bu 2
\fBimagize\fP \- Root directory for holding imagized files (averaged run
outputs which have been converted to graphs) which can be patched
together in stage 4 to generated videos. Each experiment will get its
own directory under here, with unique sub\-directories for each
different type of Experimental Run data captured for
imagizing. See ln\-sierra\-usage\-rendering\-project for more details.
.IP \(bu 2
\fBvideos\fP \- Root directory for holding rendered videos generated
during stage 4 from either captured simulator frames for imagized
project files. Each experiment will get its own directory under here,
with See ln\-sierra\-usage\-vc for more details.
.IP \(bu 2
\fBmodels\fP \- During stage4, the dataframes generated by all executed
models are stored under this directory. Each experiment in the batch
gets their own directory for \fIintra\fP\-experiment models.
.IP \(bu 2
\fBgraphs\fP \- During stage4, all generated graphs are output under this
directory. Each experiment in the batch gets their own directory for
\fIintra\fP\-experiment graphs.
.INDENT 2.0
.IP \(bu 2
\fBexp0\fP
.IP \(bu 2
\fBexp1\fP
.IP \(bu 2
\fBexp2\fP
.IP \(bu 2
\fBexp3\fP
.IP \(bu 2
\fBcollated\fP \- Graphs which are generated across experiments in the
batch from collated .csv data, rather than from the averaged results
within each experiment, are output here.
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Stage 5 Directory Tree
.sp
When SIERRA runs stage 5, stages 1\-4 must have already been successfully run,
and therefore the directory tree shown above will exist. For the purposes of
explanation, I will use the following partial SIERRA option sets to explain the
additions to the experiment tree for stage 5.
.sp
First, the experiment tree for \fIscenario comparison\fP:
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-pipeline 5\e
\-\-scenario\-comparison\e
\-\-batch\-criteria population_size.Log8\e
\-\-scenarios\-list=RN.16x16x2,PL.16x16x2\e
\-\-sierra\-root=$HOME/exp"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This invocation will cause SIERRA to create the following directory structure as
it runs:
.INDENT 0.0
.IP \(bu 2
\fB$HOME/exp\fP
.INDENT 2.0
.IP \(bu 2
\fBRN.16x16x2+PL.16x16x2\-sc\-graphs\fP
.sp
This is the directory holding the comparison graphs for all controllers
which were previously run on the scenarios \fBRN.16x16x2\fP and \fBPL.16x16x2\fP
(scenario names are arbitrary for the purposes of stage 5 and entirely
depend on the project). Inside this directory will be all graphs generated
according to the configuration specified in
ln\-sierra\-tutorials\-project\-stage5\-config\&.
.UNINDENT
.UNINDENT
.sp
Second, the experiment tree for \fIcontroller comparison\fP
.INDENT 0.0
.INDENT 3.5
.sp
.nf
.ft C
\-\-pipeline 5\e
\-\-controller\-comparison\e
\-\-batch\-criteria population_size.Log8\e
\-\-controllers\-list d0.CRW,d0.DPO\e
\-\-sierra\-root=$HOME/exp"
.ft P
.fi
.UNINDENT
.UNINDENT
.sp
This invocation will cause SIERRA to create the following directory structure as
it runs:
.INDENT 0.0
.IP \(bu 2
\fB$HOME/exp\fP
.INDENT 2.0
.IP \(bu 2
\fBd0.CRW+d0.DPO\-cc\-graphs\fP
.sp
This is the directory holding the comparison graphs for each scenario for
which \fBd0.CRW\fP and \fBd0.DPO\fP were run (scenarios are computed by
examining the directory tree for stages 1\-4). Controller names are arbitrary
for the purposes of stage 5 and entirely depend on the project). Inside this
directory will be all graphs generated according to the configuration
specified in ln\-sierra\-tutorials\-project\-stage5\-config\&.
.UNINDENT
.UNINDENT
.SH SIERRA SUBPROGRAMS
.sp
These are the shell programs which SIERRA \fImay\fP use internally when running,
depending on what you are doing.
.INDENT 0.0
.IP \(bu 2
\fBparallel\fP \- GNU parallel. Used during stage 2 when running
experiments (ARGoS, ROS1+Gazebo, ROS1+Robot platforms).
.IP \(bu 2
\fBffmpeg\fP \- Used during stage 3 if imagizing is run. See
ln\-sierra\-usage\-vc\-platform\&.
.IP \(bu 2
\fBXvfb\fP \- Used during stage 1 when generating simulation inputs, and
during stage 2 when running experiments for the ARGoS
Platform\&. See also ln\-sierra\-usage\-vc\-platform\&.
.IP \(bu 2
\fBparallel\-ssh\fP \- Used during stage 1 when generating experiments
experiments (ROS1+Robot platform).
.IP \(bu 2
\fBparallel\-rsync\fP \- Used during stage 1 when generating experiments
experiments (ROS1+Robot platform).
.UNINDENT
.SH EXTERNALLY CONFIGURABLE SIERRA VARIABLES
.sp
Non\-Batch Criteria variables which you can use to configure
simulations. All batch criteria are variables, but not all variables are batch
criteria.
.INDENT 0.0
.IP \(bu 2
\fI\%Experiment Setup\fP
.UNINDENT
.SS Experiment Setup
.sp
Configure Experiment time: length, controller cadence (Tick
duration/timestep), and how many datapoints to capture per Experimental
Run\&.
.SS Cmdline Syntax
.sp
\fBT{duration}[.K{ticks_per_sec}][.N{n_datapoints}\fP
.INDENT 0.0
.IP \(bu 2
\fBduration\fP \- Duration of timesteps in \fIseconds\fP (not timesteps).
.IP \(bu 2
\fBticks_per_sec\fP \- How many times each controller will be run per second.
.IP \(bu 2
\fBn_datapoints\fP \- # datapoints per Experimental Run to be captured;
the capture interval (if configurable) should be adjusted in
Project\-derived class from the platform "Experiment setup class"
(e.g., \fBsierra.plugins.platform.argos.variables.exp_setup.ExpSetup\fP for
ARGoS).
.UNINDENT
.SS Examples
.INDENT 0.0
.IP \(bu 2
\fBexp_setup.T1000\fP: Experimental run will be 1,000 seconds long and have
1,000*5=5,000 timesteps, with default (50) # datapoints.
.IP \(bu 2
\fBexp_setup.T2000.N100\fP: Experimental run will be 2,000 seconds long and have
2,000*5=10,000 timesteps, with 100 datapoints (1 every 20 seconds/100
timesteps).
.IP \(bu 2
\fBexp_setup.T10000.K10\fP: Experimental run will be 10,000 seconds long, and
have 10,000*10=100,000 timesteps with default (50) # datapoints.
.IP \(bu 2
\fBexp_setup.T10000.K10.N100\fP: Experimental run will be 10,000 seconds long,
and have 10,000*10=100,000 timesteps, with 100 datapoints (one every 100
seconds/1,000 timesteps).
.UNINDENT
.SH VISUAL CAPTURE
.sp
SIERRA\(aqs capabilities for capturing frames during Experimental Runs and rendering them input video outputs are detailed in this
section.
.sp
\fBNOTE:\fP
.INDENT 0.0
.INDENT 3.5
Using BOTH the platform and project rendering capabilities
simultaneously IS possible, but discouraged unless you have multiple
terrabytes of disk space available. In general when using SIERRA\(aqs rendering
capabilities, \fB\-\-exp\-range\fP is your friend.
.UNINDENT
.UNINDENT
.SS Platform Visual Capture
.sp
SIERRA can direct some platforms to capture frames during
experiments. \fB\-\-platform\-vc\fP assumes that:
.INDENT 0.0
.IP \(bu 2
\fBffmpeg\fP is installed/can be found by the shell. Checked during stage
3 if imagizing is run.
.UNINDENT
.sp
This is applicable to the following platforms:
.INDENT 0.0
.IP \(bu 2
ARGoS, selected via \fB\-\-platform=platform.argos\fP\&.
.UNINDENT
.sp
\fBIMPORTANT:\fP
.INDENT 0.0
.INDENT 3.5
If the selected platform usually runs headless, then this option
will probably slow things down a LOT, so if you use it,
\fB\-\-n\-runs\fP should probably be low, unless you have gobs of
computing power available.
.UNINDENT
.UNINDENT
.SS ARGos Visual Capture
.sp
Visual capture in ARGoS is done via frame capturing while running, and
then the captured images stitched together into videos during stage 4.
.sp
During stage 1 \fB\-\-platform\-vc\fP causes the ARGoS Qt/OpenGL
\fB<visualization>\fP subtree to be added to the \fB\-\-template\-input\-file\fP when
generating experimental inputs; it is removed otherwise. If \fB<visualization>\fP
already exists, it is removed and re\-created. During stage 1 SIERRA assumes
that:
.INDENT 0.0
.IP \(bu 2
\fBXvfb\fP is installed/can be found by the shell (checked). This is
needed to get ARGoS to "render" its simulation into an offscreen buffer which
we can output to a file.
.UNINDENT
.sp
During stage 4, \fB\-\-platform\-vc\fP causes frames captured during stage 2 to be
stitched together into a unique video file using \fBffmpeg\fP (precise
command configurable via \fB\-\-render\-cmd\-opts\fP), and output to
\fB<batch_root>/videos/<exp>\fP\&.
.SS Project Rendering
.sp
Projects can generate CSV files residing in subdirectories within the
\fBmain.run_metrics_leaf\fP (see ln\-sierra\-tutorials\-project\-main\-config)
directory (directory path set on a per \fB\-\-project\fP basis) for each
experimental run, in addition to generating CSV files residing directly in
the \fBmain.run_metrics_leaf.\fP directory. SIERRA can then render these CSV
files into \fBHeatmap\fP graphs, and stitch these
images together to make videos.
.sp
To use, do the following:
.INDENT 0.0
.IP 1. 3
Pass \fB\-\-project\-imagizing\fP during stage 3. When passed, the CSV files
residing each subdirectory under the \fBmain.run_metrics_leaf\fP directory (no
recursive nesting is allowed) in each run are treated as snapshots of 2D or
3D data over time, and will be averaged together across runs and then turn
into image files suitable for video rendering in stage 4. The following
restrictions apply:
.INDENT 3.0
.IP \(bu 2
A common stem with a unique numeric ID is required for each CSV must
be present for each CSV.
.IP \(bu 2
The directory name within \fBmain.run_metrics_leaf\fP must be the same as the
stem for each CSV file in that directory. For example, if the
directory name was \fBswarm\-distribution\fP under \fBmain.run_metrics_leaf\fP
then all CSV files within that directory must be named according to
\fBswarm\-distribution/swarm\-distributionXXXXX.csv\fP, where XXXXX is any
length numeric prefix (possibly preceded by an underscore or dash).
.UNINDENT
.sp
\fBIMPORTANT:\fP
.INDENT 3.0
.INDENT 3.5
Averaging the image CSV files and generating the images for each
experiment does not happen automatically as part of stage 3 because it can
take a LONG time and is idempotent. You should only pass
\fB\-\-project\-imagizing\fP the first time you run stage 3 after running stage
2 (unless you are getting paid by the hour).
.UNINDENT
.UNINDENT
.IP 2. 3
Pass \fB\-\-project\-vc\fP during stage 4 after running imagizing via
\fB\-\-project\-imagizing\fP during stage 3, either on the same invocation or a
previous one. SIERRA will take the imagized CSV files previously created
and generate a set of a videos in \fB<batch_root>/videos/<exp>\fP for each
experiment in the batch which was run.
.sp
\fBIMPORTANT:\fP
.INDENT 3.0
.INDENT 3.5
Rendering the imagized CSV does not happen automatically every time
as part of stage 4 because it can take a LONG time and is idempotent. You
should only pass \fB\-\-project\-vc\fP the first time you run stage 4 after
having run stage 3 with \fB\-\-project\-vc\fP (unless you are getting paid by
the hour).
.UNINDENT
.UNINDENT
.UNINDENT
.SH AUTHOR
John Harwell
.SH COPYRIGHT
2022, John Harwell
.\" Generated by docutils manpage writer.
.
