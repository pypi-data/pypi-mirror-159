"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import feast.core.DataFormat_pb2
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class DataSource(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    class _SourceType(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[SourceType.V], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor = ...
        INVALID = DataSource.SourceType.V(0)
        BATCH_FILE = DataSource.SourceType.V(1)
        BATCH_BIGQUERY = DataSource.SourceType.V(2)
        STREAM_KAFKA = DataSource.SourceType.V(3)
        STREAM_KINESIS = DataSource.SourceType.V(4)
    class SourceType(metaclass=_SourceType):
        V = typing.NewType('V', builtins.int)
    INVALID = DataSource.SourceType.V(0)
    BATCH_FILE = DataSource.SourceType.V(1)
    BATCH_BIGQUERY = DataSource.SourceType.V(2)
    STREAM_KAFKA = DataSource.SourceType.V(3)
    STREAM_KINESIS = DataSource.SourceType.V(4)

    class FieldMappingEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text = ...
        value: typing.Text = ...

        def __init__(self,
            *,
            key : typing.Text = ...,
            value : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    class FileOptions(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        FILE_FORMAT_FIELD_NUMBER: builtins.int
        FILE_URL_FIELD_NUMBER: builtins.int
        file_url: typing.Text = ...

        @property
        def file_format(self) -> feast.core.DataFormat_pb2.FileFormat: ...

        def __init__(self,
            *,
            file_format : typing.Optional[feast.core.DataFormat_pb2.FileFormat] = ...,
            file_url : typing.Text = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal[u"file_format",b"file_format"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"file_format",b"file_format",u"file_url",b"file_url"]) -> None: ...

    class BigQueryOptions(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        TABLE_REF_FIELD_NUMBER: builtins.int
        QUERY_FIELD_NUMBER: builtins.int
        table_ref: typing.Text = ...
        query: typing.Text = ...

        def __init__(self,
            *,
            table_ref : typing.Text = ...,
            query : typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"query",b"query",u"table_ref",b"table_ref"]) -> None: ...

    class KafkaOptions(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        BOOTSTRAP_SERVERS_FIELD_NUMBER: builtins.int
        TOPIC_FIELD_NUMBER: builtins.int
        MESSAGE_FORMAT_FIELD_NUMBER: builtins.int
        bootstrap_servers: typing.Text = ...
        topic: typing.Text = ...

        @property
        def message_format(self) -> feast.core.DataFormat_pb2.StreamFormat: ...

        def __init__(self,
            *,
            bootstrap_servers : typing.Text = ...,
            topic : typing.Text = ...,
            message_format : typing.Optional[feast.core.DataFormat_pb2.StreamFormat] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal[u"message_format",b"message_format"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"bootstrap_servers",b"bootstrap_servers",u"message_format",b"message_format",u"topic",b"topic"]) -> None: ...

    class KinesisOptions(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
        REGION_FIELD_NUMBER: builtins.int
        STREAM_NAME_FIELD_NUMBER: builtins.int
        RECORD_FORMAT_FIELD_NUMBER: builtins.int
        region: typing.Text = ...
        stream_name: typing.Text = ...

        @property
        def record_format(self) -> feast.core.DataFormat_pb2.StreamFormat: ...

        def __init__(self,
            *,
            region : typing.Text = ...,
            stream_name : typing.Text = ...,
            record_format : typing.Optional[feast.core.DataFormat_pb2.StreamFormat] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal[u"record_format",b"record_format"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal[u"record_format",b"record_format",u"region",b"region",u"stream_name",b"stream_name"]) -> None: ...

    TYPE_FIELD_NUMBER: builtins.int
    FIELD_MAPPING_FIELD_NUMBER: builtins.int
    EVENT_TIMESTAMP_COLUMN_FIELD_NUMBER: builtins.int
    DATE_PARTITION_COLUMN_FIELD_NUMBER: builtins.int
    CREATED_TIMESTAMP_COLUMN_FIELD_NUMBER: builtins.int
    FILE_OPTIONS_FIELD_NUMBER: builtins.int
    BIGQUERY_OPTIONS_FIELD_NUMBER: builtins.int
    KAFKA_OPTIONS_FIELD_NUMBER: builtins.int
    KINESIS_OPTIONS_FIELD_NUMBER: builtins.int
    type: global___DataSource.SourceType.V = ...
    event_timestamp_column: typing.Text = ...
    date_partition_column: typing.Text = ...
    created_timestamp_column: typing.Text = ...

    @property
    def field_mapping(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]: ...

    @property
    def file_options(self) -> global___DataSource.FileOptions: ...

    @property
    def bigquery_options(self) -> global___DataSource.BigQueryOptions: ...

    @property
    def kafka_options(self) -> global___DataSource.KafkaOptions: ...

    @property
    def kinesis_options(self) -> global___DataSource.KinesisOptions: ...

    def __init__(self,
        *,
        type : global___DataSource.SourceType.V = ...,
        field_mapping : typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        event_timestamp_column : typing.Text = ...,
        date_partition_column : typing.Text = ...,
        created_timestamp_column : typing.Text = ...,
        file_options : typing.Optional[global___DataSource.FileOptions] = ...,
        bigquery_options : typing.Optional[global___DataSource.BigQueryOptions] = ...,
        kafka_options : typing.Optional[global___DataSource.KafkaOptions] = ...,
        kinesis_options : typing.Optional[global___DataSource.KinesisOptions] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal[u"bigquery_options",b"bigquery_options",u"file_options",b"file_options",u"kafka_options",b"kafka_options",u"kinesis_options",b"kinesis_options",u"options",b"options"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal[u"bigquery_options",b"bigquery_options",u"created_timestamp_column",b"created_timestamp_column",u"date_partition_column",b"date_partition_column",u"event_timestamp_column",b"event_timestamp_column",u"field_mapping",b"field_mapping",u"file_options",b"file_options",u"kafka_options",b"kafka_options",u"kinesis_options",b"kinesis_options",u"options",b"options",u"type",b"type"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal[u"options",b"options"]) -> typing_extensions.Literal["file_options","bigquery_options","kafka_options","kinesis_options"]: ...
global___DataSource = DataSource
