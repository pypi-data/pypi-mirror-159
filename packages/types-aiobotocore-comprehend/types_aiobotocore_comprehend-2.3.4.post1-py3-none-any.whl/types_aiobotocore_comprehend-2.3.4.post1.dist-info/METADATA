Metadata-Version: 2.1
Name: types-aiobotocore-comprehend
Version: 2.3.4.post1
Summary: Type annotations for aiobotocore.Comprehend 2.3.4 service generated with mypy-boto3-builder 7.8.0
Home-page: https://github.com/youtype/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_comprehend/
Project-URL: Source, https://github.com/youtype/mypy_boto3_builder
Project-URL: Tracker, https://github.com/youtype/mypy_boto3_builder/issues
Keywords: aiobotocore comprehend type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions (>=4.1.0)

<a id="types-aiobotocore-comprehend"></a>

# types-aiobotocore-comprehend

[![PyPI - types-aiobotocore-comprehend](https://img.shields.io/pypi/v/types-aiobotocore-comprehend.svg?color=blue)](https://pypi.org/project/types-aiobotocore-comprehend)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-comprehend.svg?color=blue)](https://pypi.org/project/types-aiobotocore-comprehend)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-comprehend?color=blue)](https://pypistats.org/packages/types-aiobotocore-comprehend)

![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[aiobotocore.Comprehend 2.3.4](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/comprehend.html#Comprehend)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 7.8.0](https://github.com/youtype/mypy_boto3_builder).

More information can be found on
[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in
[types-aiobotocore-comprehend docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_comprehend/).

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)

- [types-aiobotocore-comprehend](#types-aiobotocore-comprehend)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [How to uninstall](#how-to-uninstall)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Emacs](#emacs)
    - [Sublime Text](#sublime-text)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `Comprehend`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `Comprehend` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[comprehend]'


# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[comprehend]'


# standalone installation
python -m pip install types-aiobotocore-comprehend
```

<a id="how-to-uninstall"></a>

## How to uninstall

```bash
python -m pip uninstall -y types-aiobotocore-comprehend
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[comprehend]` in your environment:

```bash
python -m pip install 'types-aiobotocore[comprehend]'
```

Both type checking and code completion should now work. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pycharm"></a>

### PyCharm

Install `types-aiobotocore-lite[comprehend]` in your environment:

```bash
python -m pip install 'types-aiobotocore-lite[comprehend]'`
```

Both type checking and code completion should now work. Explicit type
annotations **are required**.

Use `types-aiobotocore` package instead for implicit type discovery.

<a id="emacs"></a>

### Emacs

- Install `types-aiobotocore` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[comprehend]'
```

- Install [use-package](https://github.com/jwiegley/use-package),
  [lsp](https://github.com/emacs-lsp/lsp-mode/),
  [company](https://github.com/company-mode/company-mode) and
  [flycheck](https://github.com/flycheck/flycheck) packages
- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package

```elisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp)))  ; or lsp-deferred
  :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3"))
  )
```

- Make sure emacs uses the environment where you have installed
  `types-aiobotocore`

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="sublime-text"></a>

### Sublime Text

- Install `types-aiobotocore[comprehend]` with services you use in your
  environment:

```bash
python -m pip install 'types-aiobotocore[comprehend]'
```

- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) package

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[comprehend]` in your environment:

```bash
python -m pip install 'types-aiobotocore[comprehend]'`
```

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `npm i -g pyright`
- Install `types-aiobotocore[comprehend]` in your environment:

```bash
python -m pip install 'types-aiobotocore[comprehend]'
```

Optionally, you can install `types-aiobotocore` to `typings` folder.

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`ComprehendClient` provides annotations for
`session.create_client("comprehend")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_comprehend import ComprehendClient

session = get_session()
async with session.create_client("comprehend") as client:
    client: ComprehendClient
    # now client usage is checked by mypy and IDE should provide code completion
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_comprehend.paginator` module contains type annotations for
all paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_comprehend import ComprehendClient
from types_aiobotocore_comprehend.paginator import (
    ListDocumentClassificationJobsPaginator,
    ListDocumentClassifiersPaginator,
    ListDominantLanguageDetectionJobsPaginator,
    ListEntitiesDetectionJobsPaginator,
    ListEntityRecognizersPaginator,
    ListKeyPhrasesDetectionJobsPaginator,
    ListSentimentDetectionJobsPaginator,
    ListTopicsDetectionJobsPaginator,
)

session = get_session()
async with session.create_client("comprehend") as client:
    client: ComprehendClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        list_document_classification_jobs_paginator: ListDocumentClassificationJobsPaginator = client.get_paginator("list_document_classification_jobs")
        list_document_classifiers_paginator: ListDocumentClassifiersPaginator = client.get_paginator("list_document_classifiers")
        list_dominant_language_detection_jobs_paginator: ListDominantLanguageDetectionJobsPaginator = client.get_paginator("list_dominant_language_detection_jobs")
        list_entities_detection_jobs_paginator: ListEntitiesDetectionJobsPaginator = client.get_paginator("list_entities_detection_jobs")
        list_entity_recognizers_paginator: ListEntityRecognizersPaginator = client.get_paginator("list_entity_recognizers")
        list_key_phrases_detection_jobs_paginator: ListKeyPhrasesDetectionJobsPaginator = client.get_paginator("list_key_phrases_detection_jobs")
        list_sentiment_detection_jobs_paginator: ListSentimentDetectionJobsPaginator = client.get_paginator("list_sentiment_detection_jobs")
        list_topics_detection_jobs_paginator: ListTopicsDetectionJobsPaginator = client.get_paginator("list_topics_detection_jobs")
    ```







### Literals

`types_aiobotocore_comprehend.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_comprehend.literals import (
    AugmentedManifestsDocumentTypeFormatType,
    DocumentClassifierDataFormatType,
    DocumentClassifierModeType,
    DocumentReadActionType,
    DocumentReadFeatureTypesType,
    DocumentReadModeType,
    EndpointStatusType,
    EntityRecognizerDataFormatType,
    EntityTypeType,
    InputFormatType,
    JobStatusType,
    LanguageCodeType,
    ListDocumentClassificationJobsPaginatorName,
    ListDocumentClassifiersPaginatorName,
    ListDominantLanguageDetectionJobsPaginatorName,
    ListEntitiesDetectionJobsPaginatorName,
    ListEntityRecognizersPaginatorName,
    ListKeyPhrasesDetectionJobsPaginatorName,
    ListSentimentDetectionJobsPaginatorName,
    ListTopicsDetectionJobsPaginatorName,
    ModelStatusType,
    PartOfSpeechTagTypeType,
    PiiEntitiesDetectionMaskModeType,
    PiiEntitiesDetectionModeType,
    PiiEntityTypeType,
    SentimentTypeType,
    SplitType,
    SyntaxLanguageCodeType,
    ComprehendServiceName,
    ServiceName,
    ResourceServiceName,
    PaginatorName,
    RegionName,
)

def check_value(value: AugmentedManifestsDocumentTypeFormatType) -> bool:
    ...
````

### Typed dictionaries

`types_aiobotocore_comprehend.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_comprehend.type_defs import (
    AugmentedManifestsListItemTypeDef,
    DominantLanguageTypeDef,
    BatchDetectDominantLanguageRequestRequestTypeDef,
    BatchItemErrorTypeDef,
    ResponseMetadataTypeDef,
    EntityTypeDef,
    BatchDetectEntitiesRequestRequestTypeDef,
    KeyPhraseTypeDef,
    BatchDetectKeyPhrasesRequestRequestTypeDef,
    SentimentScoreTypeDef,
    BatchDetectSentimentRequestRequestTypeDef,
    BatchDetectSyntaxRequestRequestTypeDef,
    ClassifierEvaluationMetricsTypeDef,
    ClassifyDocumentRequestRequestTypeDef,
    DocumentClassTypeDef,
    DocumentLabelTypeDef,
    ContainsPiiEntitiesRequestRequestTypeDef,
    EntityLabelTypeDef,
    DocumentClassifierOutputDataConfigTypeDef,
    TagTypeDef,
    VpcConfigTypeDef,
    DeleteDocumentClassifierRequestRequestTypeDef,
    DeleteEndpointRequestRequestTypeDef,
    DeleteEntityRecognizerRequestRequestTypeDef,
    DeleteResourcePolicyRequestRequestTypeDef,
    DescribeDocumentClassificationJobRequestRequestTypeDef,
    DescribeDocumentClassifierRequestRequestTypeDef,
    DescribeDominantLanguageDetectionJobRequestRequestTypeDef,
    DescribeEndpointRequestRequestTypeDef,
    EndpointPropertiesTypeDef,
    DescribeEntitiesDetectionJobRequestRequestTypeDef,
    DescribeEntityRecognizerRequestRequestTypeDef,
    DescribeEventsDetectionJobRequestRequestTypeDef,
    DescribeKeyPhrasesDetectionJobRequestRequestTypeDef,
    DescribePiiEntitiesDetectionJobRequestRequestTypeDef,
    DescribeResourcePolicyRequestRequestTypeDef,
    DescribeSentimentDetectionJobRequestRequestTypeDef,
    DescribeTargetedSentimentDetectionJobRequestRequestTypeDef,
    DescribeTopicsDetectionJobRequestRequestTypeDef,
    DetectDominantLanguageRequestRequestTypeDef,
    DetectEntitiesRequestRequestTypeDef,
    DetectKeyPhrasesRequestRequestTypeDef,
    DetectPiiEntitiesRequestRequestTypeDef,
    PiiEntityTypeDef,
    DetectSentimentRequestRequestTypeDef,
    DetectSyntaxRequestRequestTypeDef,
    DocumentClassificationJobFilterTypeDef,
    OutputDataConfigTypeDef,
    DocumentClassifierFilterTypeDef,
    DocumentClassifierSummaryTypeDef,
    DocumentReaderConfigTypeDef,
    DominantLanguageDetectionJobFilterTypeDef,
    EndpointFilterTypeDef,
    EntitiesDetectionJobFilterTypeDef,
    EntityRecognizerAnnotationsTypeDef,
    EntityRecognizerDocumentsTypeDef,
    EntityRecognizerEntityListTypeDef,
    EntityRecognizerEvaluationMetricsTypeDef,
    EntityRecognizerFilterTypeDef,
    EntityTypesListItemTypeDef,
    EntityTypesEvaluationMetricsTypeDef,
    EntityRecognizerSummaryTypeDef,
    EventsDetectionJobFilterTypeDef,
    KeyPhrasesDetectionJobFilterTypeDef,
    PaginatorConfigTypeDef,
    ListDocumentClassifierSummariesRequestRequestTypeDef,
    ListEntityRecognizerSummariesRequestRequestTypeDef,
    PiiEntitiesDetectionJobFilterTypeDef,
    SentimentDetectionJobFilterTypeDef,
    ListTagsForResourceRequestRequestTypeDef,
    TargetedSentimentDetectionJobFilterTypeDef,
    TopicsDetectionJobFilterTypeDef,
    PartOfSpeechTagTypeDef,
    PiiOutputDataConfigTypeDef,
    RedactionConfigTypeDef,
    PutResourcePolicyRequestRequestTypeDef,
    StopDominantLanguageDetectionJobRequestRequestTypeDef,
    StopEntitiesDetectionJobRequestRequestTypeDef,
    StopEventsDetectionJobRequestRequestTypeDef,
    StopKeyPhrasesDetectionJobRequestRequestTypeDef,
    StopPiiEntitiesDetectionJobRequestRequestTypeDef,
    StopSentimentDetectionJobRequestRequestTypeDef,
    StopTargetedSentimentDetectionJobRequestRequestTypeDef,
    StopTrainingDocumentClassifierRequestRequestTypeDef,
    StopTrainingEntityRecognizerRequestRequestTypeDef,
    UntagResourceRequestRequestTypeDef,
    UpdateEndpointRequestRequestTypeDef,
    DocumentClassifierInputDataConfigTypeDef,
    BatchDetectDominantLanguageItemResultTypeDef,
    CreateDocumentClassifierResponseTypeDef,
    CreateEndpointResponseTypeDef,
    CreateEntityRecognizerResponseTypeDef,
    DescribeResourcePolicyResponseTypeDef,
    DetectDominantLanguageResponseTypeDef,
    ImportModelResponseTypeDef,
    PutResourcePolicyResponseTypeDef,
    StartDocumentClassificationJobResponseTypeDef,
    StartDominantLanguageDetectionJobResponseTypeDef,
    StartEntitiesDetectionJobResponseTypeDef,
    StartEventsDetectionJobResponseTypeDef,
    StartKeyPhrasesDetectionJobResponseTypeDef,
    StartPiiEntitiesDetectionJobResponseTypeDef,
    StartSentimentDetectionJobResponseTypeDef,
    StartTargetedSentimentDetectionJobResponseTypeDef,
    StartTopicsDetectionJobResponseTypeDef,
    StopDominantLanguageDetectionJobResponseTypeDef,
    StopEntitiesDetectionJobResponseTypeDef,
    StopEventsDetectionJobResponseTypeDef,
    StopKeyPhrasesDetectionJobResponseTypeDef,
    StopPiiEntitiesDetectionJobResponseTypeDef,
    StopSentimentDetectionJobResponseTypeDef,
    StopTargetedSentimentDetectionJobResponseTypeDef,
    BatchDetectEntitiesItemResultTypeDef,
    DetectEntitiesResponseTypeDef,
    BatchDetectKeyPhrasesItemResultTypeDef,
    DetectKeyPhrasesResponseTypeDef,
    BatchDetectSentimentItemResultTypeDef,
    DetectSentimentResponseTypeDef,
    ClassifierMetadataTypeDef,
    ClassifyDocumentResponseTypeDef,
    ContainsPiiEntitiesResponseTypeDef,
    CreateEndpointRequestRequestTypeDef,
    ImportModelRequestRequestTypeDef,
    ListTagsForResourceResponseTypeDef,
    TagResourceRequestRequestTypeDef,
    DescribeEndpointResponseTypeDef,
    ListEndpointsResponseTypeDef,
    DetectPiiEntitiesResponseTypeDef,
    ListDocumentClassificationJobsRequestRequestTypeDef,
    ListDocumentClassifiersRequestRequestTypeDef,
    ListDocumentClassifierSummariesResponseTypeDef,
    InputDataConfigTypeDef,
    ListDominantLanguageDetectionJobsRequestRequestTypeDef,
    ListEndpointsRequestRequestTypeDef,
    ListEntitiesDetectionJobsRequestRequestTypeDef,
    ListEntityRecognizersRequestRequestTypeDef,
    EntityRecognizerInputDataConfigTypeDef,
    EntityRecognizerMetadataEntityTypesListItemTypeDef,
    ListEntityRecognizerSummariesResponseTypeDef,
    ListEventsDetectionJobsRequestRequestTypeDef,
    ListKeyPhrasesDetectionJobsRequestRequestTypeDef,
    ListDocumentClassificationJobsRequestListDocumentClassificationJobsPaginateTypeDef,
    ListDocumentClassifiersRequestListDocumentClassifiersPaginateTypeDef,
    ListDominantLanguageDetectionJobsRequestListDominantLanguageDetectionJobsPaginateTypeDef,
    ListEntitiesDetectionJobsRequestListEntitiesDetectionJobsPaginateTypeDef,
    ListEntityRecognizersRequestListEntityRecognizersPaginateTypeDef,
    ListKeyPhrasesDetectionJobsRequestListKeyPhrasesDetectionJobsPaginateTypeDef,
    ListPiiEntitiesDetectionJobsRequestRequestTypeDef,
    ListSentimentDetectionJobsRequestListSentimentDetectionJobsPaginateTypeDef,
    ListSentimentDetectionJobsRequestRequestTypeDef,
    ListTargetedSentimentDetectionJobsRequestRequestTypeDef,
    ListTopicsDetectionJobsRequestListTopicsDetectionJobsPaginateTypeDef,
    ListTopicsDetectionJobsRequestRequestTypeDef,
    SyntaxTokenTypeDef,
    CreateDocumentClassifierRequestRequestTypeDef,
    BatchDetectDominantLanguageResponseTypeDef,
    BatchDetectEntitiesResponseTypeDef,
    BatchDetectKeyPhrasesResponseTypeDef,
    BatchDetectSentimentResponseTypeDef,
    DocumentClassifierPropertiesTypeDef,
    DocumentClassificationJobPropertiesTypeDef,
    DominantLanguageDetectionJobPropertiesTypeDef,
    EntitiesDetectionJobPropertiesTypeDef,
    EventsDetectionJobPropertiesTypeDef,
    KeyPhrasesDetectionJobPropertiesTypeDef,
    PiiEntitiesDetectionJobPropertiesTypeDef,
    SentimentDetectionJobPropertiesTypeDef,
    StartDocumentClassificationJobRequestRequestTypeDef,
    StartDominantLanguageDetectionJobRequestRequestTypeDef,
    StartEntitiesDetectionJobRequestRequestTypeDef,
    StartEventsDetectionJobRequestRequestTypeDef,
    StartKeyPhrasesDetectionJobRequestRequestTypeDef,
    StartPiiEntitiesDetectionJobRequestRequestTypeDef,
    StartSentimentDetectionJobRequestRequestTypeDef,
    StartTargetedSentimentDetectionJobRequestRequestTypeDef,
    StartTopicsDetectionJobRequestRequestTypeDef,
    TargetedSentimentDetectionJobPropertiesTypeDef,
    TopicsDetectionJobPropertiesTypeDef,
    CreateEntityRecognizerRequestRequestTypeDef,
    EntityRecognizerMetadataTypeDef,
    BatchDetectSyntaxItemResultTypeDef,
    DetectSyntaxResponseTypeDef,
    DescribeDocumentClassifierResponseTypeDef,
    ListDocumentClassifiersResponseTypeDef,
    DescribeDocumentClassificationJobResponseTypeDef,
    ListDocumentClassificationJobsResponseTypeDef,
    DescribeDominantLanguageDetectionJobResponseTypeDef,
    ListDominantLanguageDetectionJobsResponseTypeDef,
    DescribeEntitiesDetectionJobResponseTypeDef,
    ListEntitiesDetectionJobsResponseTypeDef,
    DescribeEventsDetectionJobResponseTypeDef,
    ListEventsDetectionJobsResponseTypeDef,
    DescribeKeyPhrasesDetectionJobResponseTypeDef,
    ListKeyPhrasesDetectionJobsResponseTypeDef,
    DescribePiiEntitiesDetectionJobResponseTypeDef,
    ListPiiEntitiesDetectionJobsResponseTypeDef,
    DescribeSentimentDetectionJobResponseTypeDef,
    ListSentimentDetectionJobsResponseTypeDef,
    DescribeTargetedSentimentDetectionJobResponseTypeDef,
    ListTargetedSentimentDetectionJobsResponseTypeDef,
    DescribeTopicsDetectionJobResponseTypeDef,
    ListTopicsDetectionJobsResponseTypeDef,
    EntityRecognizerPropertiesTypeDef,
    BatchDetectSyntaxResponseTypeDef,
    DescribeEntityRecognizerResponseTypeDef,
    ListEntityRecognizersResponseTypeDef,
)

def get_structure() -> AugmentedManifestsListItemTypeDef:
    return {
      ...
    }
```

## How it works

Fully automated
[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefully
generates type annotations for each service, patiently waiting for
`aiobotocore` updates. It delivers a drop-in type annotations for you and makes
sure that:

- All available `aiobotocore` services are covered.
- Each public class and method of every `aiobotocore` service gets valid type
  annotations extracted from the documentation (blame `botocore` docs if types
  are incorrect).
- Type annotations include up-to-date documentation.
- Link to documentation is provided for every method.
- Code is processed by [black](https://github.com/psf/black) and
  [isort](https://github.com/PyCQA/isort) for readability.

## What's new

### Implemented features

- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries
- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`
  compatibility
- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type
  annotations for each service
- Generated `TypeDefs` for each service
- Generated `Literals` for each service
- Auto discovery of types for `boto3.client` and `boto3.session` calls
- Auto discovery of types for `session.client` and `session.session` calls
- Auto discovery of types for `client.get_waiter` and `client.get_paginator`
  calls
- Auto discovery of types for `ServiceResource` and `Resource` collections
- Auto discovery of types for `aiobotocore.Session.create_client` calls

### Latest changes

Builder changelog can be found in
[Releases](https://github.com/youtype/mypy_boto3_builder/releases).

## Versioning

`types-aiobotocore-comprehend` version is the same as related `aiobotocore`
version and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/)
format.

## Thank you

- [Allie Fitter](https://github.com/alliefitter) for
  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),
  this package is based on top of his work
- [black](https://github.com/psf/black) developers for an awesome formatting
  tool
- [Timothy Edmund Crosley](https://github.com/timothycrosley) for
  [isort](https://github.com/PyCQA/isort) and how flexible it is
- [mypy](https://github.com/python/mypy) developers for doing all dirty work
  for us
- [pyright](https://github.com/microsoft/pyright) team for the new era of typed
  Python

## Documentation

All services type annotations can be found in
[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_comprehend/)

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)
repository.


