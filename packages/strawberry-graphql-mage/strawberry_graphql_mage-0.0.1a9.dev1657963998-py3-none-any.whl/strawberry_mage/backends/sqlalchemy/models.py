"""Entity Models for use with SQLAlchemy Mage backend."""

from functools import cached_property
from typing import Type, cast

from inflection import underscore
from sqlalchemy import inspect
from sqlalchemy.orm import declarative_base, declared_attr

from strawberry_mage.core.models import EntityModel

_Base = declarative_base()


class _BaseMeta(type(_Base), type(EntityModel)):
    pass


class SQLAlchemyModel(_Base, EntityModel, metaclass=_BaseMeta):
    """
    DO NOT USE DIRECTLY.

    Use the create_base_entity function which creates a new base class each time it is run. This makes the sqlalchemy
    metadata isolated and does not interfere with other schema definitions.
    """

    __abstract__ = True

    @declared_attr
    def __tablename__(self):
        """Get the tablename."""
        return underscore(self.__name__)

    @cached_property
    def __primary_key__(self):
        """Get a tuple of attribute names which represent the primary key."""
        return [c.name for c in inspect(self.__class__).primary_key]

    @cached_property
    def __primary_key_autogenerated__(self):
        """Generate the primary key automatically."""
        return all(c.autoincrement for c in inspect(self.__class__).primary_key)


_SQLAlchemyModel = SQLAlchemyModel


def create_base_entity() -> Type[SQLAlchemyModel]:
    """
    Create a SQLAlchemy entity base class with independent metadata.

    :return: SQLAlchemyModel
    """
    new_base = declarative_base()

    class SQLAlchemyModel(new_base, _SQLAlchemyModel, metaclass=_BaseMeta):  # type: ignore
        """Base sqlalchemy model class."""

        __abstract__ = True

    return cast(Type[_SQLAlchemyModel], SQLAlchemyModel)
