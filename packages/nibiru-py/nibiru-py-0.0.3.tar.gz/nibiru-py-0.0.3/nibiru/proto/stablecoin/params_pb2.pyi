"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Params(google.protobuf.message.Message):
    """Params defines the parameters for the module."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    COLLRATIO_FIELD_NUMBER: builtins.int
    FEERATIO_FIELD_NUMBER: builtins.int
    EFFEERATIO_FIELD_NUMBER: builtins.int
    BONUS_RATE_RECOLL_FIELD_NUMBER: builtins.int
    DISTR_EPOCH_IDENTIFIER_FIELD_NUMBER: builtins.int
    ADJUSTMENTSTEP_FIELD_NUMBER: builtins.int
    PRICELOWERBOUND_FIELD_NUMBER: builtins.int
    PRICEUPPERBOUND_FIELD_NUMBER: builtins.int
    ISCOLLATERALRATIOVALID_FIELD_NUMBER: builtins.int
    collRatio: builtins.int
    """collRatio is the ratio needed as collateral to exchange for stables"""

    feeRatio: builtins.int
    """feeRatio is the ratio taken as fees when minting or burning stables"""

    efFeeRatio: builtins.int
    """efFeeRatio is the ratio taken from the fees that goes to Ecosystem Fund"""

    bonus_rate_recoll: builtins.int
    """BonusRateRecoll is the percentage of extra stablecoin value given to the caller
    of 'Recollateralize' in units of governance tokens.
    """

    distr_epoch_identifier: typing.Text
    """distr_epoch_identifier defines the frequnecy of update for the collateral ratio"""

    adjustmentStep: builtins.int
    """adjustmentStep is the size of the step taken when updating the collateral ratio"""

    priceLowerBound: builtins.int
    """priceLowerBound is the lower bound for the stable coin to trigger a collateral ratio update"""

    priceUpperBound: builtins.int
    """priceUpperBound is the upper bound for the stable coin to trigger a collateral ratio update"""

    isCollateralRatioValid: builtins.bool
    """isCollateralRatioValid checks if the collateral ratio is correctly updated"""

    def __init__(self,
        *,
        collRatio: builtins.int = ...,
        feeRatio: builtins.int = ...,
        efFeeRatio: builtins.int = ...,
        bonus_rate_recoll: builtins.int = ...,
        distr_epoch_identifier: typing.Text = ...,
        adjustmentStep: builtins.int = ...,
        priceLowerBound: builtins.int = ...,
        priceUpperBound: builtins.int = ...,
        isCollateralRatioValid: builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["adjustmentStep",b"adjustmentStep","bonus_rate_recoll",b"bonus_rate_recoll","collRatio",b"collRatio","distr_epoch_identifier",b"distr_epoch_identifier","efFeeRatio",b"efFeeRatio","feeRatio",b"feeRatio","isCollateralRatioValid",b"isCollateralRatioValid","priceLowerBound",b"priceLowerBound","priceUpperBound",b"priceUpperBound"]) -> None: ...
global___Params = Params
