Metadata-Version: 2.1
Name: types-aiobotocore-iotsitewise
Version: 2.3.4.post1
Summary: Type annotations for aiobotocore.IoTSiteWise 2.3.4 service generated with mypy-boto3-builder 7.8.0
Home-page: https://github.com/youtype/mypy_boto3_builder
Author: Vlad Emelianov
Author-email: vlad.emelianov.nz@gmail.com
License: MIT License
Project-URL: Documentation, https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_iotsitewise/
Project-URL: Source, https://github.com/youtype/mypy_boto3_builder
Project-URL: Tracker, https://github.com/youtype/mypy_boto3_builder/issues
Keywords: aiobotocore iotsitewise type-annotations boto3-stubs mypy typeshed autocomplete
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Environment :: Console
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Typing :: Typed
Requires-Python: >=3.6
Description-Content-Type: text/markdown
Requires-Dist: typing-extensions (>=4.1.0)

<a id="types-aiobotocore-iotsitewise"></a>

# types-aiobotocore-iotsitewise

[![PyPI - types-aiobotocore-iotsitewise](https://img.shields.io/pypi/v/types-aiobotocore-iotsitewise.svg?color=blue)](https://pypi.org/project/types-aiobotocore-iotsitewise)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/types-aiobotocore-iotsitewise.svg?color=blue)](https://pypi.org/project/types-aiobotocore-iotsitewise)
[![Docs](https://img.shields.io/readthedocs/mypy-boto3-builder.svg?color=blue)](https://mypy-boto3-builder.readthedocs.io/)
[![PyPI - Downloads](https://img.shields.io/pypi/dm/types-aiobotocore-iotsitewise?color=blue)](https://pypistats.org/packages/types-aiobotocore-iotsitewise)

![boto3.typed](https://github.com/youtype/mypy_boto3_builder/raw/main/logo.png)

Type annotations for
[aiobotocore.IoTSiteWise 2.3.4](https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/iotsitewise.html#IoTSiteWise)
service compatible with [VSCode](https://code.visualstudio.com/),
[PyCharm](https://www.jetbrains.com/pycharm/),
[Emacs](https://www.gnu.org/software/emacs/),
[Sublime Text](https://www.sublimetext.com/),
[mypy](https://github.com/python/mypy),
[pyright](https://github.com/microsoft/pyright) and other tools.

Generated by
[mypy-boto3-builder 7.8.0](https://github.com/youtype/mypy_boto3_builder).

More information can be found on
[types-aiobotocore](https://pypi.org/project/types-aiobotocore/) page and in
[types-aiobotocore-iotsitewise docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_iotsitewise/).

See how it helps to find and fix potential bugs:

![boto3-stubs demo](https://github.com/youtype/mypy_boto3_builder/raw/main/demo.gif)

- [types-aiobotocore-iotsitewise](#types-aiobotocore-iotsitewise)
  - [How to install](#how-to-install)
    - [VSCode extension](#vscode-extension)
    - [From PyPI with pip](#from-pypi-with-pip)
  - [How to uninstall](#how-to-uninstall)
  - [Usage](#usage)
    - [VSCode](#vscode)
    - [PyCharm](#pycharm)
    - [Emacs](#emacs)
    - [Sublime Text](#sublime-text)
    - [Other IDEs](#other-ides)
    - [mypy](#mypy)
    - [pyright](#pyright)
  - [Explicit type annotations](#explicit-type-annotations)
    - [Client annotations](#client-annotations)
    - [Paginators annotations](#paginators-annotations)
    - [Literals](#literals)
    - [Typed dictionaries](#typed-dictionaries)
  - [How it works](#how-it-works)
  - [What's new](#what's-new)
    - [Implemented features](#implemented-features)
    - [Latest changes](#latest-changes)
  - [Versioning](#versioning)
  - [Thank you](#thank-you)
  - [Documentation](#documentation)
  - [Support and contributing](#support-and-contributing)

<a id="how-to-install"></a>

## How to install

<a id="vscode-extension"></a>

### VSCode extension

Add
[AWS Boto3](https://marketplace.visualstudio.com/items?itemName=Boto3typed.boto3-ide)
extension to your VSCode and run `AWS boto3: Quick Start` command.

Click `Modify` and select `boto3 common` and `IoTSiteWise`.

<a id="from-pypi-with-pip"></a>

### From PyPI with pip

Install `types-aiobotocore` for `IoTSiteWise` service.

```bash
# install with aiobotocore type annotations
python -m pip install 'types-aiobotocore[iotsitewise]'


# Lite version does not provide session.client/resource overloads
# it is more RAM-friendly, but requires explicit type annotations
python -m pip install 'types-aiobotocore-lite[iotsitewise]'


# standalone installation
python -m pip install types-aiobotocore-iotsitewise
```

<a id="how-to-uninstall"></a>

## How to uninstall

```bash
python -m pip uninstall -y types-aiobotocore-iotsitewise
```

<a id="usage"></a>

## Usage

<a id="vscode"></a>

### VSCode

- Install
  [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python)
- Install
  [Pylance extension](https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance)
- Set `Pylance` as your Python Language Server
- Install `types-aiobotocore[iotsitewise]` in your environment:

```bash
python -m pip install 'types-aiobotocore[iotsitewise]'
```

Both type checking and code completion should now work. No explicit type
annotations required, write your `aiobotocore` code as usual.

<a id="pycharm"></a>

### PyCharm

Install `types-aiobotocore-lite[iotsitewise]` in your environment:

```bash
python -m pip install 'types-aiobotocore-lite[iotsitewise]'`
```

Both type checking and code completion should now work. Explicit type
annotations **are required**.

Use `types-aiobotocore` package instead for implicit type discovery.

<a id="emacs"></a>

### Emacs

- Install `types-aiobotocore` with services you use in your environment:

```bash
python -m pip install 'types-aiobotocore[iotsitewise]'
```

- Install [use-package](https://github.com/jwiegley/use-package),
  [lsp](https://github.com/emacs-lsp/lsp-mode/),
  [company](https://github.com/company-mode/company-mode) and
  [flycheck](https://github.com/flycheck/flycheck) packages
- Install [lsp-pyright](https://github.com/emacs-lsp/lsp-pyright) package

```elisp
(use-package lsp-pyright
  :ensure t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp)))  ; or lsp-deferred
  :init (when (executable-find "python3")
          (setq lsp-pyright-python-executable-cmd "python3"))
  )
```

- Make sure emacs uses the environment where you have installed
  `types-aiobotocore`

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="sublime-text"></a>

### Sublime Text

- Install `types-aiobotocore[iotsitewise]` with services you use in your
  environment:

```bash
python -m pip install 'types-aiobotocore[iotsitewise]'
```

- Install [LSP-pyright](https://github.com/sublimelsp/LSP-pyright) package

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="other-ides"></a>

### Other IDEs

Not tested, but as long as your IDE supports `mypy` or `pyright`, everything
should work.

<a id="mypy"></a>

### mypy

- Install `mypy`: `python -m pip install mypy`
- Install `types-aiobotocore[iotsitewise]` in your environment:

```bash
python -m pip install 'types-aiobotocore[iotsitewise]'`
```

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="pyright"></a>

### pyright

- Install `pyright`: `npm i -g pyright`
- Install `types-aiobotocore[iotsitewise]` in your environment:

```bash
python -m pip install 'types-aiobotocore[iotsitewise]'
```

Optionally, you can install `types-aiobotocore` to `typings` folder.

Type checking should now work. No explicit type annotations required, write
your `aiobotocore` code as usual.

<a id="explicit-type-annotations"></a>

## Explicit type annotations

<a id="client-annotations"></a>

### Client annotations

`IoTSiteWiseClient` provides annotations for
`session.create_client("iotsitewise")`.

```python
from aiobotocore.session import get_session

from types_aiobotocore_iotsitewise import IoTSiteWiseClient

session = get_session()
async with session.create_client("iotsitewise") as client:
    client: IoTSiteWiseClient
    # now client usage is checked by mypy and IDE should provide code completion
```

<a id="paginators-annotations"></a>

### Paginators annotations

`types_aiobotocore_iotsitewise.paginator` module contains type annotations for
all paginators.

````python
from aiobotocore.session import get_session

from types_aiobotocore_iotsitewise import IoTSiteWiseClient
from types_aiobotocore_iotsitewise.paginator import (
    GetAssetPropertyAggregatesPaginator,
    GetAssetPropertyValueHistoryPaginator,
    GetInterpolatedAssetPropertyValuesPaginator,
    ListAccessPoliciesPaginator,
    ListAssetModelsPaginator,
    ListAssetRelationshipsPaginator,
    ListAssetsPaginator,
    ListAssociatedAssetsPaginator,
    ListDashboardsPaginator,
    ListGatewaysPaginator,
    ListPortalsPaginator,
    ListProjectAssetsPaginator,
    ListProjectsPaginator,
    ListTimeSeriesPaginator,
)

session = get_session()
async with session.create_client("iotsitewise") as client:
    client: IoTSiteWiseClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        get_asset_property_aggregates_paginator: GetAssetPropertyAggregatesPaginator = client.get_paginator("get_asset_property_aggregates")
        get_asset_property_value_history_paginator: GetAssetPropertyValueHistoryPaginator = client.get_paginator("get_asset_property_value_history")
        get_interpolated_asset_property_values_paginator: GetInterpolatedAssetPropertyValuesPaginator = client.get_paginator("get_interpolated_asset_property_values")
        list_access_policies_paginator: ListAccessPoliciesPaginator = client.get_paginator("list_access_policies")
        list_asset_models_paginator: ListAssetModelsPaginator = client.get_paginator("list_asset_models")
        list_asset_relationships_paginator: ListAssetRelationshipsPaginator = client.get_paginator("list_asset_relationships")
        list_assets_paginator: ListAssetsPaginator = client.get_paginator("list_assets")
        list_associated_assets_paginator: ListAssociatedAssetsPaginator = client.get_paginator("list_associated_assets")
        list_dashboards_paginator: ListDashboardsPaginator = client.get_paginator("list_dashboards")
        list_gateways_paginator: ListGatewaysPaginator = client.get_paginator("list_gateways")
        list_portals_paginator: ListPortalsPaginator = client.get_paginator("list_portals")
        list_project_assets_paginator: ListProjectAssetsPaginator = client.get_paginator("list_project_assets")
        list_projects_paginator: ListProjectsPaginator = client.get_paginator("list_projects")
        list_time_series_paginator: ListTimeSeriesPaginator = client.get_paginator("list_time_series")
    ```


### Waiters annotations

`types_aiobotocore_iotsitewise.waiter` module contains type annotations for all waiters.

```python
from aiobotocore.session import get_session

from types_aiobotocore_iotsitewise.client import IoTSiteWiseClient
from types_aiobotocore_iotsitewise.waiter import (
    AssetActiveWaiter,
    AssetModelActiveWaiter,
    AssetModelNotExistsWaiter,
    AssetNotExistsWaiter,
    PortalActiveWaiter,
    PortalNotExistsWaiter,
)

session = get_session()
async with session.create_client("iotsitewise") as client:
    client: IoTSiteWiseClient

    # Explicit type annotations are optional here
    # Type should be correctly discovered by mypy and IDEs
    # VSCode requires explicit type annotations
        asset_active_waiter: AssetActiveWaiter = client.get_waiter("asset_active")
        asset_model_active_waiter: AssetModelActiveWaiter = client.get_waiter("asset_model_active")
        asset_model_not_exists_waiter: AssetModelNotExistsWaiter = client.get_waiter("asset_model_not_exists")
        asset_not_exists_waiter: AssetNotExistsWaiter = client.get_waiter("asset_not_exists")
        portal_active_waiter: PortalActiveWaiter = client.get_waiter("portal_active")
        portal_not_exists_waiter: PortalNotExistsWaiter = client.get_waiter("portal_not_exists")
    ```





<a id="literals"></a>

### Literals

`types_aiobotocore_iotsitewise.literals` module contains literals extracted from shapes
that can be used in user code for type checking.

```python
from types_aiobotocore_iotsitewise.literals import (
    AggregateTypeType,
    AssetActiveWaiterName,
    AssetErrorCodeType,
    AssetModelActiveWaiterName,
    AssetModelNotExistsWaiterName,
    AssetModelStateType,
    AssetNotExistsWaiterName,
    AssetRelationshipTypeType,
    AssetStateType,
    AuthModeType,
    BatchPutAssetPropertyValueErrorCodeType,
    CapabilitySyncStatusType,
    ComputeLocationType,
    ConfigurationStateType,
    DetailedErrorCodeType,
    DisassociatedDataStorageStateType,
    EncryptionTypeType,
    ErrorCodeType,
    ForwardingConfigStateType,
    GetAssetPropertyAggregatesPaginatorName,
    GetAssetPropertyValueHistoryPaginatorName,
    GetInterpolatedAssetPropertyValuesPaginatorName,
    IdentityTypeType,
    ImageFileTypeType,
    ListAccessPoliciesPaginatorName,
    ListAssetModelsPaginatorName,
    ListAssetRelationshipsPaginatorName,
    ListAssetsFilterType,
    ListAssetsPaginatorName,
    ListAssociatedAssetsPaginatorName,
    ListDashboardsPaginatorName,
    ListGatewaysPaginatorName,
    ListPortalsPaginatorName,
    ListProjectAssetsPaginatorName,
    ListProjectsPaginatorName,
    ListTimeSeriesPaginatorName,
    ListTimeSeriesTypeType,
    LoggingLevelType,
    MonitorErrorCodeType,
    PermissionType,
    PortalActiveWaiterName,
    PortalNotExistsWaiterName,
    PortalStateType,
    PropertyDataTypeType,
    PropertyNotificationStateType,
    QualityType,
    ResourceTypeType,
    StorageTypeType,
    TimeOrderingType,
    TraversalDirectionType,
    TraversalTypeType,
    IoTSiteWiseServiceName,
    ServiceName,
    ResourceServiceName,
    PaginatorName,
    WaiterName,
    RegionName,
)

def check_value(value: AggregateTypeType) -> bool:
    ...
````

<a id="typed-dictionaries"></a>

### Typed dictionaries

`types_aiobotocore_iotsitewise.type_defs` module contains structures and shapes
assembled to typed dictionaries for additional type checking.

```python
from types_aiobotocore_iotsitewise.type_defs import (
    AggregatesTypeDef,
    AlarmsTypeDef,
    AssetErrorDetailsTypeDef,
    AssetHierarchyInfoTypeDef,
    AssetHierarchyTypeDef,
    AssetModelHierarchyDefinitionTypeDef,
    AssetModelHierarchyTypeDef,
    PropertyNotificationTypeDef,
    TimeInNanosTypeDef,
    VariantTypeDef,
    AssociateAssetsRequestRequestTypeDef,
    AssociateTimeSeriesToAssetPropertyRequestRequestTypeDef,
    AttributeTypeDef,
    BatchAssociateProjectAssetsRequestRequestTypeDef,
    ResponseMetadataTypeDef,
    BatchDisassociateProjectAssetsRequestRequestTypeDef,
    ConfigurationErrorDetailsTypeDef,
    CreateAssetRequestRequestTypeDef,
    CreateDashboardRequestRequestTypeDef,
    ImageFileTypeDef,
    CreateProjectRequestRequestTypeDef,
    CustomerManagedS3StorageTypeDef,
    DashboardSummaryTypeDef,
    DeleteAccessPolicyRequestRequestTypeDef,
    DeleteAssetModelRequestRequestTypeDef,
    DeleteAssetRequestRequestTypeDef,
    DeleteDashboardRequestRequestTypeDef,
    DeleteGatewayRequestRequestTypeDef,
    DeletePortalRequestRequestTypeDef,
    DeleteProjectRequestRequestTypeDef,
    DeleteTimeSeriesRequestRequestTypeDef,
    DescribeAccessPolicyRequestRequestTypeDef,
    WaiterConfigTypeDef,
    DescribeAssetModelRequestRequestTypeDef,
    DescribeAssetPropertyRequestRequestTypeDef,
    DescribeAssetRequestRequestTypeDef,
    DescribeDashboardRequestRequestTypeDef,
    DescribeGatewayCapabilityConfigurationRequestRequestTypeDef,
    DescribeGatewayRequestRequestTypeDef,
    GatewayCapabilitySummaryTypeDef,
    LoggingOptionsTypeDef,
    DescribePortalRequestRequestTypeDef,
    ImageLocationTypeDef,
    DescribeProjectRequestRequestTypeDef,
    RetentionPeriodTypeDef,
    DescribeTimeSeriesRequestRequestTypeDef,
    DetailedErrorTypeDef,
    DisassociateAssetsRequestRequestTypeDef,
    DisassociateTimeSeriesFromAssetPropertyRequestRequestTypeDef,
    VariableValueTypeDef,
    ForwardingConfigTypeDef,
    GreengrassTypeDef,
    GreengrassV2TypeDef,
    PaginatorConfigTypeDef,
    GetAssetPropertyAggregatesRequestRequestTypeDef,
    GetAssetPropertyValueHistoryRequestRequestTypeDef,
    GetAssetPropertyValueRequestRequestTypeDef,
    GetInterpolatedAssetPropertyValuesRequestRequestTypeDef,
    GroupIdentityTypeDef,
    IAMRoleIdentityTypeDef,
    IAMUserIdentityTypeDef,
    UserIdentityTypeDef,
    ListAccessPoliciesRequestRequestTypeDef,
    ListAssetModelsRequestRequestTypeDef,
    ListAssetRelationshipsRequestRequestTypeDef,
    ListAssetsRequestRequestTypeDef,
    ListAssociatedAssetsRequestRequestTypeDef,
    ListDashboardsRequestRequestTypeDef,
    ListGatewaysRequestRequestTypeDef,
    ListPortalsRequestRequestTypeDef,
    ListProjectAssetsRequestRequestTypeDef,
    ListProjectsRequestRequestTypeDef,
    ProjectSummaryTypeDef,
    ListTagsForResourceRequestRequestTypeDef,
    ListTimeSeriesRequestRequestTypeDef,
    TimeSeriesSummaryTypeDef,
    MetricProcessingConfigTypeDef,
    TumblingWindowTypeDef,
    MonitorErrorDetailsTypeDef,
    PortalResourceTypeDef,
    ProjectResourceTypeDef,
    PutDefaultEncryptionConfigurationRequestRequestTypeDef,
    TagResourceRequestRequestTypeDef,
    UntagResourceRequestRequestTypeDef,
    UpdateAssetPropertyRequestRequestTypeDef,
    UpdateAssetRequestRequestTypeDef,
    UpdateDashboardRequestRequestTypeDef,
    UpdateGatewayCapabilityConfigurationRequestRequestTypeDef,
    UpdateGatewayRequestRequestTypeDef,
    UpdateProjectRequestRequestTypeDef,
    AggregatedValueTypeDef,
    AssetRelationshipSummaryTypeDef,
    AssetPropertyTypeDef,
    BatchPutAssetPropertyErrorTypeDef,
    AssetPropertyValueTypeDef,
    InterpolatedAssetPropertyValueTypeDef,
    BatchAssociateProjectAssetsResponseTypeDef,
    BatchDisassociateProjectAssetsResponseTypeDef,
    CreateAccessPolicyResponseTypeDef,
    CreateDashboardResponseTypeDef,
    CreateGatewayResponseTypeDef,
    CreateProjectResponseTypeDef,
    DescribeDashboardResponseTypeDef,
    DescribeGatewayCapabilityConfigurationResponseTypeDef,
    DescribeProjectResponseTypeDef,
    DescribeTimeSeriesResponseTypeDef,
    EmptyResponseMetadataTypeDef,
    ListProjectAssetsResponseTypeDef,
    ListTagsForResourceResponseTypeDef,
    UpdateGatewayCapabilityConfigurationResponseTypeDef,
    ConfigurationStatusTypeDef,
    CreatePortalRequestRequestTypeDef,
    ImageTypeDef,
    MultiLayerStorageTypeDef,
    ListDashboardsResponseTypeDef,
    DescribeAssetModelRequestAssetModelActiveWaitTypeDef,
    DescribeAssetModelRequestAssetModelNotExistsWaitTypeDef,
    DescribeAssetRequestAssetActiveWaitTypeDef,
    DescribeAssetRequestAssetNotExistsWaitTypeDef,
    DescribePortalRequestPortalActiveWaitTypeDef,
    DescribePortalRequestPortalNotExistsWaitTypeDef,
    DescribeLoggingOptionsResponseTypeDef,
    PutLoggingOptionsRequestRequestTypeDef,
    ErrorDetailsTypeDef,
    ExpressionVariableTypeDef,
    MeasurementProcessingConfigTypeDef,
    TransformProcessingConfigTypeDef,
    GatewayPlatformTypeDef,
    GetAssetPropertyAggregatesRequestGetAssetPropertyAggregatesPaginateTypeDef,
    GetAssetPropertyValueHistoryRequestGetAssetPropertyValueHistoryPaginateTypeDef,
    GetInterpolatedAssetPropertyValuesRequestGetInterpolatedAssetPropertyValuesPaginateTypeDef,
    ListAccessPoliciesRequestListAccessPoliciesPaginateTypeDef,
    ListAssetModelsRequestListAssetModelsPaginateTypeDef,
    ListAssetRelationshipsRequestListAssetRelationshipsPaginateTypeDef,
    ListAssetsRequestListAssetsPaginateTypeDef,
    ListAssociatedAssetsRequestListAssociatedAssetsPaginateTypeDef,
    ListDashboardsRequestListDashboardsPaginateTypeDef,
    ListGatewaysRequestListGatewaysPaginateTypeDef,
    ListPortalsRequestListPortalsPaginateTypeDef,
    ListProjectAssetsRequestListProjectAssetsPaginateTypeDef,
    ListProjectsRequestListProjectsPaginateTypeDef,
    ListTimeSeriesRequestListTimeSeriesPaginateTypeDef,
    IdentityTypeDef,
    ListProjectsResponseTypeDef,
    ListTimeSeriesResponseTypeDef,
    MetricWindowTypeDef,
    PortalStatusTypeDef,
    ResourceTypeDef,
    GetAssetPropertyAggregatesResponseTypeDef,
    ListAssetRelationshipsResponseTypeDef,
    AssetCompositeModelTypeDef,
    BatchPutAssetPropertyErrorEntryTypeDef,
    GetAssetPropertyValueHistoryResponseTypeDef,
    GetAssetPropertyValueResponseTypeDef,
    PutAssetPropertyValueEntryTypeDef,
    GetInterpolatedAssetPropertyValuesResponseTypeDef,
    DescribeDefaultEncryptionConfigurationResponseTypeDef,
    PutDefaultEncryptionConfigurationResponseTypeDef,
    UpdatePortalRequestRequestTypeDef,
    DescribeStorageConfigurationResponseTypeDef,
    PutStorageConfigurationRequestRequestTypeDef,
    PutStorageConfigurationResponseTypeDef,
    AssetModelStatusTypeDef,
    AssetStatusTypeDef,
    MeasurementTypeDef,
    TransformTypeDef,
    CreateGatewayRequestRequestTypeDef,
    DescribeGatewayResponseTypeDef,
    GatewaySummaryTypeDef,
    MetricTypeDef,
    CreatePortalResponseTypeDef,
    DeletePortalResponseTypeDef,
    DescribePortalResponseTypeDef,
    PortalSummaryTypeDef,
    UpdatePortalResponseTypeDef,
    AccessPolicySummaryTypeDef,
    CreateAccessPolicyRequestRequestTypeDef,
    DescribeAccessPolicyResponseTypeDef,
    UpdateAccessPolicyRequestRequestTypeDef,
    BatchPutAssetPropertyValueResponseTypeDef,
    BatchPutAssetPropertyValueRequestRequestTypeDef,
    AssetModelSummaryTypeDef,
    CreateAssetModelResponseTypeDef,
    DeleteAssetModelResponseTypeDef,
    UpdateAssetModelResponseTypeDef,
    AssetSummaryTypeDef,
    AssociatedAssetsSummaryTypeDef,
    CreateAssetResponseTypeDef,
    DeleteAssetResponseTypeDef,
    DescribeAssetResponseTypeDef,
    UpdateAssetResponseTypeDef,
    ListGatewaysResponseTypeDef,
    PropertyTypeTypeDef,
    ListPortalsResponseTypeDef,
    ListAccessPoliciesResponseTypeDef,
    ListAssetModelsResponseTypeDef,
    ListAssetsResponseTypeDef,
    ListAssociatedAssetsResponseTypeDef,
    AssetModelPropertyDefinitionTypeDef,
    AssetModelPropertyTypeDef,
    PropertyTypeDef,
    AssetModelCompositeModelDefinitionTypeDef,
    AssetModelCompositeModelTypeDef,
    CompositeModelPropertyTypeDef,
    CreateAssetModelRequestRequestTypeDef,
    DescribeAssetModelResponseTypeDef,
    UpdateAssetModelRequestRequestTypeDef,
    DescribeAssetPropertyResponseTypeDef,
)

def get_structure() -> AggregatesTypeDef:
    return {
      ...
    }
```

<a id="how-it-works"></a>

## How it works

Fully automated
[mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder) carefully
generates type annotations for each service, patiently waiting for
`aiobotocore` updates. It delivers a drop-in type annotations for you and makes
sure that:

- All available `aiobotocore` services are covered.
- Each public class and method of every `aiobotocore` service gets valid type
  annotations extracted from the documentation (blame `botocore` docs if types
  are incorrect).
- Type annotations include up-to-date documentation.
- Link to documentation is provided for every method.
- Code is processed by [black](https://github.com/psf/black) and
  [isort](https://github.com/PyCQA/isort) for readability.

<a id="what's-new"></a>

## What's new

<a id="implemented-features"></a>

### Implemented features

- Fully type annotated `boto3`, `botocore` and `aiobotocore` libraries
- `mypy`, `pyright`, `VSCode`, `PyCharm`, `Sublime Text` and `Emacs`
  compatibility
- `Client`, `ServiceResource`, `Resource`, `Waiter` `Paginator` type
  annotations for each service
- Generated `TypeDefs` for each service
- Generated `Literals` for each service
- Auto discovery of types for `boto3.client` and `boto3.session` calls
- Auto discovery of types for `session.client` and `session.session` calls
- Auto discovery of types for `client.get_waiter` and `client.get_paginator`
  calls
- Auto discovery of types for `ServiceResource` and `Resource` collections
- Auto discovery of types for `aiobotocore.Session.create_client` calls

<a id="latest-changes"></a>

### Latest changes

Builder changelog can be found in
[Releases](https://github.com/youtype/mypy_boto3_builder/releases).

<a id="versioning"></a>

## Versioning

`types-aiobotocore-iotsitewise` version is the same as related `aiobotocore`
version and follows [PEP 440](https://www.python.org/dev/peps/pep-0440/)
format.

<a id="thank-you"></a>

## Thank you

- [Allie Fitter](https://github.com/alliefitter) for
  [boto3-type-annotations](https://pypi.org/project/boto3-type-annotations/),
  this package is based on top of his work
- [black](https://github.com/psf/black) developers for an awesome formatting
  tool
- [Timothy Edmund Crosley](https://github.com/timothycrosley) for
  [isort](https://github.com/PyCQA/isort) and how flexible it is
- [mypy](https://github.com/python/mypy) developers for doing all dirty work
  for us
- [pyright](https://github.com/microsoft/pyright) team for the new era of typed
  Python

<a id="documentation"></a>

## Documentation

All services type annotations can be found in
[aiobotocore docs](https://youtype.github.io/types_aiobotocore_docs/types_aiobotocore_iotsitewise/)

<a id="support-and-contributing"></a>

## Support and contributing

This package is auto-generated. Please reports any bugs or request new features
in [mypy-boto3-builder](https://github.com/youtype/mypy_boto3_builder/issues/)
repository.


